// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vencimiento {
  id                     Int          @id @default(autoincrement())
  fechaVencimiento      DateTime     // Fecha de vencimiento
  estado                 EstadoVencimiento @default(PENDIENTE) // Estado del vencimiento (pendiente, notificado, etc.)
  descripcion            String?      // Descripción del vencimiento (opcional)
  
  // Relación con Stock
  stockId               Int?         // Relación opcional con Stock
  stock                 Stock?       @relation(fields: [stockId], references: [id], onDelete: SetNull)

  // No es necesario incluir notificaciones aquí
}
enum EstadoVencimiento {
  PENDIENTE
  NOTIFICADO
  RESUELTO
}


model Notificacion {
  id                Int                @id @default(autoincrement())
  mensaje           String             // Mensaje de la notificación
  remitenteId       Int?               // Usuario que envía la notificación (opcional)
  remitente         Usuario?           @relation("Remitente", fields: [remitenteId], references: [id])
  tipoNotificacion  TipoNotificacion   // Tipo de notificación (enum)
  referenciaId      Int?               // ID de referencia relacionado (por ejemplo, ID de solicitud o transferencia)
  fechaCreacion     DateTime           @default(now()) // Fecha de creación de la notificación
  notificacionesUsuarios NotificacionesUsuarios[]  // Relación con tabla intermedia

  Usuario Usuario[] @relation("Destinatario")
}


model NotificacionesUsuarios {
  id                Int                @id @default(autoincrement())
  usuarioId         Int                // Usuario que recibe la notificación
  usuario           Usuario            @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  notificacionId    Int                // ID de la notificación
  notificacion      Notificacion       @relation(fields: [notificacionId], references: [id], onDelete: Cascade)
  leido             Boolean            @default(false)  // Indica si la notificación fue leída
  eliminado         Boolean            @default(false)  // Indica si la notificación fue eliminada
  leidoEn           DateTime?                          // Fecha en que se leyó
  recibidoEn        DateTime           @default(now())  // Fecha en que se recibió la notificación
}


model SolicitudPrecio {
  id                Int         @id @default(autoincrement())
  productoId        Int
  producto          Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  precioSolicitado  Float       // Precio solicitado por el vendedor
  solicitadoPorId   Int         // Relación con el usuario que solicita el precio
  solicitadoPor     Usuario     @relation("SolicitadoPor", fields: [solicitadoPorId], references: [id])
  estado            EstadoSolicitud  @default(PENDIENTE)  // Estado de la solicitud
  aprobadoPorId     Int?        // Admin que aprueba o rechaza la solicitud (nullable)
  aprobadoPor       Usuario?    @relation("AprobadoPor", fields: [aprobadoPorId], references: [id])
  fechaSolicitud    DateTime    @default(now())
  fechaRespuesta    DateTime?   // Fecha cuando fue aprobada o rechazada
}

model Producto {
  id                Int              @id @default(autoincrement())
  nombre            String
  descripcion       String?
  stock             Stock[]          // Relación con Stock
  categorias        Categoria[]      @relation(name: "CategoriaToProducto")
  ventas            VentaProducto[]  // Relación con productos vendidos en varias ventas
  codigoProducto    String           @unique  // NUEVO A APLICAR
  creadoEn          DateTime         @default(now())
  actualizadoEn     DateTime         @updatedAt
  HistorialStock HistorialStock[]
  HistorialPrecio HistorialPrecio[]
  TransferenciaProducto TransferenciaProducto[]
  //NUEVOS PRECIOS
  precios           PrecioProducto[] // Relación con múltiples precios
  SolicitudPrecio SolicitudPrecio[]
  //NUEVA SOLICITUD TRANSFERENCIA
  solicitudesTransferencia SolicitudTransferenciaProducto[]
  //NUEVO PRECIO COSTO PRODUCTO
  precioCostoActual Float?
  // Historial de precios de costo
  HistorialPrecioCosto HistorialPrecioCosto[]
}

model HistorialPrecioCosto {
  id                Int       @id @default(autoincrement())
  productoId        Int
  producto          Producto   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  precioCostoAnterior Float
  precioCostoNuevo    Float
  fechaCambio       DateTime  @default(now())
  //========================================>
  modificadoPorId     Int?
  modificadoPor       Usuario?   @relation(fields: [modificadoPorId], references: [id], onDelete: Cascade) // Relación con Usuario
}


model PrecioProducto {
  id                Int        @id @default(autoincrement())
  productoId        Int?
  producto          Producto?   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  precio            Float      // El precio de venta
  creadoPorId       Int?        // El usuario que creó el precio (puede ser un vendedor)
  creadoPor         Usuario?   @relation(fields: [creadoPorId], references: [id])
  fechaCreacion     DateTime   @default(now())
  // estado            EstadoPrecio  // Estado del precio: puede estar "APROBADO" o "PENDIENTE"
  estado            EstadoPrecio  // Estado del precio: APROBADO, PENDIENTE, RECHAZADO
  usado             Boolean     @default(false) // Para marcar si el precio ha sido utilizado
  tipo              TipoPrecio // Puede ser 'CREADO_POR_SOLICITUD', 'ESTANDAR', etc.
}

model HistorialPrecio {
  id              Int         @id @default(autoincrement())
  productoId      Int
  producto        Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  precioAnterior  Float
  precioNuevo     Float
  fechaCambio     DateTime    @default(now())
}

model Stock {
  id              Int         @id @default(autoincrement())
  productoId      Int
  cantidad        Int
  costoTotal      Float        // Costo total de adquisición de todos los productos en stock
  creadoEn        DateTime     @default(now())
  fechaIngreso    DateTime
  fechaVencimiento DateTime?   // Fecha de vencimiento asociada al lote de productos
  precioCosto     Float        // Precio al que se compró el producto en ese lote
  producto        Producto     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  entregaStockId  Int?         // Puede ser nulo si no está relacionado con una entrega específica
  entregaStock    EntregaStock? @relation(fields: [entregaStockId], references: [id], onDelete: SetNull)
  //OTROS
  sucursal        Sucursal     @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  sucursalId      Int          // NUEVO: Relación con la sucursal


  Vencimiento Vencimiento[]
}

model Sucursal {
  id              Int         @id @default(autoincrement())
  nombre          String      // Nombre de la sucursal
  direccion       String?     // Dirección física de la sucursal
  telefono        String?     // Teléfono de contacto
  pxb             String?
  productos       Stock[]     // Relación con el stock de productos de la sucursal
  usuarios        Usuario[]   // Relación con los empleados de la sucursal
  creadoEn        DateTime    @default(now())
  actualizadoEn   DateTime    @updatedAt
  tipoSucursal    TipoSucursal
  estadoOperacion   Boolean   @default(true) // Activa o inactiva
  Venta Venta[]
  TransferenciaProducto TransferenciaProducto[] @relation("SucursalOrigen")
  TransferenciaProductoDestino TransferenciaProducto[] @relation("SucursalDestino") // NUEVA RELACIÓN

  //NUEVO
  EntregaStock EntregaStock[]
  //NUEVO SOLICITUD TRANSFERENCIA
  // Relaciones para solicitudes de transferencia
  solicitudesOrigen    SolicitudTransferenciaProducto[] @relation("SucursalOrigenSolicitud")
  solicitudesDestino   SolicitudTransferenciaProducto[] @relation("SucursalDestinoSolicitud")
}

model EntregaStock {
  id              Int         @id @default(autoincrement())
  proveedorId     Int?        // Relación opcional con el proveedor
  proveedor       Proveedor?  @relation(fields: [proveedorId], references: [id], onDelete: SetNull)
  montoTotal      Float       // Monto total de la entrega (puede ser calculado sumando preciosCosto * cantidad)
  fechaEntrega    DateTime    @default(now())
  stockEntregado  Stock[]     // Relación con Stock
  recibidoPorId   Int?        // Usuario que recibió la entrega (puede ser opcional)
  usuarioRecibido Usuario?    @relation("UsuarioRecibido", fields: [recibidoPorId], references: [id], onDelete: SetNull)
  //NUEVO
  sucursalId      Int?         // NUEVO: Relación con la sucursal
  sucursal        Sucursal?    @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
}

model Usuario {
  id                    Int                @id @default(autoincrement())
  nombre                String
  rol                   Rol                // Rol del usuario
  contrasena            String
  activo                Boolean            @default(true)
  entregasRecibidas     EntregaStock[]     @relation("UsuarioRecibido")
  correo                String             @unique
  sucursalId            Int                // Relación con la sucursal
  sucursal              Sucursal           @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  TransferenciaProducto TransferenciaProducto[]
  PrecioProducto        PrecioProducto[]
  solicitudesPrecio     SolicitudPrecio[]  @relation("SolicitadoPor")
  solicitudesAprobadas  SolicitudPrecio[]  @relation("AprobadoPor")

  notificacionesEnviadas  Notificacion[] @relation("Remitente")
  notificacionesRecibidas Notificacion[] @relation("Destinatario")

  notificacionesUsuarios  NotificacionesUsuarios[]  // Relación con tabla intermedia
//NUEVAS PARA SOLICITAR TRANSFERENCIA
// Relaciones para las solicitudes de transferencia de productos
  // Relaciones para las solicitudes de transferencia de productos
  solicitudesEnviadas      SolicitudTransferenciaProducto[] @relation("UsuarioSolicitante")
  solicitudesAprobadasTransferencia SolicitudTransferenciaProducto[] @relation("AdministradorAprobador") // Renombrada para especificidad

  //RECIOS QUE EL WN MODIFICÓ
  HistorialPrecioCosto HistorialPrecioCosto[]
}

model Cliente {
  id              Int          @id @default(autoincrement())
  nombre          String
  correo          String       @unique
  telefono        String?
  direccion       String?
  compras         Venta[]
  creadoEn        DateTime     @default(now())
  actualizadoEn   DateTime     @updatedAt
  municipioId     Int?         // EN UBICACION TABLA
  municipio       Municipio?   @relation(fields: [municipioId], references: [id], onDelete: SetNull) // EN UBICACION TABLA
  departamentoId  Int?         // EN UBICACION TABLA
  departamento    Departamento? @relation(fields: [departamentoId], references: [id], onDelete: SetNull) // EN UBICACION TABLA
}


model Pago {
  id              Int       @id @default(autoincrement())
  ventaId         Int       @unique // Hacer que cada venta tenga solo un método de pago
  venta           Venta     @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  monto           Float     // Monto pagado
  metodoPago      MetodoPago // Usar el enum en lugar de String
  fechaPago       DateTime  @default(now())
}

model HistorialStock {
  id              Int         @id @default(autoincrement())
  productoId      Int
  cantidadAnterior Int
  cantidadNueva   Int
  fechaCambio     DateTime    @default(now())
  producto        Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model Venta {
  id              Int         @id @default(autoincrement())
  clienteId       Int?        // Relación opcional con un cliente//ENVIAR:OPCIONAL
  cliente         Cliente?    @relation(fields: [clienteId], references: [id], onDelete: SetNull)
  fechaVenta      DateTime    @default(now())
  horaVenta       DateTime    @default(now())
  productos       VentaProducto[]//ENVIAR
  totalVenta      Float       // Total de la venta//ENVIAR
  metodoPago      Pago?       // Cambia esto para permitir null
  //OTROS
  sucursalId      Int         // NUEVO: Relación con la sucursal que hizo la venta
  sucursal        Sucursal    @relation(fields: [sucursalId], references: [id], onDelete: Cascade)
  //OOTROS PARA CF
  nombreClienteFinal String?
  telefonoClienteFinal String?
  direccionClienteFinal String?
}

model TransferenciaProducto {
  id                Int         @id @default(autoincrement())
  productoId        Int         // Producto que se transfiere
  producto          Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  cantidad          Int         // Cantidad de producto transferido
  sucursalOrigenId  Int         // Sucursal de origen
  sucursalOrigen    Sucursal    @relation("SucursalOrigen", fields: [sucursalOrigenId], references: [id], onDelete: Cascade)
  sucursalDestinoId Int         // Sucursal de destino
  sucursalDestino   Sucursal    @relation("SucursalDestino", fields: [sucursalDestinoId], references: [id], onDelete: Cascade)  // NUEVA RELACIÓN
  fechaTransferencia DateTime   @default(now())
  usuarioEncargadoId Int?        // Relación con el usuario que hace la transferencia
  usuarioEncargado   Usuario?    @relation(fields: [usuarioEncargadoId], references: [id], onDelete: SetNull)
}
  
  model SolicitudTransferenciaProducto {
  id                    Int          @id @default(autoincrement())
  productoId            Int          // ID del producto que se quiere transferir
  producto              Producto     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  cantidad              Int          // Cantidad solicitada
  sucursalOrigenId      Int          // Sucursal de origen de la solicitud
  sucursalOrigen        Sucursal     @relation("SucursalOrigenSolicitud", fields: [sucursalOrigenId], references: [id], onDelete: Cascade)
  sucursalDestinoId     Int          // Sucursal de destino de la solicitud
  sucursalDestino       Sucursal     @relation("SucursalDestinoSolicitud", fields: [sucursalDestinoId], references: [id], onDelete: Cascade)
  usuarioSolicitanteId  Int?          // Usuario que realiza la solicitud
  usuarioSolicitante    Usuario?      @relation("UsuarioSolicitante", fields: [usuarioSolicitanteId], references: [id], onDelete: SetNull)
  estado                EstadoSolicitudTransferencia @default(PENDIENTE) // Estado de la solicitud
  fechaSolicitud        DateTime     @default(now())                    // Fecha de la solicitud
  fechaAprobacion       DateTime?                                        // Fecha de aprobación o rechazo
  administradorId       Int?         // Admin que aprueba/rechaza la solicitud
  administrador         Usuario?     @relation("AdministradorAprobador", fields: [administradorId], references: [id], onDelete: SetNull)
  // motivoRechazo         String?                                          // Motivo de rechazo, si es rechazado
}


model VentaProducto {
  id              Int         @id @default(autoincrement())
  ventaId         Int         // Relación con la venta
  productoId      Int         // Relación con el producto
  cantidad        Int         // Cantidad vendida del producto
  venta           Venta       @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  producto        Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  creadoEn        DateTime    @default(now())  // Fecha de creación del registro
  //NUEVA PROPIEDAD QUE REGISTRA EL PRECIO AL QUE SE VENDIÓ EL PRODUCTO, SUSTITUTO DE DE PRECIOvENTA EN TABLA PRODUCTO
  precioVenta     Float       // Precio de venta del producto en el momento de la venta
}

model Proveedor {
  id              Int              @id @default(autoincrement())
  nombre          String
  correo          String           @unique
  telefono        String
  direccion       String?
  razonSocial     String?
  rfc             String?
  nombreContacto  String?
  telefonoContacto String?
  emailContacto   String?
  pais            String?
  ciudad          String?
  codigoPostal    String?
  latitud         Float?
  longitud        Float?
  entregasStock   EntregaStock[]
  activo          Boolean          @default(true)
  notas           String?
  creadoEn        DateTime         @default(now())
  actualizadoEn   DateTime         @updatedAt
}

model Categoria {
  id              Int              @id @default(autoincrement())
  nombre          String           @unique()
  productos       Producto[]       @relation(name: "CategoriaToProducto")
}

model Departamento {
  id              Int         @id @default(autoincrement())
  nombre          String      @unique
  municipios      Municipio[] // Relación con municipios
  clientes        Cliente[]   // Relación con los clientes
}

model Municipio {
  id              Int         @id @default(autoincrement())
  nombre          String      @unique
  departamentoId  Int
  departamento    Departamento @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  clientes        Cliente[]   // Relación con los clientes
}

enum Rol {
  ADMIN
  MANAGER
  VENDEDOR
  SUPER_ADMIN
}

enum TipoSucursal {
  TIENDA
  ALMACEN
  CENTRO_DISTRIBUCION
  TALLER
  OFICINA
}

enum MetodoPago {
  CONTADO
  TARJETA
  TRANSFERENCIA
  PAYPAL
  OTRO
}

enum TipoPrecio {
  CREADO_POR_SOLICITUD
  ESTANDAR
}

enum EstadoPrecio {
  APROBADO
  PENDIENTE
  RECHAZADO
}

enum TipoNotificacion {
  SOLICITUD_PRECIO
  TRANSFERENCIA
  VENCIMIENTO
  OTRO
}

enum EstadoNotificacion {
  NO_LEIDO
  LEIDO
}

enum EstadoSolicitud {
  PENDIENTE
  APROBADO
  RECHAZADO
}

// Enum para el estado de las solicitudes de transferencia
enum EstadoSolicitudTransferencia {
  PENDIENTE
  APROBADO
  RECHAZADO
}
  