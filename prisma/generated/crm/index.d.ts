
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Empresa
 * 
 */
export type Empresa = $Result.DefaultSelection<Prisma.$EmpresaPayload>
/**
 * Model TipoServicio
 * 
 */
export type TipoServicio = $Result.DefaultSelection<Prisma.$TipoServicioPayload>
/**
 * Model Servicio
 * 
 */
export type Servicio = $Result.DefaultSelection<Prisma.$ServicioPayload>
/**
 * Model Proveedor
 * 
 */
export type Proveedor = $Result.DefaultSelection<Prisma.$ProveedorPayload>
/**
 * Model ServicioInternet
 * 
 */
export type ServicioInternet = $Result.DefaultSelection<Prisma.$ServicioInternetPayload>
/**
 * Model SaldoEmpresa
 * 
 */
export type SaldoEmpresa = $Result.DefaultSelection<Prisma.$SaldoEmpresaPayload>
/**
 * Model SaldoCaja
 * 
 */
export type SaldoCaja = $Result.DefaultSelection<Prisma.$SaldoCajaPayload>
/**
 * Model RegistroCaja
 * 
 */
export type RegistroCaja = $Result.DefaultSelection<Prisma.$RegistroCajaPayload>
/**
 * Model ClienteServicio
 * 
 */
export type ClienteServicio = $Result.DefaultSelection<Prisma.$ClienteServicioPayload>
/**
 * Model Factura
 * 
 */
export type Factura = $Result.DefaultSelection<Prisma.$FacturaPayload>
/**
 * Model PagoFactura
 * 
 */
export type PagoFactura = $Result.DefaultSelection<Prisma.$PagoFacturaPayload>
/**
 * Model FacturaInternet
 * 
 */
export type FacturaInternet = $Result.DefaultSelection<Prisma.$FacturaInternetPayload>
/**
 * Model PagoFacturaInternet
 * 
 */
export type PagoFacturaInternet = $Result.DefaultSelection<Prisma.$PagoFacturaInternetPayload>
/**
 * Model FacturaServicio
 * 
 */
export type FacturaServicio = $Result.DefaultSelection<Prisma.$FacturaServicioPayload>
/**
 * Model IP
 * 
 */
export type IP = $Result.DefaultSelection<Prisma.$IPPayload>
/**
 * Model Fotos
 * 
 */
export type Fotos = $Result.DefaultSelection<Prisma.$FotosPayload>
/**
 * Model ClienteInternet
 * 
 */
export type ClienteInternet = $Result.DefaultSelection<Prisma.$ClienteInternetPayload>
/**
 * Model saldoCliente
 * 
 */
export type saldoCliente = $Result.DefaultSelection<Prisma.$saldoClientePayload>
/**
 * Model Ubicacion
 * 
 */
export type Ubicacion = $Result.DefaultSelection<Prisma.$UbicacionPayload>
/**
 * Model Departamento
 * 
 */
export type Departamento = $Result.DefaultSelection<Prisma.$DepartamentoPayload>
/**
 * Model Municipio
 * 
 */
export type Municipio = $Result.DefaultSelection<Prisma.$MunicipioPayload>
/**
 * Model Ruta
 * 
 */
export type Ruta = $Result.DefaultSelection<Prisma.$RutaPayload>
/**
 * Model TicketSoporte
 * 
 */
export type TicketSoporte = $Result.DefaultSelection<Prisma.$TicketSoportePayload>
/**
 * Model SeguimientoTicket
 * 
 */
export type SeguimientoTicket = $Result.DefaultSelection<Prisma.$SeguimientoTicketPayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EstadoServicio: {
  ACTIVO: 'ACTIVO',
  INACTIVO: 'INACTIVO'
};

export type EstadoServicio = (typeof EstadoServicio)[keyof typeof EstadoServicio]


export const EstadoClienteServicio: {
  ACTIVO: 'ACTIVO',
  SUSPENDIDO: 'SUSPENDIDO',
  CANCELADO: 'CANCELADO'
};

export type EstadoClienteServicio = (typeof EstadoClienteServicio)[keyof typeof EstadoClienteServicio]


export const TipoFactura: {
  INTERNET: 'INTERNET',
  SERVICIO_ADICIONAL: 'SERVICIO_ADICIONAL'
};

export type TipoFactura = (typeof TipoFactura)[keyof typeof TipoFactura]


export const EstadoFactura: {
  PENDIENTE: 'PENDIENTE',
  PAGADA: 'PAGADA',
  ATRASADA: 'ATRASADA',
  CANCELADA: 'CANCELADA'
};

export type EstadoFactura = (typeof EstadoFactura)[keyof typeof EstadoFactura]


export const MetodoPago: {
  EFECTIVO: 'EFECTIVO',
  TARJETA: 'TARJETA',
  TRANSFERENCIA: 'TRANSFERENCIA',
  PAYPAL: 'PAYPAL'
};

export type MetodoPago = (typeof MetodoPago)[keyof typeof MetodoPago]


export const MetodoPagoFacturaInternet: {
  EFECTIVO: 'EFECTIVO',
  TARJETA: 'TARJETA',
  TRANSFERENCIA: 'TRANSFERENCIA',
  PAYPAL: 'PAYPAL'
};

export type MetodoPagoFacturaInternet = (typeof MetodoPagoFacturaInternet)[keyof typeof MetodoPagoFacturaInternet]


export const EstadoFacturaInternet: {
  PENDIENTE: 'PENDIENTE',
  PAGADA: 'PAGADA',
  ATRASADA: 'ATRASADA',
  CANCELADA: 'CANCELADA'
};

export type EstadoFacturaInternet = (typeof EstadoFacturaInternet)[keyof typeof EstadoFacturaInternet]


export const EstadoCliente: {
  ACTIVO: 'ACTIVO',
  MOROSO: 'MOROSO',
  SUSPENDIDO: 'SUSPENDIDO',
  DESINSTALADO: 'DESINSTALADO'
};

export type EstadoCliente = (typeof EstadoCliente)[keyof typeof EstadoCliente]


export const EstadoRuta: {
  ACTIVO: 'ACTIVO',
  CERRADO: 'CERRADO',
  CANCELADO: 'CANCELADO'
};

export type EstadoRuta = (typeof EstadoRuta)[keyof typeof EstadoRuta]


export const EstadoTicketSoporte: {
  ABIERTA: 'ABIERTA',
  EN_PROCESO: 'EN_PROCESO',
  PENDIENTE_CLIENTE: 'PENDIENTE_CLIENTE',
  PENDIENTE_TECNICO: 'PENDIENTE_TECNICO',
  RESUELTA: 'RESUELTA',
  CANCELADA: 'CANCELADA'
};

export type EstadoTicketSoporte = (typeof EstadoTicketSoporte)[keyof typeof EstadoTicketSoporte]


export const PrioridadTicketSoporte: {
  BAJA: 'BAJA',
  MEDIA: 'MEDIA',
  ALTA: 'ALTA',
  CRITICA: 'CRITICA'
};

export type PrioridadTicketSoporte = (typeof PrioridadTicketSoporte)[keyof typeof PrioridadTicketSoporte]


export const RolUsuario: {
  TECNICO: 'TECNICO',
  OFICINA: 'OFICINA',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

export type RolUsuario = (typeof RolUsuario)[keyof typeof RolUsuario]

}

export type EstadoServicio = $Enums.EstadoServicio

export const EstadoServicio: typeof $Enums.EstadoServicio

export type EstadoClienteServicio = $Enums.EstadoClienteServicio

export const EstadoClienteServicio: typeof $Enums.EstadoClienteServicio

export type TipoFactura = $Enums.TipoFactura

export const TipoFactura: typeof $Enums.TipoFactura

export type EstadoFactura = $Enums.EstadoFactura

export const EstadoFactura: typeof $Enums.EstadoFactura

export type MetodoPago = $Enums.MetodoPago

export const MetodoPago: typeof $Enums.MetodoPago

export type MetodoPagoFacturaInternet = $Enums.MetodoPagoFacturaInternet

export const MetodoPagoFacturaInternet: typeof $Enums.MetodoPagoFacturaInternet

export type EstadoFacturaInternet = $Enums.EstadoFacturaInternet

export const EstadoFacturaInternet: typeof $Enums.EstadoFacturaInternet

export type EstadoCliente = $Enums.EstadoCliente

export const EstadoCliente: typeof $Enums.EstadoCliente

export type EstadoRuta = $Enums.EstadoRuta

export const EstadoRuta: typeof $Enums.EstadoRuta

export type EstadoTicketSoporte = $Enums.EstadoTicketSoporte

export const EstadoTicketSoporte: typeof $Enums.EstadoTicketSoporte

export type PrioridadTicketSoporte = $Enums.PrioridadTicketSoporte

export const PrioridadTicketSoporte: typeof $Enums.PrioridadTicketSoporte

export type RolUsuario = $Enums.RolUsuario

export const RolUsuario: typeof $Enums.RolUsuario

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Empresas
 * const empresas = await prisma.empresa.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Empresas
   * const empresas = await prisma.empresa.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.empresa`: Exposes CRUD operations for the **Empresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresa.findMany()
    * ```
    */
  get empresa(): Prisma.EmpresaDelegate<ExtArgs>;

  /**
   * `prisma.tipoServicio`: Exposes CRUD operations for the **TipoServicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoServicios
    * const tipoServicios = await prisma.tipoServicio.findMany()
    * ```
    */
  get tipoServicio(): Prisma.TipoServicioDelegate<ExtArgs>;

  /**
   * `prisma.servicio`: Exposes CRUD operations for the **Servicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicios
    * const servicios = await prisma.servicio.findMany()
    * ```
    */
  get servicio(): Prisma.ServicioDelegate<ExtArgs>;

  /**
   * `prisma.proveedor`: Exposes CRUD operations for the **Proveedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proveedors
    * const proveedors = await prisma.proveedor.findMany()
    * ```
    */
  get proveedor(): Prisma.ProveedorDelegate<ExtArgs>;

  /**
   * `prisma.servicioInternet`: Exposes CRUD operations for the **ServicioInternet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServicioInternets
    * const servicioInternets = await prisma.servicioInternet.findMany()
    * ```
    */
  get servicioInternet(): Prisma.ServicioInternetDelegate<ExtArgs>;

  /**
   * `prisma.saldoEmpresa`: Exposes CRUD operations for the **SaldoEmpresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaldoEmpresas
    * const saldoEmpresas = await prisma.saldoEmpresa.findMany()
    * ```
    */
  get saldoEmpresa(): Prisma.SaldoEmpresaDelegate<ExtArgs>;

  /**
   * `prisma.saldoCaja`: Exposes CRUD operations for the **SaldoCaja** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaldoCajas
    * const saldoCajas = await prisma.saldoCaja.findMany()
    * ```
    */
  get saldoCaja(): Prisma.SaldoCajaDelegate<ExtArgs>;

  /**
   * `prisma.registroCaja`: Exposes CRUD operations for the **RegistroCaja** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegistroCajas
    * const registroCajas = await prisma.registroCaja.findMany()
    * ```
    */
  get registroCaja(): Prisma.RegistroCajaDelegate<ExtArgs>;

  /**
   * `prisma.clienteServicio`: Exposes CRUD operations for the **ClienteServicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteServicios
    * const clienteServicios = await prisma.clienteServicio.findMany()
    * ```
    */
  get clienteServicio(): Prisma.ClienteServicioDelegate<ExtArgs>;

  /**
   * `prisma.factura`: Exposes CRUD operations for the **Factura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Facturas
    * const facturas = await prisma.factura.findMany()
    * ```
    */
  get factura(): Prisma.FacturaDelegate<ExtArgs>;

  /**
   * `prisma.pagoFactura`: Exposes CRUD operations for the **PagoFactura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PagoFacturas
    * const pagoFacturas = await prisma.pagoFactura.findMany()
    * ```
    */
  get pagoFactura(): Prisma.PagoFacturaDelegate<ExtArgs>;

  /**
   * `prisma.facturaInternet`: Exposes CRUD operations for the **FacturaInternet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacturaInternets
    * const facturaInternets = await prisma.facturaInternet.findMany()
    * ```
    */
  get facturaInternet(): Prisma.FacturaInternetDelegate<ExtArgs>;

  /**
   * `prisma.pagoFacturaInternet`: Exposes CRUD operations for the **PagoFacturaInternet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PagoFacturaInternets
    * const pagoFacturaInternets = await prisma.pagoFacturaInternet.findMany()
    * ```
    */
  get pagoFacturaInternet(): Prisma.PagoFacturaInternetDelegate<ExtArgs>;

  /**
   * `prisma.facturaServicio`: Exposes CRUD operations for the **FacturaServicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacturaServicios
    * const facturaServicios = await prisma.facturaServicio.findMany()
    * ```
    */
  get facturaServicio(): Prisma.FacturaServicioDelegate<ExtArgs>;

  /**
   * `prisma.iP`: Exposes CRUD operations for the **IP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IPS
    * const iPS = await prisma.iP.findMany()
    * ```
    */
  get iP(): Prisma.IPDelegate<ExtArgs>;

  /**
   * `prisma.fotos`: Exposes CRUD operations for the **Fotos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fotos
    * const fotos = await prisma.fotos.findMany()
    * ```
    */
  get fotos(): Prisma.FotosDelegate<ExtArgs>;

  /**
   * `prisma.clienteInternet`: Exposes CRUD operations for the **ClienteInternet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteInternets
    * const clienteInternets = await prisma.clienteInternet.findMany()
    * ```
    */
  get clienteInternet(): Prisma.ClienteInternetDelegate<ExtArgs>;

  /**
   * `prisma.saldoCliente`: Exposes CRUD operations for the **saldoCliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaldoClientes
    * const saldoClientes = await prisma.saldoCliente.findMany()
    * ```
    */
  get saldoCliente(): Prisma.saldoClienteDelegate<ExtArgs>;

  /**
   * `prisma.ubicacion`: Exposes CRUD operations for the **Ubicacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ubicacions
    * const ubicacions = await prisma.ubicacion.findMany()
    * ```
    */
  get ubicacion(): Prisma.UbicacionDelegate<ExtArgs>;

  /**
   * `prisma.departamento`: Exposes CRUD operations for the **Departamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departamentos
    * const departamentos = await prisma.departamento.findMany()
    * ```
    */
  get departamento(): Prisma.DepartamentoDelegate<ExtArgs>;

  /**
   * `prisma.municipio`: Exposes CRUD operations for the **Municipio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Municipios
    * const municipios = await prisma.municipio.findMany()
    * ```
    */
  get municipio(): Prisma.MunicipioDelegate<ExtArgs>;

  /**
   * `prisma.ruta`: Exposes CRUD operations for the **Ruta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rutas
    * const rutas = await prisma.ruta.findMany()
    * ```
    */
  get ruta(): Prisma.RutaDelegate<ExtArgs>;

  /**
   * `prisma.ticketSoporte`: Exposes CRUD operations for the **TicketSoporte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TicketSoportes
    * const ticketSoportes = await prisma.ticketSoporte.findMany()
    * ```
    */
  get ticketSoporte(): Prisma.TicketSoporteDelegate<ExtArgs>;

  /**
   * `prisma.seguimientoTicket`: Exposes CRUD operations for the **SeguimientoTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeguimientoTickets
    * const seguimientoTickets = await prisma.seguimientoTicket.findMany()
    * ```
    */
  get seguimientoTicket(): Prisma.SeguimientoTicketDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Empresa: 'Empresa',
    TipoServicio: 'TipoServicio',
    Servicio: 'Servicio',
    Proveedor: 'Proveedor',
    ServicioInternet: 'ServicioInternet',
    SaldoEmpresa: 'SaldoEmpresa',
    SaldoCaja: 'SaldoCaja',
    RegistroCaja: 'RegistroCaja',
    ClienteServicio: 'ClienteServicio',
    Factura: 'Factura',
    PagoFactura: 'PagoFactura',
    FacturaInternet: 'FacturaInternet',
    PagoFacturaInternet: 'PagoFacturaInternet',
    FacturaServicio: 'FacturaServicio',
    IP: 'IP',
    Fotos: 'Fotos',
    ClienteInternet: 'ClienteInternet',
    saldoCliente: 'saldoCliente',
    Ubicacion: 'Ubicacion',
    Departamento: 'Departamento',
    Municipio: 'Municipio',
    Ruta: 'Ruta',
    TicketSoporte: 'TicketSoporte',
    SeguimientoTicket: 'SeguimientoTicket',
    Usuario: 'Usuario'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "empresa" | "tipoServicio" | "servicio" | "proveedor" | "servicioInternet" | "saldoEmpresa" | "saldoCaja" | "registroCaja" | "clienteServicio" | "factura" | "pagoFactura" | "facturaInternet" | "pagoFacturaInternet" | "facturaServicio" | "iP" | "fotos" | "clienteInternet" | "saldoCliente" | "ubicacion" | "departamento" | "municipio" | "ruta" | "ticketSoporte" | "seguimientoTicket" | "usuario"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Empresa: {
        payload: Prisma.$EmpresaPayload<ExtArgs>
        fields: Prisma.EmpresaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmpresaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmpresaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findFirst: {
            args: Prisma.EmpresaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmpresaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findMany: {
            args: Prisma.EmpresaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          create: {
            args: Prisma.EmpresaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          createMany: {
            args: Prisma.EmpresaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmpresaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          delete: {
            args: Prisma.EmpresaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          update: {
            args: Prisma.EmpresaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          deleteMany: {
            args: Prisma.EmpresaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmpresaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmpresaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          aggregate: {
            args: Prisma.EmpresaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmpresa>
          }
          groupBy: {
            args: Prisma.EmpresaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmpresaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmpresaCountArgs<ExtArgs>
            result: $Utils.Optional<EmpresaCountAggregateOutputType> | number
          }
        }
      }
      TipoServicio: {
        payload: Prisma.$TipoServicioPayload<ExtArgs>
        fields: Prisma.TipoServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          findFirst: {
            args: Prisma.TipoServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          findMany: {
            args: Prisma.TipoServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>[]
          }
          create: {
            args: Prisma.TipoServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          createMany: {
            args: Prisma.TipoServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TipoServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>[]
          }
          delete: {
            args: Prisma.TipoServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          update: {
            args: Prisma.TipoServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          deleteMany: {
            args: Prisma.TipoServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipoServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TipoServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoServicioPayload>
          }
          aggregate: {
            args: Prisma.TipoServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipoServicio>
          }
          groupBy: {
            args: Prisma.TipoServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipoServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoServicioCountArgs<ExtArgs>
            result: $Utils.Optional<TipoServicioCountAggregateOutputType> | number
          }
        }
      }
      Servicio: {
        payload: Prisma.$ServicioPayload<ExtArgs>
        fields: Prisma.ServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findFirst: {
            args: Prisma.ServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          findMany: {
            args: Prisma.ServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          create: {
            args: Prisma.ServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          createMany: {
            args: Prisma.ServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>[]
          }
          delete: {
            args: Prisma.ServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          update: {
            args: Prisma.ServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          deleteMany: {
            args: Prisma.ServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioPayload>
          }
          aggregate: {
            args: Prisma.ServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicio>
          }
          groupBy: {
            args: Prisma.ServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicioCountArgs<ExtArgs>
            result: $Utils.Optional<ServicioCountAggregateOutputType> | number
          }
        }
      }
      Proveedor: {
        payload: Prisma.$ProveedorPayload<ExtArgs>
        fields: Prisma.ProveedorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProveedorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProveedorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          findFirst: {
            args: Prisma.ProveedorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProveedorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          findMany: {
            args: Prisma.ProveedorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>[]
          }
          create: {
            args: Prisma.ProveedorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          createMany: {
            args: Prisma.ProveedorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProveedorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>[]
          }
          delete: {
            args: Prisma.ProveedorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          update: {
            args: Prisma.ProveedorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          deleteMany: {
            args: Prisma.ProveedorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProveedorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProveedorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProveedorPayload>
          }
          aggregate: {
            args: Prisma.ProveedorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProveedor>
          }
          groupBy: {
            args: Prisma.ProveedorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProveedorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProveedorCountArgs<ExtArgs>
            result: $Utils.Optional<ProveedorCountAggregateOutputType> | number
          }
        }
      }
      ServicioInternet: {
        payload: Prisma.$ServicioInternetPayload<ExtArgs>
        fields: Prisma.ServicioInternetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicioInternetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicioInternetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>
          }
          findFirst: {
            args: Prisma.ServicioInternetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicioInternetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>
          }
          findMany: {
            args: Prisma.ServicioInternetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>[]
          }
          create: {
            args: Prisma.ServicioInternetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>
          }
          createMany: {
            args: Prisma.ServicioInternetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicioInternetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>[]
          }
          delete: {
            args: Prisma.ServicioInternetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>
          }
          update: {
            args: Prisma.ServicioInternetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>
          }
          deleteMany: {
            args: Prisma.ServicioInternetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicioInternetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServicioInternetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicioInternetPayload>
          }
          aggregate: {
            args: Prisma.ServicioInternetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicioInternet>
          }
          groupBy: {
            args: Prisma.ServicioInternetGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicioInternetGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicioInternetCountArgs<ExtArgs>
            result: $Utils.Optional<ServicioInternetCountAggregateOutputType> | number
          }
        }
      }
      SaldoEmpresa: {
        payload: Prisma.$SaldoEmpresaPayload<ExtArgs>
        fields: Prisma.SaldoEmpresaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaldoEmpresaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaldoEmpresaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>
          }
          findFirst: {
            args: Prisma.SaldoEmpresaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaldoEmpresaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>
          }
          findMany: {
            args: Prisma.SaldoEmpresaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>[]
          }
          create: {
            args: Prisma.SaldoEmpresaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>
          }
          createMany: {
            args: Prisma.SaldoEmpresaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaldoEmpresaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>[]
          }
          delete: {
            args: Prisma.SaldoEmpresaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>
          }
          update: {
            args: Prisma.SaldoEmpresaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>
          }
          deleteMany: {
            args: Prisma.SaldoEmpresaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaldoEmpresaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SaldoEmpresaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoEmpresaPayload>
          }
          aggregate: {
            args: Prisma.SaldoEmpresaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaldoEmpresa>
          }
          groupBy: {
            args: Prisma.SaldoEmpresaGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaldoEmpresaGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaldoEmpresaCountArgs<ExtArgs>
            result: $Utils.Optional<SaldoEmpresaCountAggregateOutputType> | number
          }
        }
      }
      SaldoCaja: {
        payload: Prisma.$SaldoCajaPayload<ExtArgs>
        fields: Prisma.SaldoCajaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaldoCajaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaldoCajaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>
          }
          findFirst: {
            args: Prisma.SaldoCajaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaldoCajaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>
          }
          findMany: {
            args: Prisma.SaldoCajaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>[]
          }
          create: {
            args: Prisma.SaldoCajaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>
          }
          createMany: {
            args: Prisma.SaldoCajaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaldoCajaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>[]
          }
          delete: {
            args: Prisma.SaldoCajaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>
          }
          update: {
            args: Prisma.SaldoCajaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>
          }
          deleteMany: {
            args: Prisma.SaldoCajaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaldoCajaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SaldoCajaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaldoCajaPayload>
          }
          aggregate: {
            args: Prisma.SaldoCajaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaldoCaja>
          }
          groupBy: {
            args: Prisma.SaldoCajaGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaldoCajaGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaldoCajaCountArgs<ExtArgs>
            result: $Utils.Optional<SaldoCajaCountAggregateOutputType> | number
          }
        }
      }
      RegistroCaja: {
        payload: Prisma.$RegistroCajaPayload<ExtArgs>
        fields: Prisma.RegistroCajaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistroCajaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistroCajaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>
          }
          findFirst: {
            args: Prisma.RegistroCajaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistroCajaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>
          }
          findMany: {
            args: Prisma.RegistroCajaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>[]
          }
          create: {
            args: Prisma.RegistroCajaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>
          }
          createMany: {
            args: Prisma.RegistroCajaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistroCajaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>[]
          }
          delete: {
            args: Prisma.RegistroCajaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>
          }
          update: {
            args: Prisma.RegistroCajaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>
          }
          deleteMany: {
            args: Prisma.RegistroCajaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistroCajaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegistroCajaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroCajaPayload>
          }
          aggregate: {
            args: Prisma.RegistroCajaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistroCaja>
          }
          groupBy: {
            args: Prisma.RegistroCajaGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistroCajaGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistroCajaCountArgs<ExtArgs>
            result: $Utils.Optional<RegistroCajaCountAggregateOutputType> | number
          }
        }
      }
      ClienteServicio: {
        payload: Prisma.$ClienteServicioPayload<ExtArgs>
        fields: Prisma.ClienteServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>
          }
          findFirst: {
            args: Prisma.ClienteServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>
          }
          findMany: {
            args: Prisma.ClienteServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>[]
          }
          create: {
            args: Prisma.ClienteServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>
          }
          createMany: {
            args: Prisma.ClienteServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClienteServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>[]
          }
          delete: {
            args: Prisma.ClienteServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>
          }
          update: {
            args: Prisma.ClienteServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>
          }
          deleteMany: {
            args: Prisma.ClienteServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicioPayload>
          }
          aggregate: {
            args: Prisma.ClienteServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteServicio>
          }
          groupBy: {
            args: Prisma.ClienteServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteServicioCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteServicioCountAggregateOutputType> | number
          }
        }
      }
      Factura: {
        payload: Prisma.$FacturaPayload<ExtArgs>
        fields: Prisma.FacturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacturaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacturaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          findFirst: {
            args: Prisma.FacturaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacturaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          findMany: {
            args: Prisma.FacturaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>[]
          }
          create: {
            args: Prisma.FacturaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          createMany: {
            args: Prisma.FacturaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacturaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>[]
          }
          delete: {
            args: Prisma.FacturaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          update: {
            args: Prisma.FacturaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          deleteMany: {
            args: Prisma.FacturaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacturaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FacturaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaPayload>
          }
          aggregate: {
            args: Prisma.FacturaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFactura>
          }
          groupBy: {
            args: Prisma.FacturaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacturaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacturaCountArgs<ExtArgs>
            result: $Utils.Optional<FacturaCountAggregateOutputType> | number
          }
        }
      }
      PagoFactura: {
        payload: Prisma.$PagoFacturaPayload<ExtArgs>
        fields: Prisma.PagoFacturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PagoFacturaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagoFacturaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>
          }
          findFirst: {
            args: Prisma.PagoFacturaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagoFacturaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>
          }
          findMany: {
            args: Prisma.PagoFacturaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>[]
          }
          create: {
            args: Prisma.PagoFacturaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>
          }
          createMany: {
            args: Prisma.PagoFacturaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PagoFacturaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>[]
          }
          delete: {
            args: Prisma.PagoFacturaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>
          }
          update: {
            args: Prisma.PagoFacturaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>
          }
          deleteMany: {
            args: Prisma.PagoFacturaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PagoFacturaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PagoFacturaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaPayload>
          }
          aggregate: {
            args: Prisma.PagoFacturaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePagoFactura>
          }
          groupBy: {
            args: Prisma.PagoFacturaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PagoFacturaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagoFacturaCountArgs<ExtArgs>
            result: $Utils.Optional<PagoFacturaCountAggregateOutputType> | number
          }
        }
      }
      FacturaInternet: {
        payload: Prisma.$FacturaInternetPayload<ExtArgs>
        fields: Prisma.FacturaInternetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacturaInternetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacturaInternetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>
          }
          findFirst: {
            args: Prisma.FacturaInternetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacturaInternetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>
          }
          findMany: {
            args: Prisma.FacturaInternetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>[]
          }
          create: {
            args: Prisma.FacturaInternetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>
          }
          createMany: {
            args: Prisma.FacturaInternetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacturaInternetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>[]
          }
          delete: {
            args: Prisma.FacturaInternetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>
          }
          update: {
            args: Prisma.FacturaInternetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>
          }
          deleteMany: {
            args: Prisma.FacturaInternetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacturaInternetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FacturaInternetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaInternetPayload>
          }
          aggregate: {
            args: Prisma.FacturaInternetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacturaInternet>
          }
          groupBy: {
            args: Prisma.FacturaInternetGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacturaInternetGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacturaInternetCountArgs<ExtArgs>
            result: $Utils.Optional<FacturaInternetCountAggregateOutputType> | number
          }
        }
      }
      PagoFacturaInternet: {
        payload: Prisma.$PagoFacturaInternetPayload<ExtArgs>
        fields: Prisma.PagoFacturaInternetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PagoFacturaInternetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagoFacturaInternetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>
          }
          findFirst: {
            args: Prisma.PagoFacturaInternetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagoFacturaInternetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>
          }
          findMany: {
            args: Prisma.PagoFacturaInternetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>[]
          }
          create: {
            args: Prisma.PagoFacturaInternetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>
          }
          createMany: {
            args: Prisma.PagoFacturaInternetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PagoFacturaInternetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>[]
          }
          delete: {
            args: Prisma.PagoFacturaInternetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>
          }
          update: {
            args: Prisma.PagoFacturaInternetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>
          }
          deleteMany: {
            args: Prisma.PagoFacturaInternetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PagoFacturaInternetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PagoFacturaInternetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagoFacturaInternetPayload>
          }
          aggregate: {
            args: Prisma.PagoFacturaInternetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePagoFacturaInternet>
          }
          groupBy: {
            args: Prisma.PagoFacturaInternetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PagoFacturaInternetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagoFacturaInternetCountArgs<ExtArgs>
            result: $Utils.Optional<PagoFacturaInternetCountAggregateOutputType> | number
          }
        }
      }
      FacturaServicio: {
        payload: Prisma.$FacturaServicioPayload<ExtArgs>
        fields: Prisma.FacturaServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacturaServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacturaServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>
          }
          findFirst: {
            args: Prisma.FacturaServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacturaServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>
          }
          findMany: {
            args: Prisma.FacturaServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>[]
          }
          create: {
            args: Prisma.FacturaServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>
          }
          createMany: {
            args: Prisma.FacturaServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacturaServicioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>[]
          }
          delete: {
            args: Prisma.FacturaServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>
          }
          update: {
            args: Prisma.FacturaServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>
          }
          deleteMany: {
            args: Prisma.FacturaServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacturaServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FacturaServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturaServicioPayload>
          }
          aggregate: {
            args: Prisma.FacturaServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacturaServicio>
          }
          groupBy: {
            args: Prisma.FacturaServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacturaServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacturaServicioCountArgs<ExtArgs>
            result: $Utils.Optional<FacturaServicioCountAggregateOutputType> | number
          }
        }
      }
      IP: {
        payload: Prisma.$IPPayload<ExtArgs>
        fields: Prisma.IPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IPFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IPFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>
          }
          findFirst: {
            args: Prisma.IPFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IPFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>
          }
          findMany: {
            args: Prisma.IPFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>[]
          }
          create: {
            args: Prisma.IPCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>
          }
          createMany: {
            args: Prisma.IPCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IPCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>[]
          }
          delete: {
            args: Prisma.IPDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>
          }
          update: {
            args: Prisma.IPUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>
          }
          deleteMany: {
            args: Prisma.IPDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IPUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IPUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPPayload>
          }
          aggregate: {
            args: Prisma.IPAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIP>
          }
          groupBy: {
            args: Prisma.IPGroupByArgs<ExtArgs>
            result: $Utils.Optional<IPGroupByOutputType>[]
          }
          count: {
            args: Prisma.IPCountArgs<ExtArgs>
            result: $Utils.Optional<IPCountAggregateOutputType> | number
          }
        }
      }
      Fotos: {
        payload: Prisma.$FotosPayload<ExtArgs>
        fields: Prisma.FotosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FotosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FotosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>
          }
          findFirst: {
            args: Prisma.FotosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FotosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>
          }
          findMany: {
            args: Prisma.FotosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>[]
          }
          create: {
            args: Prisma.FotosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>
          }
          createMany: {
            args: Prisma.FotosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FotosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>[]
          }
          delete: {
            args: Prisma.FotosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>
          }
          update: {
            args: Prisma.FotosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>
          }
          deleteMany: {
            args: Prisma.FotosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FotosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FotosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotosPayload>
          }
          aggregate: {
            args: Prisma.FotosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFotos>
          }
          groupBy: {
            args: Prisma.FotosGroupByArgs<ExtArgs>
            result: $Utils.Optional<FotosGroupByOutputType>[]
          }
          count: {
            args: Prisma.FotosCountArgs<ExtArgs>
            result: $Utils.Optional<FotosCountAggregateOutputType> | number
          }
        }
      }
      ClienteInternet: {
        payload: Prisma.$ClienteInternetPayload<ExtArgs>
        fields: Prisma.ClienteInternetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteInternetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteInternetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>
          }
          findFirst: {
            args: Prisma.ClienteInternetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteInternetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>
          }
          findMany: {
            args: Prisma.ClienteInternetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>[]
          }
          create: {
            args: Prisma.ClienteInternetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>
          }
          createMany: {
            args: Prisma.ClienteInternetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClienteInternetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>[]
          }
          delete: {
            args: Prisma.ClienteInternetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>
          }
          update: {
            args: Prisma.ClienteInternetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>
          }
          deleteMany: {
            args: Prisma.ClienteInternetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteInternetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteInternetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteInternetPayload>
          }
          aggregate: {
            args: Prisma.ClienteInternetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteInternet>
          }
          groupBy: {
            args: Prisma.ClienteInternetGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteInternetGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteInternetCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteInternetCountAggregateOutputType> | number
          }
        }
      }
      saldoCliente: {
        payload: Prisma.$saldoClientePayload<ExtArgs>
        fields: Prisma.saldoClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.saldoClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.saldoClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>
          }
          findFirst: {
            args: Prisma.saldoClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.saldoClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>
          }
          findMany: {
            args: Prisma.saldoClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>[]
          }
          create: {
            args: Prisma.saldoClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>
          }
          createMany: {
            args: Prisma.saldoClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.saldoClienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>[]
          }
          delete: {
            args: Prisma.saldoClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>
          }
          update: {
            args: Prisma.saldoClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>
          }
          deleteMany: {
            args: Prisma.saldoClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.saldoClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.saldoClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$saldoClientePayload>
          }
          aggregate: {
            args: Prisma.SaldoClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaldoCliente>
          }
          groupBy: {
            args: Prisma.saldoClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaldoClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.saldoClienteCountArgs<ExtArgs>
            result: $Utils.Optional<SaldoClienteCountAggregateOutputType> | number
          }
        }
      }
      Ubicacion: {
        payload: Prisma.$UbicacionPayload<ExtArgs>
        fields: Prisma.UbicacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UbicacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UbicacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>
          }
          findFirst: {
            args: Prisma.UbicacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UbicacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>
          }
          findMany: {
            args: Prisma.UbicacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>[]
          }
          create: {
            args: Prisma.UbicacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>
          }
          createMany: {
            args: Prisma.UbicacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UbicacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>[]
          }
          delete: {
            args: Prisma.UbicacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>
          }
          update: {
            args: Prisma.UbicacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>
          }
          deleteMany: {
            args: Prisma.UbicacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UbicacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UbicacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UbicacionPayload>
          }
          aggregate: {
            args: Prisma.UbicacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUbicacion>
          }
          groupBy: {
            args: Prisma.UbicacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UbicacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UbicacionCountArgs<ExtArgs>
            result: $Utils.Optional<UbicacionCountAggregateOutputType> | number
          }
        }
      }
      Departamento: {
        payload: Prisma.$DepartamentoPayload<ExtArgs>
        fields: Prisma.DepartamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          findFirst: {
            args: Prisma.DepartamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          findMany: {
            args: Prisma.DepartamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>[]
          }
          create: {
            args: Prisma.DepartamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          createMany: {
            args: Prisma.DepartamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartamentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>[]
          }
          delete: {
            args: Prisma.DepartamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          update: {
            args: Prisma.DepartamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          deleteMany: {
            args: Prisma.DepartamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartamentoPayload>
          }
          aggregate: {
            args: Prisma.DepartamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartamento>
          }
          groupBy: {
            args: Prisma.DepartamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartamentoCountArgs<ExtArgs>
            result: $Utils.Optional<DepartamentoCountAggregateOutputType> | number
          }
        }
      }
      Municipio: {
        payload: Prisma.$MunicipioPayload<ExtArgs>
        fields: Prisma.MunicipioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MunicipioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MunicipioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>
          }
          findFirst: {
            args: Prisma.MunicipioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MunicipioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>
          }
          findMany: {
            args: Prisma.MunicipioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>[]
          }
          create: {
            args: Prisma.MunicipioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>
          }
          createMany: {
            args: Prisma.MunicipioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MunicipioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>[]
          }
          delete: {
            args: Prisma.MunicipioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>
          }
          update: {
            args: Prisma.MunicipioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>
          }
          deleteMany: {
            args: Prisma.MunicipioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MunicipioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MunicipioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MunicipioPayload>
          }
          aggregate: {
            args: Prisma.MunicipioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMunicipio>
          }
          groupBy: {
            args: Prisma.MunicipioGroupByArgs<ExtArgs>
            result: $Utils.Optional<MunicipioGroupByOutputType>[]
          }
          count: {
            args: Prisma.MunicipioCountArgs<ExtArgs>
            result: $Utils.Optional<MunicipioCountAggregateOutputType> | number
          }
        }
      }
      Ruta: {
        payload: Prisma.$RutaPayload<ExtArgs>
        fields: Prisma.RutaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RutaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RutaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>
          }
          findFirst: {
            args: Prisma.RutaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RutaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>
          }
          findMany: {
            args: Prisma.RutaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>[]
          }
          create: {
            args: Prisma.RutaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>
          }
          createMany: {
            args: Prisma.RutaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RutaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>[]
          }
          delete: {
            args: Prisma.RutaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>
          }
          update: {
            args: Prisma.RutaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>
          }
          deleteMany: {
            args: Prisma.RutaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RutaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RutaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutaPayload>
          }
          aggregate: {
            args: Prisma.RutaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRuta>
          }
          groupBy: {
            args: Prisma.RutaGroupByArgs<ExtArgs>
            result: $Utils.Optional<RutaGroupByOutputType>[]
          }
          count: {
            args: Prisma.RutaCountArgs<ExtArgs>
            result: $Utils.Optional<RutaCountAggregateOutputType> | number
          }
        }
      }
      TicketSoporte: {
        payload: Prisma.$TicketSoportePayload<ExtArgs>
        fields: Prisma.TicketSoporteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketSoporteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketSoporteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>
          }
          findFirst: {
            args: Prisma.TicketSoporteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketSoporteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>
          }
          findMany: {
            args: Prisma.TicketSoporteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>[]
          }
          create: {
            args: Prisma.TicketSoporteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>
          }
          createMany: {
            args: Prisma.TicketSoporteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketSoporteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>[]
          }
          delete: {
            args: Prisma.TicketSoporteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>
          }
          update: {
            args: Prisma.TicketSoporteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>
          }
          deleteMany: {
            args: Prisma.TicketSoporteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketSoporteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketSoporteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketSoportePayload>
          }
          aggregate: {
            args: Prisma.TicketSoporteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicketSoporte>
          }
          groupBy: {
            args: Prisma.TicketSoporteGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketSoporteGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketSoporteCountArgs<ExtArgs>
            result: $Utils.Optional<TicketSoporteCountAggregateOutputType> | number
          }
        }
      }
      SeguimientoTicket: {
        payload: Prisma.$SeguimientoTicketPayload<ExtArgs>
        fields: Prisma.SeguimientoTicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeguimientoTicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeguimientoTicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>
          }
          findFirst: {
            args: Prisma.SeguimientoTicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeguimientoTicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>
          }
          findMany: {
            args: Prisma.SeguimientoTicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>[]
          }
          create: {
            args: Prisma.SeguimientoTicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>
          }
          createMany: {
            args: Prisma.SeguimientoTicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeguimientoTicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>[]
          }
          delete: {
            args: Prisma.SeguimientoTicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>
          }
          update: {
            args: Prisma.SeguimientoTicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>
          }
          deleteMany: {
            args: Prisma.SeguimientoTicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeguimientoTicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeguimientoTicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguimientoTicketPayload>
          }
          aggregate: {
            args: Prisma.SeguimientoTicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeguimientoTicket>
          }
          groupBy: {
            args: Prisma.SeguimientoTicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeguimientoTicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeguimientoTicketCountArgs<ExtArgs>
            result: $Utils.Optional<SeguimientoTicketCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmpresaCountOutputType
   */

  export type EmpresaCountOutputType = {
    empleados: number
    rutas: number
    clientesInternet: number
    facturas: number
    TicketSoporte: number
    ServicioInternet: number
    Ubicacion: number
    Proveedor: number
    Servicio: number
    Factura: number
  }

  export type EmpresaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empleados?: boolean | EmpresaCountOutputTypeCountEmpleadosArgs
    rutas?: boolean | EmpresaCountOutputTypeCountRutasArgs
    clientesInternet?: boolean | EmpresaCountOutputTypeCountClientesInternetArgs
    facturas?: boolean | EmpresaCountOutputTypeCountFacturasArgs
    TicketSoporte?: boolean | EmpresaCountOutputTypeCountTicketSoporteArgs
    ServicioInternet?: boolean | EmpresaCountOutputTypeCountServicioInternetArgs
    Ubicacion?: boolean | EmpresaCountOutputTypeCountUbicacionArgs
    Proveedor?: boolean | EmpresaCountOutputTypeCountProveedorArgs
    Servicio?: boolean | EmpresaCountOutputTypeCountServicioArgs
    Factura?: boolean | EmpresaCountOutputTypeCountFacturaArgs
  }

  // Custom InputTypes
  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaCountOutputType
     */
    select?: EmpresaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountEmpleadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountRutasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RutaWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountClientesInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountFacturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaInternetWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountTicketSoporteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketSoporteWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountServicioInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioInternetWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountUbicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UbicacionWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountProveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProveedorWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
  }


  /**
   * Count Type TipoServicioCountOutputType
   */

  export type TipoServicioCountOutputType = {
    servicios: number
  }

  export type TipoServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicios?: boolean | TipoServicioCountOutputTypeCountServiciosArgs
  }

  // Custom InputTypes
  /**
   * TipoServicioCountOutputType without action
   */
  export type TipoServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicioCountOutputType
     */
    select?: TipoServicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TipoServicioCountOutputType without action
   */
  export type TipoServicioCountOutputTypeCountServiciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
  }


  /**
   * Count Type ServicioCountOutputType
   */

  export type ServicioCountOutputType = {
    clientes: number
    FacturaServicio: number
  }

  export type ServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | ServicioCountOutputTypeCountClientesArgs
    FacturaServicio?: boolean | ServicioCountOutputTypeCountFacturaServicioArgs
  }

  // Custom InputTypes
  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioCountOutputType
     */
    select?: ServicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteServicioWhereInput
  }

  /**
   * ServicioCountOutputType without action
   */
  export type ServicioCountOutputTypeCountFacturaServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaServicioWhereInput
  }


  /**
   * Count Type ServicioInternetCountOutputType
   */

  export type ServicioInternetCountOutputType = {
    clientes: number
  }

  export type ServicioInternetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | ServicioInternetCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * ServicioInternetCountOutputType without action
   */
  export type ServicioInternetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternetCountOutputType
     */
    select?: ServicioInternetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicioInternetCountOutputType without action
   */
  export type ServicioInternetCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
  }


  /**
   * Count Type SaldoCajaCountOutputType
   */

  export type SaldoCajaCountOutputType = {
    registrosCaja: number
  }

  export type SaldoCajaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrosCaja?: boolean | SaldoCajaCountOutputTypeCountRegistrosCajaArgs
  }

  // Custom InputTypes
  /**
   * SaldoCajaCountOutputType without action
   */
  export type SaldoCajaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCajaCountOutputType
     */
    select?: SaldoCajaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SaldoCajaCountOutputType without action
   */
  export type SaldoCajaCountOutputTypeCountRegistrosCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroCajaWhereInput
  }


  /**
   * Count Type FacturaCountOutputType
   */

  export type FacturaCountOutputType = {
    servicios: number
    pagos: number
  }

  export type FacturaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicios?: boolean | FacturaCountOutputTypeCountServiciosArgs
    pagos?: boolean | FacturaCountOutputTypeCountPagosArgs
  }

  // Custom InputTypes
  /**
   * FacturaCountOutputType without action
   */
  export type FacturaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaCountOutputType
     */
    select?: FacturaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FacturaCountOutputType without action
   */
  export type FacturaCountOutputTypeCountServiciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaServicioWhereInput
  }

  /**
   * FacturaCountOutputType without action
   */
  export type FacturaCountOutputTypeCountPagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoFacturaWhereInput
  }


  /**
   * Count Type FacturaInternetCountOutputType
   */

  export type FacturaInternetCountOutputType = {
    pagos: number
  }

  export type FacturaInternetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pagos?: boolean | FacturaInternetCountOutputTypeCountPagosArgs
  }

  // Custom InputTypes
  /**
   * FacturaInternetCountOutputType without action
   */
  export type FacturaInternetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternetCountOutputType
     */
    select?: FacturaInternetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FacturaInternetCountOutputType without action
   */
  export type FacturaInternetCountOutputTypeCountPagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoFacturaInternetWhereInput
  }


  /**
   * Count Type ClienteInternetCountOutputType
   */

  export type ClienteInternetCountOutputType = {
    ruta: number
    ticketSoporte: number
    fotos: number
    clienteServicio: number
    facturaInternet: number
    PagoFacturaInternet: number
    factura: number
    pagoFactura: number
  }

  export type ClienteInternetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ruta?: boolean | ClienteInternetCountOutputTypeCountRutaArgs
    ticketSoporte?: boolean | ClienteInternetCountOutputTypeCountTicketSoporteArgs
    fotos?: boolean | ClienteInternetCountOutputTypeCountFotosArgs
    clienteServicio?: boolean | ClienteInternetCountOutputTypeCountClienteServicioArgs
    facturaInternet?: boolean | ClienteInternetCountOutputTypeCountFacturaInternetArgs
    PagoFacturaInternet?: boolean | ClienteInternetCountOutputTypeCountPagoFacturaInternetArgs
    factura?: boolean | ClienteInternetCountOutputTypeCountFacturaArgs
    pagoFactura?: boolean | ClienteInternetCountOutputTypeCountPagoFacturaArgs
  }

  // Custom InputTypes
  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternetCountOutputType
     */
    select?: ClienteInternetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountRutaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RutaWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountTicketSoporteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketSoporteWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountFotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FotosWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountClienteServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteServicioWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountFacturaInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaInternetWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountPagoFacturaInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoFacturaInternetWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
  }

  /**
   * ClienteInternetCountOutputType without action
   */
  export type ClienteInternetCountOutputTypeCountPagoFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoFacturaWhereInput
  }


  /**
   * Count Type DepartamentoCountOutputType
   */

  export type DepartamentoCountOutputType = {
    municipios: number
    clientes: number
  }

  export type DepartamentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    municipios?: boolean | DepartamentoCountOutputTypeCountMunicipiosArgs
    clientes?: boolean | DepartamentoCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartamentoCountOutputType
     */
    select?: DepartamentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeCountMunicipiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MunicipioWhereInput
  }

  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
  }


  /**
   * Count Type MunicipioCountOutputType
   */

  export type MunicipioCountOutputType = {
    clientes: number
  }

  export type MunicipioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | MunicipioCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * MunicipioCountOutputType without action
   */
  export type MunicipioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MunicipioCountOutputType
     */
    select?: MunicipioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MunicipioCountOutputType without action
   */
  export type MunicipioCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
  }


  /**
   * Count Type RutaCountOutputType
   */

  export type RutaCountOutputType = {
    Clientes: number
  }

  export type RutaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Clientes?: boolean | RutaCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * RutaCountOutputType without action
   */
  export type RutaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RutaCountOutputType
     */
    select?: RutaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RutaCountOutputType without action
   */
  export type RutaCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
  }


  /**
   * Count Type TicketSoporteCountOutputType
   */

  export type TicketSoporteCountOutputType = {
    SeguimientoTicket: number
  }

  export type TicketSoporteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SeguimientoTicket?: boolean | TicketSoporteCountOutputTypeCountSeguimientoTicketArgs
  }

  // Custom InputTypes
  /**
   * TicketSoporteCountOutputType without action
   */
  export type TicketSoporteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporteCountOutputType
     */
    select?: TicketSoporteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketSoporteCountOutputType without action
   */
  export type TicketSoporteCountOutputTypeCountSeguimientoTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguimientoTicketWhereInput
  }


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    Ruta: number
    ticketsAsignados: number
    ticketsCreados: number
    SeguimientoTicket: number
    clientesAsesorados: number
    RegistroCaja: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Ruta?: boolean | UsuarioCountOutputTypeCountRutaArgs
    ticketsAsignados?: boolean | UsuarioCountOutputTypeCountTicketsAsignadosArgs
    ticketsCreados?: boolean | UsuarioCountOutputTypeCountTicketsCreadosArgs
    SeguimientoTicket?: boolean | UsuarioCountOutputTypeCountSeguimientoTicketArgs
    clientesAsesorados?: boolean | UsuarioCountOutputTypeCountClientesAsesoradosArgs
    RegistroCaja?: boolean | UsuarioCountOutputTypeCountRegistroCajaArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRutaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RutaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTicketsAsignadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketSoporteWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTicketsCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketSoporteWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSeguimientoTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguimientoTicketWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountClientesAsesoradosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRegistroCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroCajaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Empresa
   */

  export type AggregateEmpresa = {
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  export type EmpresaAvgAggregateOutputType = {
    id: number | null
  }

  export type EmpresaSumAggregateOutputType = {
    id: number | null
  }

  export type EmpresaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    pbx: string | null
    correo: string | null
    sitioWeb: string | null
    nit: string | null
    logo1: string | null
    logo2: string | null
    logo3: string | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type EmpresaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    pbx: string | null
    correo: string | null
    sitioWeb: string | null
    nit: string | null
    logo1: string | null
    logo2: string | null
    logo3: string | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type EmpresaCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    telefono: number
    pbx: number
    correo: number
    sitioWeb: number
    nit: number
    logo1: number
    logo2: number
    logo3: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type EmpresaAvgAggregateInputType = {
    id?: true
  }

  export type EmpresaSumAggregateInputType = {
    id?: true
  }

  export type EmpresaMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    pbx?: true
    correo?: true
    sitioWeb?: true
    nit?: true
    logo1?: true
    logo2?: true
    logo3?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type EmpresaMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    pbx?: true
    correo?: true
    sitioWeb?: true
    nit?: true
    logo1?: true
    logo2?: true
    logo3?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type EmpresaCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    pbx?: true
    correo?: true
    sitioWeb?: true
    nit?: true
    logo1?: true
    logo2?: true
    logo3?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type EmpresaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresa to aggregate.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Empresas
    **/
    _count?: true | EmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmpresaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmpresaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaMaxAggregateInputType
  }

  export type GetEmpresaAggregateType<T extends EmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresa[P]>
      : GetScalarType<T[P], AggregateEmpresa[P]>
  }




  export type EmpresaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmpresaWhereInput
    orderBy?: EmpresaOrderByWithAggregationInput | EmpresaOrderByWithAggregationInput[]
    by: EmpresaScalarFieldEnum[] | EmpresaScalarFieldEnum
    having?: EmpresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaCountAggregateInputType | true
    _avg?: EmpresaAvgAggregateInputType
    _sum?: EmpresaSumAggregateInputType
    _min?: EmpresaMinAggregateInputType
    _max?: EmpresaMaxAggregateInputType
  }

  export type EmpresaGroupByOutputType = {
    id: number
    nombre: string
    direccion: string | null
    telefono: string | null
    pbx: string | null
    correo: string | null
    sitioWeb: string | null
    nit: string | null
    logo1: string | null
    logo2: string | null
    logo3: string | null
    creadoEn: Date
    actualizadoEn: Date
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  type GetEmpresaGroupByPayload<T extends EmpresaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
        }
      >
    >


  export type EmpresaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    pbx?: boolean
    correo?: boolean
    sitioWeb?: boolean
    nit?: boolean
    logo1?: boolean
    logo2?: boolean
    logo3?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empleados?: boolean | Empresa$empleadosArgs<ExtArgs>
    rutas?: boolean | Empresa$rutasArgs<ExtArgs>
    clientesInternet?: boolean | Empresa$clientesInternetArgs<ExtArgs>
    facturas?: boolean | Empresa$facturasArgs<ExtArgs>
    TicketSoporte?: boolean | Empresa$TicketSoporteArgs<ExtArgs>
    saldoEmpresa?: boolean | Empresa$saldoEmpresaArgs<ExtArgs>
    saldoCaja?: boolean | Empresa$saldoCajaArgs<ExtArgs>
    ServicioInternet?: boolean | Empresa$ServicioInternetArgs<ExtArgs>
    Ubicacion?: boolean | Empresa$UbicacionArgs<ExtArgs>
    Proveedor?: boolean | Empresa$ProveedorArgs<ExtArgs>
    Servicio?: boolean | Empresa$ServicioArgs<ExtArgs>
    Factura?: boolean | Empresa$FacturaArgs<ExtArgs>
    _count?: boolean | EmpresaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["empresa"]>

  export type EmpresaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    pbx?: boolean
    correo?: boolean
    sitioWeb?: boolean
    nit?: boolean
    logo1?: boolean
    logo2?: boolean
    logo3?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }, ExtArgs["result"]["empresa"]>

  export type EmpresaSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    pbx?: boolean
    correo?: boolean
    sitioWeb?: boolean
    nit?: boolean
    logo1?: boolean
    logo2?: boolean
    logo3?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type EmpresaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empleados?: boolean | Empresa$empleadosArgs<ExtArgs>
    rutas?: boolean | Empresa$rutasArgs<ExtArgs>
    clientesInternet?: boolean | Empresa$clientesInternetArgs<ExtArgs>
    facturas?: boolean | Empresa$facturasArgs<ExtArgs>
    TicketSoporte?: boolean | Empresa$TicketSoporteArgs<ExtArgs>
    saldoEmpresa?: boolean | Empresa$saldoEmpresaArgs<ExtArgs>
    saldoCaja?: boolean | Empresa$saldoCajaArgs<ExtArgs>
    ServicioInternet?: boolean | Empresa$ServicioInternetArgs<ExtArgs>
    Ubicacion?: boolean | Empresa$UbicacionArgs<ExtArgs>
    Proveedor?: boolean | Empresa$ProveedorArgs<ExtArgs>
    Servicio?: boolean | Empresa$ServicioArgs<ExtArgs>
    Factura?: boolean | Empresa$FacturaArgs<ExtArgs>
    _count?: boolean | EmpresaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmpresaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmpresaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Empresa"
    objects: {
      empleados: Prisma.$UsuarioPayload<ExtArgs>[]
      rutas: Prisma.$RutaPayload<ExtArgs>[]
      clientesInternet: Prisma.$ClienteInternetPayload<ExtArgs>[]
      facturas: Prisma.$FacturaInternetPayload<ExtArgs>[]
      TicketSoporte: Prisma.$TicketSoportePayload<ExtArgs>[]
      saldoEmpresa: Prisma.$SaldoEmpresaPayload<ExtArgs> | null
      saldoCaja: Prisma.$SaldoCajaPayload<ExtArgs> | null
      ServicioInternet: Prisma.$ServicioInternetPayload<ExtArgs>[]
      Ubicacion: Prisma.$UbicacionPayload<ExtArgs>[]
      Proveedor: Prisma.$ProveedorPayload<ExtArgs>[]
      Servicio: Prisma.$ServicioPayload<ExtArgs>[]
      Factura: Prisma.$FacturaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      direccion: string | null
      telefono: string | null
      pbx: string | null
      correo: string | null
      sitioWeb: string | null
      nit: string | null
      logo1: string | null
      logo2: string | null
      logo3: string | null
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["empresa"]>
    composites: {}
  }

  type EmpresaGetPayload<S extends boolean | null | undefined | EmpresaDefaultArgs> = $Result.GetResult<Prisma.$EmpresaPayload, S>

  type EmpresaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmpresaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmpresaCountAggregateInputType | true
    }

  export interface EmpresaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Empresa'], meta: { name: 'Empresa' } }
    /**
     * Find zero or one Empresa that matches the filter.
     * @param {EmpresaFindUniqueArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmpresaFindUniqueArgs>(args: SelectSubset<T, EmpresaFindUniqueArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Empresa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmpresaFindUniqueOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmpresaFindUniqueOrThrowArgs>(args: SelectSubset<T, EmpresaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Empresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmpresaFindFirstArgs>(args?: SelectSubset<T, EmpresaFindFirstArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Empresa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmpresaFindFirstOrThrowArgs>(args?: SelectSubset<T, EmpresaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresa.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresaWithIdOnly = await prisma.empresa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmpresaFindManyArgs>(args?: SelectSubset<T, EmpresaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Empresa.
     * @param {EmpresaCreateArgs} args - Arguments to create a Empresa.
     * @example
     * // Create one Empresa
     * const Empresa = await prisma.empresa.create({
     *   data: {
     *     // ... data to create a Empresa
     *   }
     * })
     * 
     */
    create<T extends EmpresaCreateArgs>(args: SelectSubset<T, EmpresaCreateArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Empresas.
     * @param {EmpresaCreateManyArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmpresaCreateManyArgs>(args?: SelectSubset<T, EmpresaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Empresas and returns the data saved in the database.
     * @param {EmpresaCreateManyAndReturnArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Empresas and only return the `id`
     * const empresaWithIdOnly = await prisma.empresa.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmpresaCreateManyAndReturnArgs>(args?: SelectSubset<T, EmpresaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Empresa.
     * @param {EmpresaDeleteArgs} args - Arguments to delete one Empresa.
     * @example
     * // Delete one Empresa
     * const Empresa = await prisma.empresa.delete({
     *   where: {
     *     // ... filter to delete one Empresa
     *   }
     * })
     * 
     */
    delete<T extends EmpresaDeleteArgs>(args: SelectSubset<T, EmpresaDeleteArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Empresa.
     * @param {EmpresaUpdateArgs} args - Arguments to update one Empresa.
     * @example
     * // Update one Empresa
     * const empresa = await prisma.empresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmpresaUpdateArgs>(args: SelectSubset<T, EmpresaUpdateArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Empresas.
     * @param {EmpresaDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmpresaDeleteManyArgs>(args?: SelectSubset<T, EmpresaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmpresaUpdateManyArgs>(args: SelectSubset<T, EmpresaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Empresa.
     * @param {EmpresaUpsertArgs} args - Arguments to update or create a Empresa.
     * @example
     * // Update or create a Empresa
     * const empresa = await prisma.empresa.upsert({
     *   create: {
     *     // ... data to create a Empresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresa we want to update
     *   }
     * })
     */
    upsert<T extends EmpresaUpsertArgs>(args: SelectSubset<T, EmpresaUpsertArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresa.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends EmpresaCountArgs>(
      args?: Subset<T, EmpresaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaAggregateArgs>(args: Subset<T, EmpresaAggregateArgs>): Prisma.PrismaPromise<GetEmpresaAggregateType<T>>

    /**
     * Group by Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresaGroupByArgs['orderBy'] }
        : { orderBy?: EmpresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Empresa model
   */
  readonly fields: EmpresaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Empresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmpresaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empleados<T extends Empresa$empleadosArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$empleadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany"> | Null>
    rutas<T extends Empresa$rutasArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$rutasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findMany"> | Null>
    clientesInternet<T extends Empresa$clientesInternetArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$clientesInternetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany"> | Null>
    facturas<T extends Empresa$facturasArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$facturasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findMany"> | Null>
    TicketSoporte<T extends Empresa$TicketSoporteArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$TicketSoporteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findMany"> | Null>
    saldoEmpresa<T extends Empresa$saldoEmpresaArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$saldoEmpresaArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    saldoCaja<T extends Empresa$saldoCajaArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$saldoCajaArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ServicioInternet<T extends Empresa$ServicioInternetArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$ServicioInternetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findMany"> | Null>
    Ubicacion<T extends Empresa$UbicacionArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$UbicacionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findMany"> | Null>
    Proveedor<T extends Empresa$ProveedorArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$ProveedorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findMany"> | Null>
    Servicio<T extends Empresa$ServicioArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$ServicioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany"> | Null>
    Factura<T extends Empresa$FacturaArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$FacturaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Empresa model
   */ 
  interface EmpresaFieldRefs {
    readonly id: FieldRef<"Empresa", 'Int'>
    readonly nombre: FieldRef<"Empresa", 'String'>
    readonly direccion: FieldRef<"Empresa", 'String'>
    readonly telefono: FieldRef<"Empresa", 'String'>
    readonly pbx: FieldRef<"Empresa", 'String'>
    readonly correo: FieldRef<"Empresa", 'String'>
    readonly sitioWeb: FieldRef<"Empresa", 'String'>
    readonly nit: FieldRef<"Empresa", 'String'>
    readonly logo1: FieldRef<"Empresa", 'String'>
    readonly logo2: FieldRef<"Empresa", 'String'>
    readonly logo3: FieldRef<"Empresa", 'String'>
    readonly creadoEn: FieldRef<"Empresa", 'DateTime'>
    readonly actualizadoEn: FieldRef<"Empresa", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Empresa findUnique
   */
  export type EmpresaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findUniqueOrThrow
   */
  export type EmpresaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findFirst
   */
  export type EmpresaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findFirstOrThrow
   */
  export type EmpresaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findMany
   */
  export type EmpresaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresas to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa create
   */
  export type EmpresaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The data needed to create a Empresa.
     */
    data: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
  }

  /**
   * Empresa createMany
   */
  export type EmpresaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Empresas.
     */
    data: EmpresaCreateManyInput | EmpresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Empresa createManyAndReturn
   */
  export type EmpresaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Empresas.
     */
    data: EmpresaCreateManyInput | EmpresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Empresa update
   */
  export type EmpresaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The data needed to update a Empresa.
     */
    data: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
    /**
     * Choose, which Empresa to update.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa updateMany
   */
  export type EmpresaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Empresas.
     */
    data: XOR<EmpresaUpdateManyMutationInput, EmpresaUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     */
    where?: EmpresaWhereInput
  }

  /**
   * Empresa upsert
   */
  export type EmpresaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The filter to search for the Empresa to update in case it exists.
     */
    where: EmpresaWhereUniqueInput
    /**
     * In case the Empresa found by the `where` argument doesn't exist, create a new Empresa with this data.
     */
    create: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
    /**
     * In case the Empresa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
  }

  /**
   * Empresa delete
   */
  export type EmpresaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter which Empresa to delete.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa deleteMany
   */
  export type EmpresaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresas to delete
     */
    where?: EmpresaWhereInput
  }

  /**
   * Empresa.empleados
   */
  export type Empresa$empleadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    cursor?: UsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Empresa.rutas
   */
  export type Empresa$rutasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    where?: RutaWhereInput
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    cursor?: RutaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RutaScalarFieldEnum | RutaScalarFieldEnum[]
  }

  /**
   * Empresa.clientesInternet
   */
  export type Empresa$clientesInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    cursor?: ClienteInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * Empresa.facturas
   */
  export type Empresa$facturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    where?: FacturaInternetWhereInput
    orderBy?: FacturaInternetOrderByWithRelationInput | FacturaInternetOrderByWithRelationInput[]
    cursor?: FacturaInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaInternetScalarFieldEnum | FacturaInternetScalarFieldEnum[]
  }

  /**
   * Empresa.TicketSoporte
   */
  export type Empresa$TicketSoporteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    where?: TicketSoporteWhereInput
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    cursor?: TicketSoporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * Empresa.saldoEmpresa
   */
  export type Empresa$saldoEmpresaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    where?: SaldoEmpresaWhereInput
  }

  /**
   * Empresa.saldoCaja
   */
  export type Empresa$saldoCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    where?: SaldoCajaWhereInput
  }

  /**
   * Empresa.ServicioInternet
   */
  export type Empresa$ServicioInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    where?: ServicioInternetWhereInput
    orderBy?: ServicioInternetOrderByWithRelationInput | ServicioInternetOrderByWithRelationInput[]
    cursor?: ServicioInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicioInternetScalarFieldEnum | ServicioInternetScalarFieldEnum[]
  }

  /**
   * Empresa.Ubicacion
   */
  export type Empresa$UbicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    where?: UbicacionWhereInput
    orderBy?: UbicacionOrderByWithRelationInput | UbicacionOrderByWithRelationInput[]
    cursor?: UbicacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UbicacionScalarFieldEnum | UbicacionScalarFieldEnum[]
  }

  /**
   * Empresa.Proveedor
   */
  export type Empresa$ProveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    where?: ProveedorWhereInput
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    cursor?: ProveedorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }

  /**
   * Empresa.Servicio
   */
  export type Empresa$ServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    cursor?: ServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Empresa.Factura
   */
  export type Empresa$FacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    cursor?: FacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Empresa without action
   */
  export type EmpresaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
  }


  /**
   * Model TipoServicio
   */

  export type AggregateTipoServicio = {
    _count: TipoServicioCountAggregateOutputType | null
    _avg: TipoServicioAvgAggregateOutputType | null
    _sum: TipoServicioSumAggregateOutputType | null
    _min: TipoServicioMinAggregateOutputType | null
    _max: TipoServicioMaxAggregateOutputType | null
  }

  export type TipoServicioAvgAggregateOutputType = {
    id: number | null
  }

  export type TipoServicioSumAggregateOutputType = {
    id: number | null
  }

  export type TipoServicioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    estado: $Enums.EstadoServicio | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type TipoServicioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    estado: $Enums.EstadoServicio | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type TipoServicioCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    estado: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type TipoServicioAvgAggregateInputType = {
    id?: true
  }

  export type TipoServicioSumAggregateInputType = {
    id?: true
  }

  export type TipoServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type TipoServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type TipoServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type TipoServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoServicio to aggregate.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoServicios
    **/
    _count?: true | TipoServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoServicioMaxAggregateInputType
  }

  export type GetTipoServicioAggregateType<T extends TipoServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoServicio[P]>
      : GetScalarType<T[P], AggregateTipoServicio[P]>
  }




  export type TipoServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoServicioWhereInput
    orderBy?: TipoServicioOrderByWithAggregationInput | TipoServicioOrderByWithAggregationInput[]
    by: TipoServicioScalarFieldEnum[] | TipoServicioScalarFieldEnum
    having?: TipoServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoServicioCountAggregateInputType | true
    _avg?: TipoServicioAvgAggregateInputType
    _sum?: TipoServicioSumAggregateInputType
    _min?: TipoServicioMinAggregateInputType
    _max?: TipoServicioMaxAggregateInputType
  }

  export type TipoServicioGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string | null
    estado: $Enums.EstadoServicio
    creadoEn: Date
    actualizadoEn: Date
    _count: TipoServicioCountAggregateOutputType | null
    _avg: TipoServicioAvgAggregateOutputType | null
    _sum: TipoServicioSumAggregateOutputType | null
    _min: TipoServicioMinAggregateOutputType | null
    _max: TipoServicioMaxAggregateOutputType | null
  }

  type GetTipoServicioGroupByPayload<T extends TipoServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoServicioGroupByOutputType[P]>
            : GetScalarType<T[P], TipoServicioGroupByOutputType[P]>
        }
      >
    >


  export type TipoServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    servicios?: boolean | TipoServicio$serviciosArgs<ExtArgs>
    _count?: boolean | TipoServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoServicio"]>

  export type TipoServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }, ExtArgs["result"]["tipoServicio"]>

  export type TipoServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type TipoServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servicios?: boolean | TipoServicio$serviciosArgs<ExtArgs>
    _count?: boolean | TipoServicioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TipoServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TipoServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoServicio"
    objects: {
      servicios: Prisma.$ServicioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string | null
      estado: $Enums.EstadoServicio
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["tipoServicio"]>
    composites: {}
  }

  type TipoServicioGetPayload<S extends boolean | null | undefined | TipoServicioDefaultArgs> = $Result.GetResult<Prisma.$TipoServicioPayload, S>

  type TipoServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TipoServicioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TipoServicioCountAggregateInputType | true
    }

  export interface TipoServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoServicio'], meta: { name: 'TipoServicio' } }
    /**
     * Find zero or one TipoServicio that matches the filter.
     * @param {TipoServicioFindUniqueArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipoServicioFindUniqueArgs>(args: SelectSubset<T, TipoServicioFindUniqueArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TipoServicio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TipoServicioFindUniqueOrThrowArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipoServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, TipoServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TipoServicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioFindFirstArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipoServicioFindFirstArgs>(args?: SelectSubset<T, TipoServicioFindFirstArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TipoServicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioFindFirstOrThrowArgs} args - Arguments to find a TipoServicio
     * @example
     * // Get one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipoServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, TipoServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TipoServicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoServicios
     * const tipoServicios = await prisma.tipoServicio.findMany()
     * 
     * // Get first 10 TipoServicios
     * const tipoServicios = await prisma.tipoServicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoServicioWithIdOnly = await prisma.tipoServicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipoServicioFindManyArgs>(args?: SelectSubset<T, TipoServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TipoServicio.
     * @param {TipoServicioCreateArgs} args - Arguments to create a TipoServicio.
     * @example
     * // Create one TipoServicio
     * const TipoServicio = await prisma.tipoServicio.create({
     *   data: {
     *     // ... data to create a TipoServicio
     *   }
     * })
     * 
     */
    create<T extends TipoServicioCreateArgs>(args: SelectSubset<T, TipoServicioCreateArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TipoServicios.
     * @param {TipoServicioCreateManyArgs} args - Arguments to create many TipoServicios.
     * @example
     * // Create many TipoServicios
     * const tipoServicio = await prisma.tipoServicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipoServicioCreateManyArgs>(args?: SelectSubset<T, TipoServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TipoServicios and returns the data saved in the database.
     * @param {TipoServicioCreateManyAndReturnArgs} args - Arguments to create many TipoServicios.
     * @example
     * // Create many TipoServicios
     * const tipoServicio = await prisma.tipoServicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TipoServicios and only return the `id`
     * const tipoServicioWithIdOnly = await prisma.tipoServicio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TipoServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, TipoServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TipoServicio.
     * @param {TipoServicioDeleteArgs} args - Arguments to delete one TipoServicio.
     * @example
     * // Delete one TipoServicio
     * const TipoServicio = await prisma.tipoServicio.delete({
     *   where: {
     *     // ... filter to delete one TipoServicio
     *   }
     * })
     * 
     */
    delete<T extends TipoServicioDeleteArgs>(args: SelectSubset<T, TipoServicioDeleteArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TipoServicio.
     * @param {TipoServicioUpdateArgs} args - Arguments to update one TipoServicio.
     * @example
     * // Update one TipoServicio
     * const tipoServicio = await prisma.tipoServicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipoServicioUpdateArgs>(args: SelectSubset<T, TipoServicioUpdateArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TipoServicios.
     * @param {TipoServicioDeleteManyArgs} args - Arguments to filter TipoServicios to delete.
     * @example
     * // Delete a few TipoServicios
     * const { count } = await prisma.tipoServicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipoServicioDeleteManyArgs>(args?: SelectSubset<T, TipoServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoServicios
     * const tipoServicio = await prisma.tipoServicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipoServicioUpdateManyArgs>(args: SelectSubset<T, TipoServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoServicio.
     * @param {TipoServicioUpsertArgs} args - Arguments to update or create a TipoServicio.
     * @example
     * // Update or create a TipoServicio
     * const tipoServicio = await prisma.tipoServicio.upsert({
     *   create: {
     *     // ... data to create a TipoServicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoServicio we want to update
     *   }
     * })
     */
    upsert<T extends TipoServicioUpsertArgs>(args: SelectSubset<T, TipoServicioUpsertArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TipoServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioCountArgs} args - Arguments to filter TipoServicios to count.
     * @example
     * // Count the number of TipoServicios
     * const count = await prisma.tipoServicio.count({
     *   where: {
     *     // ... the filter for the TipoServicios we want to count
     *   }
     * })
    **/
    count<T extends TipoServicioCountArgs>(
      args?: Subset<T, TipoServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoServicioAggregateArgs>(args: Subset<T, TipoServicioAggregateArgs>): Prisma.PrismaPromise<GetTipoServicioAggregateType<T>>

    /**
     * Group by TipoServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoServicioGroupByArgs['orderBy'] }
        : { orderBy?: TipoServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoServicio model
   */
  readonly fields: TipoServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoServicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    servicios<T extends TipoServicio$serviciosArgs<ExtArgs> = {}>(args?: Subset<T, TipoServicio$serviciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipoServicio model
   */ 
  interface TipoServicioFieldRefs {
    readonly id: FieldRef<"TipoServicio", 'Int'>
    readonly nombre: FieldRef<"TipoServicio", 'String'>
    readonly descripcion: FieldRef<"TipoServicio", 'String'>
    readonly estado: FieldRef<"TipoServicio", 'EstadoServicio'>
    readonly creadoEn: FieldRef<"TipoServicio", 'DateTime'>
    readonly actualizadoEn: FieldRef<"TipoServicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TipoServicio findUnique
   */
  export type TipoServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where: TipoServicioWhereUniqueInput
  }

  /**
   * TipoServicio findUniqueOrThrow
   */
  export type TipoServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where: TipoServicioWhereUniqueInput
  }

  /**
   * TipoServicio findFirst
   */
  export type TipoServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoServicios.
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoServicios.
     */
    distinct?: TipoServicioScalarFieldEnum | TipoServicioScalarFieldEnum[]
  }

  /**
   * TipoServicio findFirstOrThrow
   */
  export type TipoServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicio to fetch.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoServicios.
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoServicios.
     */
    distinct?: TipoServicioScalarFieldEnum | TipoServicioScalarFieldEnum[]
  }

  /**
   * TipoServicio findMany
   */
  export type TipoServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter, which TipoServicios to fetch.
     */
    where?: TipoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoServicios to fetch.
     */
    orderBy?: TipoServicioOrderByWithRelationInput | TipoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoServicios.
     */
    cursor?: TipoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoServicios.
     */
    skip?: number
    distinct?: TipoServicioScalarFieldEnum | TipoServicioScalarFieldEnum[]
  }

  /**
   * TipoServicio create
   */
  export type TipoServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoServicio.
     */
    data: XOR<TipoServicioCreateInput, TipoServicioUncheckedCreateInput>
  }

  /**
   * TipoServicio createMany
   */
  export type TipoServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoServicios.
     */
    data: TipoServicioCreateManyInput | TipoServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoServicio createManyAndReturn
   */
  export type TipoServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TipoServicios.
     */
    data: TipoServicioCreateManyInput | TipoServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoServicio update
   */
  export type TipoServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoServicio.
     */
    data: XOR<TipoServicioUpdateInput, TipoServicioUncheckedUpdateInput>
    /**
     * Choose, which TipoServicio to update.
     */
    where: TipoServicioWhereUniqueInput
  }

  /**
   * TipoServicio updateMany
   */
  export type TipoServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoServicios.
     */
    data: XOR<TipoServicioUpdateManyMutationInput, TipoServicioUncheckedUpdateManyInput>
    /**
     * Filter which TipoServicios to update
     */
    where?: TipoServicioWhereInput
  }

  /**
   * TipoServicio upsert
   */
  export type TipoServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoServicio to update in case it exists.
     */
    where: TipoServicioWhereUniqueInput
    /**
     * In case the TipoServicio found by the `where` argument doesn't exist, create a new TipoServicio with this data.
     */
    create: XOR<TipoServicioCreateInput, TipoServicioUncheckedCreateInput>
    /**
     * In case the TipoServicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoServicioUpdateInput, TipoServicioUncheckedUpdateInput>
  }

  /**
   * TipoServicio delete
   */
  export type TipoServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
    /**
     * Filter which TipoServicio to delete.
     */
    where: TipoServicioWhereUniqueInput
  }

  /**
   * TipoServicio deleteMany
   */
  export type TipoServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoServicios to delete
     */
    where?: TipoServicioWhereInput
  }

  /**
   * TipoServicio.servicios
   */
  export type TipoServicio$serviciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    cursor?: ServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * TipoServicio without action
   */
  export type TipoServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoServicio
     */
    select?: TipoServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoServicioInclude<ExtArgs> | null
  }


  /**
   * Model Servicio
   */

  export type AggregateServicio = {
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  export type ServicioAvgAggregateOutputType = {
    id: number | null
    precio: number | null
    tipoServicioId: number | null
    empresaId: number | null
  }

  export type ServicioSumAggregateOutputType = {
    id: number | null
    precio: number | null
    tipoServicioId: number | null
    empresaId: number | null
  }

  export type ServicioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    precio: number | null
    estado: $Enums.EstadoServicio | null
    tipoServicioId: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type ServicioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    descripcion: string | null
    precio: number | null
    estado: $Enums.EstadoServicio | null
    tipoServicioId: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type ServicioCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    precio: number
    estado: number
    tipoServicioId: number
    empresaId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type ServicioAvgAggregateInputType = {
    id?: true
    precio?: true
    tipoServicioId?: true
    empresaId?: true
  }

  export type ServicioSumAggregateInputType = {
    id?: true
    precio?: true
    tipoServicioId?: true
    empresaId?: true
  }

  export type ServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio?: true
    estado?: true
    tipoServicioId?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type ServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio?: true
    estado?: true
    tipoServicioId?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type ServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    precio?: true
    estado?: true
    tipoServicioId?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type ServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicio to aggregate.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicios
    **/
    _count?: true | ServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicioMaxAggregateInputType
  }

  export type GetServicioAggregateType<T extends ServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicio[P]>
      : GetScalarType<T[P], AggregateServicio[P]>
  }




  export type ServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioWhereInput
    orderBy?: ServicioOrderByWithAggregationInput | ServicioOrderByWithAggregationInput[]
    by: ServicioScalarFieldEnum[] | ServicioScalarFieldEnum
    having?: ServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicioCountAggregateInputType | true
    _avg?: ServicioAvgAggregateInputType
    _sum?: ServicioSumAggregateInputType
    _min?: ServicioMinAggregateInputType
    _max?: ServicioMaxAggregateInputType
  }

  export type ServicioGroupByOutputType = {
    id: number
    nombre: string
    descripcion: string | null
    precio: number
    estado: $Enums.EstadoServicio
    tipoServicioId: number
    empresaId: number
    creadoEn: Date
    actualizadoEn: Date
    _count: ServicioCountAggregateOutputType | null
    _avg: ServicioAvgAggregateOutputType | null
    _sum: ServicioSumAggregateOutputType | null
    _min: ServicioMinAggregateOutputType | null
    _max: ServicioMaxAggregateOutputType | null
  }

  type GetServicioGroupByPayload<T extends ServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ServicioGroupByOutputType[P]>
        }
      >
    >


  export type ServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    estado?: boolean
    tipoServicioId?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    tipoServicio?: boolean | TipoServicioDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    clientes?: boolean | Servicio$clientesArgs<ExtArgs>
    FacturaServicio?: boolean | Servicio$FacturaServicioArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    estado?: boolean
    tipoServicioId?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    tipoServicio?: boolean | TipoServicioDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicio"]>

  export type ServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    precio?: boolean
    estado?: boolean
    tipoServicioId?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type ServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipoServicio?: boolean | TipoServicioDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    clientes?: boolean | Servicio$clientesArgs<ExtArgs>
    FacturaServicio?: boolean | Servicio$FacturaServicioArgs<ExtArgs>
    _count?: boolean | ServicioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tipoServicio?: boolean | TipoServicioDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $ServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servicio"
    objects: {
      tipoServicio: Prisma.$TipoServicioPayload<ExtArgs>
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      clientes: Prisma.$ClienteServicioPayload<ExtArgs>[]
      FacturaServicio: Prisma.$FacturaServicioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      descripcion: string | null
      precio: number
      estado: $Enums.EstadoServicio
      tipoServicioId: number
      empresaId: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["servicio"]>
    composites: {}
  }

  type ServicioGetPayload<S extends boolean | null | undefined | ServicioDefaultArgs> = $Result.GetResult<Prisma.$ServicioPayload, S>

  type ServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServicioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServicioCountAggregateInputType | true
    }

  export interface ServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servicio'], meta: { name: 'Servicio' } }
    /**
     * Find zero or one Servicio that matches the filter.
     * @param {ServicioFindUniqueArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicioFindUniqueArgs>(args: SelectSubset<T, ServicioFindUniqueArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Servicio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServicioFindUniqueOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Servicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicioFindFirstArgs>(args?: SelectSubset<T, ServicioFindFirstArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Servicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindFirstOrThrowArgs} args - Arguments to find a Servicio
     * @example
     * // Get one Servicio
     * const servicio = await prisma.servicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Servicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicios
     * const servicios = await prisma.servicio.findMany()
     * 
     * // Get first 10 Servicios
     * const servicios = await prisma.servicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicioWithIdOnly = await prisma.servicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicioFindManyArgs>(args?: SelectSubset<T, ServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Servicio.
     * @param {ServicioCreateArgs} args - Arguments to create a Servicio.
     * @example
     * // Create one Servicio
     * const Servicio = await prisma.servicio.create({
     *   data: {
     *     // ... data to create a Servicio
     *   }
     * })
     * 
     */
    create<T extends ServicioCreateArgs>(args: SelectSubset<T, ServicioCreateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Servicios.
     * @param {ServicioCreateManyArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicioCreateManyArgs>(args?: SelectSubset<T, ServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Servicios and returns the data saved in the database.
     * @param {ServicioCreateManyAndReturnArgs} args - Arguments to create many Servicios.
     * @example
     * // Create many Servicios
     * const servicio = await prisma.servicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Servicios and only return the `id`
     * const servicioWithIdOnly = await prisma.servicio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Servicio.
     * @param {ServicioDeleteArgs} args - Arguments to delete one Servicio.
     * @example
     * // Delete one Servicio
     * const Servicio = await prisma.servicio.delete({
     *   where: {
     *     // ... filter to delete one Servicio
     *   }
     * })
     * 
     */
    delete<T extends ServicioDeleteArgs>(args: SelectSubset<T, ServicioDeleteArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Servicio.
     * @param {ServicioUpdateArgs} args - Arguments to update one Servicio.
     * @example
     * // Update one Servicio
     * const servicio = await prisma.servicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicioUpdateArgs>(args: SelectSubset<T, ServicioUpdateArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Servicios.
     * @param {ServicioDeleteManyArgs} args - Arguments to filter Servicios to delete.
     * @example
     * // Delete a few Servicios
     * const { count } = await prisma.servicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicioDeleteManyArgs>(args?: SelectSubset<T, ServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicios
     * const servicio = await prisma.servicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicioUpdateManyArgs>(args: SelectSubset<T, ServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Servicio.
     * @param {ServicioUpsertArgs} args - Arguments to update or create a Servicio.
     * @example
     * // Update or create a Servicio
     * const servicio = await prisma.servicio.upsert({
     *   create: {
     *     // ... data to create a Servicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servicio we want to update
     *   }
     * })
     */
    upsert<T extends ServicioUpsertArgs>(args: SelectSubset<T, ServicioUpsertArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Servicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioCountArgs} args - Arguments to filter Servicios to count.
     * @example
     * // Count the number of Servicios
     * const count = await prisma.servicio.count({
     *   where: {
     *     // ... the filter for the Servicios we want to count
     *   }
     * })
    **/
    count<T extends ServicioCountArgs>(
      args?: Subset<T, ServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicioAggregateArgs>(args: Subset<T, ServicioAggregateArgs>): Prisma.PrismaPromise<GetServicioAggregateType<T>>

    /**
     * Group by Servicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicioGroupByArgs['orderBy'] }
        : { orderBy?: ServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servicio model
   */
  readonly fields: ServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tipoServicio<T extends TipoServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TipoServicioDefaultArgs<ExtArgs>>): Prisma__TipoServicioClient<$Result.GetResult<Prisma.$TipoServicioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    clientes<T extends Servicio$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Servicio$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findMany"> | Null>
    FacturaServicio<T extends Servicio$FacturaServicioArgs<ExtArgs> = {}>(args?: Subset<T, Servicio$FacturaServicioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Servicio model
   */ 
  interface ServicioFieldRefs {
    readonly id: FieldRef<"Servicio", 'Int'>
    readonly nombre: FieldRef<"Servicio", 'String'>
    readonly descripcion: FieldRef<"Servicio", 'String'>
    readonly precio: FieldRef<"Servicio", 'Float'>
    readonly estado: FieldRef<"Servicio", 'EstadoServicio'>
    readonly tipoServicioId: FieldRef<"Servicio", 'Int'>
    readonly empresaId: FieldRef<"Servicio", 'Int'>
    readonly creadoEn: FieldRef<"Servicio", 'DateTime'>
    readonly actualizadoEn: FieldRef<"Servicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Servicio findUnique
   */
  export type ServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findUniqueOrThrow
   */
  export type ServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio findFirst
   */
  export type ServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findFirstOrThrow
   */
  export type ServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicio to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicios.
     */
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio findMany
   */
  export type ServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter, which Servicios to fetch.
     */
    where?: ServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicios to fetch.
     */
    orderBy?: ServicioOrderByWithRelationInput | ServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicios.
     */
    cursor?: ServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicios.
     */
    skip?: number
    distinct?: ServicioScalarFieldEnum | ServicioScalarFieldEnum[]
  }

  /**
   * Servicio create
   */
  export type ServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a Servicio.
     */
    data: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
  }

  /**
   * Servicio createMany
   */
  export type ServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Servicio createManyAndReturn
   */
  export type ServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Servicios.
     */
    data: ServicioCreateManyInput | ServicioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Servicio update
   */
  export type ServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a Servicio.
     */
    data: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
    /**
     * Choose, which Servicio to update.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio updateMany
   */
  export type ServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicios.
     */
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyInput>
    /**
     * Filter which Servicios to update
     */
    where?: ServicioWhereInput
  }

  /**
   * Servicio upsert
   */
  export type ServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the Servicio to update in case it exists.
     */
    where: ServicioWhereUniqueInput
    /**
     * In case the Servicio found by the `where` argument doesn't exist, create a new Servicio with this data.
     */
    create: XOR<ServicioCreateInput, ServicioUncheckedCreateInput>
    /**
     * In case the Servicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicioUpdateInput, ServicioUncheckedUpdateInput>
  }

  /**
   * Servicio delete
   */
  export type ServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
    /**
     * Filter which Servicio to delete.
     */
    where: ServicioWhereUniqueInput
  }

  /**
   * Servicio deleteMany
   */
  export type ServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicios to delete
     */
    where?: ServicioWhereInput
  }

  /**
   * Servicio.clientes
   */
  export type Servicio$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    where?: ClienteServicioWhereInput
    orderBy?: ClienteServicioOrderByWithRelationInput | ClienteServicioOrderByWithRelationInput[]
    cursor?: ClienteServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteServicioScalarFieldEnum | ClienteServicioScalarFieldEnum[]
  }

  /**
   * Servicio.FacturaServicio
   */
  export type Servicio$FacturaServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    where?: FacturaServicioWhereInput
    orderBy?: FacturaServicioOrderByWithRelationInput | FacturaServicioOrderByWithRelationInput[]
    cursor?: FacturaServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaServicioScalarFieldEnum | FacturaServicioScalarFieldEnum[]
  }

  /**
   * Servicio without action
   */
  export type ServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servicio
     */
    select?: ServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInclude<ExtArgs> | null
  }


  /**
   * Model Proveedor
   */

  export type AggregateProveedor = {
    _count: ProveedorCountAggregateOutputType | null
    _avg: ProveedorAvgAggregateOutputType | null
    _sum: ProveedorSumAggregateOutputType | null
    _min: ProveedorMinAggregateOutputType | null
    _max: ProveedorMaxAggregateOutputType | null
  }

  export type ProveedorAvgAggregateOutputType = {
    id: number | null
    empresaId: number | null
  }

  export type ProveedorSumAggregateOutputType = {
    id: number | null
    empresaId: number | null
  }

  export type ProveedorMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    telefono: string | null
    direccion: string | null
    empresaId: number | null
  }

  export type ProveedorMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    telefono: string | null
    direccion: string | null
    empresaId: number | null
  }

  export type ProveedorCountAggregateOutputType = {
    id: number
    nombre: number
    correo: number
    telefono: number
    direccion: number
    empresaId: number
    _all: number
  }


  export type ProveedorAvgAggregateInputType = {
    id?: true
    empresaId?: true
  }

  export type ProveedorSumAggregateInputType = {
    id?: true
    empresaId?: true
  }

  export type ProveedorMinAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    telefono?: true
    direccion?: true
    empresaId?: true
  }

  export type ProveedorMaxAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    telefono?: true
    direccion?: true
    empresaId?: true
  }

  export type ProveedorCountAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    telefono?: true
    direccion?: true
    empresaId?: true
    _all?: true
  }

  export type ProveedorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proveedor to aggregate.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proveedors
    **/
    _count?: true | ProveedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProveedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProveedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProveedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProveedorMaxAggregateInputType
  }

  export type GetProveedorAggregateType<T extends ProveedorAggregateArgs> = {
        [P in keyof T & keyof AggregateProveedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProveedor[P]>
      : GetScalarType<T[P], AggregateProveedor[P]>
  }




  export type ProveedorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProveedorWhereInput
    orderBy?: ProveedorOrderByWithAggregationInput | ProveedorOrderByWithAggregationInput[]
    by: ProveedorScalarFieldEnum[] | ProveedorScalarFieldEnum
    having?: ProveedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProveedorCountAggregateInputType | true
    _avg?: ProveedorAvgAggregateInputType
    _sum?: ProveedorSumAggregateInputType
    _min?: ProveedorMinAggregateInputType
    _max?: ProveedorMaxAggregateInputType
  }

  export type ProveedorGroupByOutputType = {
    id: number
    nombre: string
    correo: string | null
    telefono: string | null
    direccion: string | null
    empresaId: number
    _count: ProveedorCountAggregateOutputType | null
    _avg: ProveedorAvgAggregateOutputType | null
    _sum: ProveedorSumAggregateOutputType | null
    _min: ProveedorMinAggregateOutputType | null
    _max: ProveedorMaxAggregateOutputType | null
  }

  type GetProveedorGroupByPayload<T extends ProveedorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProveedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProveedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProveedorGroupByOutputType[P]>
            : GetScalarType<T[P], ProveedorGroupByOutputType[P]>
        }
      >
    >


  export type ProveedorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    empresaId?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proveedor"]>

  export type ProveedorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    empresaId?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proveedor"]>

  export type ProveedorSelectScalar = {
    id?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    direccion?: boolean
    empresaId?: boolean
  }

  export type ProveedorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }
  export type ProveedorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $ProveedorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proveedor"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      correo: string | null
      telefono: string | null
      direccion: string | null
      empresaId: number
    }, ExtArgs["result"]["proveedor"]>
    composites: {}
  }

  type ProveedorGetPayload<S extends boolean | null | undefined | ProveedorDefaultArgs> = $Result.GetResult<Prisma.$ProveedorPayload, S>

  type ProveedorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProveedorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProveedorCountAggregateInputType | true
    }

  export interface ProveedorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proveedor'], meta: { name: 'Proveedor' } }
    /**
     * Find zero or one Proveedor that matches the filter.
     * @param {ProveedorFindUniqueArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProveedorFindUniqueArgs>(args: SelectSubset<T, ProveedorFindUniqueArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Proveedor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProveedorFindUniqueOrThrowArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProveedorFindUniqueOrThrowArgs>(args: SelectSubset<T, ProveedorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Proveedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorFindFirstArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProveedorFindFirstArgs>(args?: SelectSubset<T, ProveedorFindFirstArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Proveedor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorFindFirstOrThrowArgs} args - Arguments to find a Proveedor
     * @example
     * // Get one Proveedor
     * const proveedor = await prisma.proveedor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProveedorFindFirstOrThrowArgs>(args?: SelectSubset<T, ProveedorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Proveedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proveedors
     * const proveedors = await prisma.proveedor.findMany()
     * 
     * // Get first 10 Proveedors
     * const proveedors = await prisma.proveedor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proveedorWithIdOnly = await prisma.proveedor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProveedorFindManyArgs>(args?: SelectSubset<T, ProveedorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Proveedor.
     * @param {ProveedorCreateArgs} args - Arguments to create a Proveedor.
     * @example
     * // Create one Proveedor
     * const Proveedor = await prisma.proveedor.create({
     *   data: {
     *     // ... data to create a Proveedor
     *   }
     * })
     * 
     */
    create<T extends ProveedorCreateArgs>(args: SelectSubset<T, ProveedorCreateArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Proveedors.
     * @param {ProveedorCreateManyArgs} args - Arguments to create many Proveedors.
     * @example
     * // Create many Proveedors
     * const proveedor = await prisma.proveedor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProveedorCreateManyArgs>(args?: SelectSubset<T, ProveedorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proveedors and returns the data saved in the database.
     * @param {ProveedorCreateManyAndReturnArgs} args - Arguments to create many Proveedors.
     * @example
     * // Create many Proveedors
     * const proveedor = await prisma.proveedor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proveedors and only return the `id`
     * const proveedorWithIdOnly = await prisma.proveedor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProveedorCreateManyAndReturnArgs>(args?: SelectSubset<T, ProveedorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Proveedor.
     * @param {ProveedorDeleteArgs} args - Arguments to delete one Proveedor.
     * @example
     * // Delete one Proveedor
     * const Proveedor = await prisma.proveedor.delete({
     *   where: {
     *     // ... filter to delete one Proveedor
     *   }
     * })
     * 
     */
    delete<T extends ProveedorDeleteArgs>(args: SelectSubset<T, ProveedorDeleteArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Proveedor.
     * @param {ProveedorUpdateArgs} args - Arguments to update one Proveedor.
     * @example
     * // Update one Proveedor
     * const proveedor = await prisma.proveedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProveedorUpdateArgs>(args: SelectSubset<T, ProveedorUpdateArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Proveedors.
     * @param {ProveedorDeleteManyArgs} args - Arguments to filter Proveedors to delete.
     * @example
     * // Delete a few Proveedors
     * const { count } = await prisma.proveedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProveedorDeleteManyArgs>(args?: SelectSubset<T, ProveedorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proveedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proveedors
     * const proveedor = await prisma.proveedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProveedorUpdateManyArgs>(args: SelectSubset<T, ProveedorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proveedor.
     * @param {ProveedorUpsertArgs} args - Arguments to update or create a Proveedor.
     * @example
     * // Update or create a Proveedor
     * const proveedor = await prisma.proveedor.upsert({
     *   create: {
     *     // ... data to create a Proveedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proveedor we want to update
     *   }
     * })
     */
    upsert<T extends ProveedorUpsertArgs>(args: SelectSubset<T, ProveedorUpsertArgs<ExtArgs>>): Prisma__ProveedorClient<$Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Proveedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorCountArgs} args - Arguments to filter Proveedors to count.
     * @example
     * // Count the number of Proveedors
     * const count = await prisma.proveedor.count({
     *   where: {
     *     // ... the filter for the Proveedors we want to count
     *   }
     * })
    **/
    count<T extends ProveedorCountArgs>(
      args?: Subset<T, ProveedorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProveedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proveedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProveedorAggregateArgs>(args: Subset<T, ProveedorAggregateArgs>): Prisma.PrismaPromise<GetProveedorAggregateType<T>>

    /**
     * Group by Proveedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProveedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProveedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProveedorGroupByArgs['orderBy'] }
        : { orderBy?: ProveedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProveedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProveedorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proveedor model
   */
  readonly fields: ProveedorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proveedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProveedorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proveedor model
   */ 
  interface ProveedorFieldRefs {
    readonly id: FieldRef<"Proveedor", 'Int'>
    readonly nombre: FieldRef<"Proveedor", 'String'>
    readonly correo: FieldRef<"Proveedor", 'String'>
    readonly telefono: FieldRef<"Proveedor", 'String'>
    readonly direccion: FieldRef<"Proveedor", 'String'>
    readonly empresaId: FieldRef<"Proveedor", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Proveedor findUnique
   */
  export type ProveedorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where: ProveedorWhereUniqueInput
  }

  /**
   * Proveedor findUniqueOrThrow
   */
  export type ProveedorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where: ProveedorWhereUniqueInput
  }

  /**
   * Proveedor findFirst
   */
  export type ProveedorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proveedors.
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proveedors.
     */
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }

  /**
   * Proveedor findFirstOrThrow
   */
  export type ProveedorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedor to fetch.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proveedors.
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proveedors.
     */
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }

  /**
   * Proveedor findMany
   */
  export type ProveedorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter, which Proveedors to fetch.
     */
    where?: ProveedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proveedors to fetch.
     */
    orderBy?: ProveedorOrderByWithRelationInput | ProveedorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proveedors.
     */
    cursor?: ProveedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proveedors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proveedors.
     */
    skip?: number
    distinct?: ProveedorScalarFieldEnum | ProveedorScalarFieldEnum[]
  }

  /**
   * Proveedor create
   */
  export type ProveedorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * The data needed to create a Proveedor.
     */
    data: XOR<ProveedorCreateInput, ProveedorUncheckedCreateInput>
  }

  /**
   * Proveedor createMany
   */
  export type ProveedorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proveedors.
     */
    data: ProveedorCreateManyInput | ProveedorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proveedor createManyAndReturn
   */
  export type ProveedorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Proveedors.
     */
    data: ProveedorCreateManyInput | ProveedorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Proveedor update
   */
  export type ProveedorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * The data needed to update a Proveedor.
     */
    data: XOR<ProveedorUpdateInput, ProveedorUncheckedUpdateInput>
    /**
     * Choose, which Proveedor to update.
     */
    where: ProveedorWhereUniqueInput
  }

  /**
   * Proveedor updateMany
   */
  export type ProveedorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proveedors.
     */
    data: XOR<ProveedorUpdateManyMutationInput, ProveedorUncheckedUpdateManyInput>
    /**
     * Filter which Proveedors to update
     */
    where?: ProveedorWhereInput
  }

  /**
   * Proveedor upsert
   */
  export type ProveedorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * The filter to search for the Proveedor to update in case it exists.
     */
    where: ProveedorWhereUniqueInput
    /**
     * In case the Proveedor found by the `where` argument doesn't exist, create a new Proveedor with this data.
     */
    create: XOR<ProveedorCreateInput, ProveedorUncheckedCreateInput>
    /**
     * In case the Proveedor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProveedorUpdateInput, ProveedorUncheckedUpdateInput>
  }

  /**
   * Proveedor delete
   */
  export type ProveedorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
    /**
     * Filter which Proveedor to delete.
     */
    where: ProveedorWhereUniqueInput
  }

  /**
   * Proveedor deleteMany
   */
  export type ProveedorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proveedors to delete
     */
    where?: ProveedorWhereInput
  }

  /**
   * Proveedor without action
   */
  export type ProveedorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proveedor
     */
    select?: ProveedorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProveedorInclude<ExtArgs> | null
  }


  /**
   * Model ServicioInternet
   */

  export type AggregateServicioInternet = {
    _count: ServicioInternetCountAggregateOutputType | null
    _avg: ServicioInternetAvgAggregateOutputType | null
    _sum: ServicioInternetSumAggregateOutputType | null
    _min: ServicioInternetMinAggregateOutputType | null
    _max: ServicioInternetMaxAggregateOutputType | null
  }

  export type ServicioInternetAvgAggregateOutputType = {
    id: number | null
    precio: number | null
    empresaId: number | null
  }

  export type ServicioInternetSumAggregateOutputType = {
    id: number | null
    precio: number | null
    empresaId: number | null
  }

  export type ServicioInternetMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    velocidad: string | null
    precio: number | null
    estado: $Enums.EstadoServicio | null
    creadoEn: Date | null
    actualizadoEn: Date | null
    empresaId: number | null
  }

  export type ServicioInternetMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    velocidad: string | null
    precio: number | null
    estado: $Enums.EstadoServicio | null
    creadoEn: Date | null
    actualizadoEn: Date | null
    empresaId: number | null
  }

  export type ServicioInternetCountAggregateOutputType = {
    id: number
    nombre: number
    velocidad: number
    precio: number
    estado: number
    creadoEn: number
    actualizadoEn: number
    empresaId: number
    _all: number
  }


  export type ServicioInternetAvgAggregateInputType = {
    id?: true
    precio?: true
    empresaId?: true
  }

  export type ServicioInternetSumAggregateInputType = {
    id?: true
    precio?: true
    empresaId?: true
  }

  export type ServicioInternetMinAggregateInputType = {
    id?: true
    nombre?: true
    velocidad?: true
    precio?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
    empresaId?: true
  }

  export type ServicioInternetMaxAggregateInputType = {
    id?: true
    nombre?: true
    velocidad?: true
    precio?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
    empresaId?: true
  }

  export type ServicioInternetCountAggregateInputType = {
    id?: true
    nombre?: true
    velocidad?: true
    precio?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
    empresaId?: true
    _all?: true
  }

  export type ServicioInternetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServicioInternet to aggregate.
     */
    where?: ServicioInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicioInternets to fetch.
     */
    orderBy?: ServicioInternetOrderByWithRelationInput | ServicioInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicioInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicioInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicioInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServicioInternets
    **/
    _count?: true | ServicioInternetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicioInternetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicioInternetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicioInternetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicioInternetMaxAggregateInputType
  }

  export type GetServicioInternetAggregateType<T extends ServicioInternetAggregateArgs> = {
        [P in keyof T & keyof AggregateServicioInternet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicioInternet[P]>
      : GetScalarType<T[P], AggregateServicioInternet[P]>
  }




  export type ServicioInternetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicioInternetWhereInput
    orderBy?: ServicioInternetOrderByWithAggregationInput | ServicioInternetOrderByWithAggregationInput[]
    by: ServicioInternetScalarFieldEnum[] | ServicioInternetScalarFieldEnum
    having?: ServicioInternetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicioInternetCountAggregateInputType | true
    _avg?: ServicioInternetAvgAggregateInputType
    _sum?: ServicioInternetSumAggregateInputType
    _min?: ServicioInternetMinAggregateInputType
    _max?: ServicioInternetMaxAggregateInputType
  }

  export type ServicioInternetGroupByOutputType = {
    id: number
    nombre: string
    velocidad: string | null
    precio: number
    estado: $Enums.EstadoServicio
    creadoEn: Date
    actualizadoEn: Date
    empresaId: number
    _count: ServicioInternetCountAggregateOutputType | null
    _avg: ServicioInternetAvgAggregateOutputType | null
    _sum: ServicioInternetSumAggregateOutputType | null
    _min: ServicioInternetMinAggregateOutputType | null
    _max: ServicioInternetMaxAggregateOutputType | null
  }

  type GetServicioInternetGroupByPayload<T extends ServicioInternetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicioInternetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicioInternetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicioInternetGroupByOutputType[P]>
            : GetScalarType<T[P], ServicioInternetGroupByOutputType[P]>
        }
      >
    >


  export type ServicioInternetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    velocidad?: boolean
    precio?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresaId?: boolean
    clientes?: boolean | ServicioInternet$clientesArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    _count?: boolean | ServicioInternetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicioInternet"]>

  export type ServicioInternetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    velocidad?: boolean
    precio?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresaId?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servicioInternet"]>

  export type ServicioInternetSelectScalar = {
    id?: boolean
    nombre?: boolean
    velocidad?: boolean
    precio?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresaId?: boolean
  }

  export type ServicioInternetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | ServicioInternet$clientesArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    _count?: boolean | ServicioInternetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServicioInternetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $ServicioInternetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServicioInternet"
    objects: {
      clientes: Prisma.$ClienteInternetPayload<ExtArgs>[]
      empresa: Prisma.$EmpresaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      velocidad: string | null
      precio: number
      estado: $Enums.EstadoServicio
      creadoEn: Date
      actualizadoEn: Date
      empresaId: number
    }, ExtArgs["result"]["servicioInternet"]>
    composites: {}
  }

  type ServicioInternetGetPayload<S extends boolean | null | undefined | ServicioInternetDefaultArgs> = $Result.GetResult<Prisma.$ServicioInternetPayload, S>

  type ServicioInternetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServicioInternetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServicioInternetCountAggregateInputType | true
    }

  export interface ServicioInternetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServicioInternet'], meta: { name: 'ServicioInternet' } }
    /**
     * Find zero or one ServicioInternet that matches the filter.
     * @param {ServicioInternetFindUniqueArgs} args - Arguments to find a ServicioInternet
     * @example
     * // Get one ServicioInternet
     * const servicioInternet = await prisma.servicioInternet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicioInternetFindUniqueArgs>(args: SelectSubset<T, ServicioInternetFindUniqueArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ServicioInternet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServicioInternetFindUniqueOrThrowArgs} args - Arguments to find a ServicioInternet
     * @example
     * // Get one ServicioInternet
     * const servicioInternet = await prisma.servicioInternet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicioInternetFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicioInternetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ServicioInternet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetFindFirstArgs} args - Arguments to find a ServicioInternet
     * @example
     * // Get one ServicioInternet
     * const servicioInternet = await prisma.servicioInternet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicioInternetFindFirstArgs>(args?: SelectSubset<T, ServicioInternetFindFirstArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ServicioInternet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetFindFirstOrThrowArgs} args - Arguments to find a ServicioInternet
     * @example
     * // Get one ServicioInternet
     * const servicioInternet = await prisma.servicioInternet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicioInternetFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicioInternetFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ServicioInternets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServicioInternets
     * const servicioInternets = await prisma.servicioInternet.findMany()
     * 
     * // Get first 10 ServicioInternets
     * const servicioInternets = await prisma.servicioInternet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicioInternetWithIdOnly = await prisma.servicioInternet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicioInternetFindManyArgs>(args?: SelectSubset<T, ServicioInternetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ServicioInternet.
     * @param {ServicioInternetCreateArgs} args - Arguments to create a ServicioInternet.
     * @example
     * // Create one ServicioInternet
     * const ServicioInternet = await prisma.servicioInternet.create({
     *   data: {
     *     // ... data to create a ServicioInternet
     *   }
     * })
     * 
     */
    create<T extends ServicioInternetCreateArgs>(args: SelectSubset<T, ServicioInternetCreateArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ServicioInternets.
     * @param {ServicioInternetCreateManyArgs} args - Arguments to create many ServicioInternets.
     * @example
     * // Create many ServicioInternets
     * const servicioInternet = await prisma.servicioInternet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicioInternetCreateManyArgs>(args?: SelectSubset<T, ServicioInternetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServicioInternets and returns the data saved in the database.
     * @param {ServicioInternetCreateManyAndReturnArgs} args - Arguments to create many ServicioInternets.
     * @example
     * // Create many ServicioInternets
     * const servicioInternet = await prisma.servicioInternet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServicioInternets and only return the `id`
     * const servicioInternetWithIdOnly = await prisma.servicioInternet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicioInternetCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicioInternetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ServicioInternet.
     * @param {ServicioInternetDeleteArgs} args - Arguments to delete one ServicioInternet.
     * @example
     * // Delete one ServicioInternet
     * const ServicioInternet = await prisma.servicioInternet.delete({
     *   where: {
     *     // ... filter to delete one ServicioInternet
     *   }
     * })
     * 
     */
    delete<T extends ServicioInternetDeleteArgs>(args: SelectSubset<T, ServicioInternetDeleteArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ServicioInternet.
     * @param {ServicioInternetUpdateArgs} args - Arguments to update one ServicioInternet.
     * @example
     * // Update one ServicioInternet
     * const servicioInternet = await prisma.servicioInternet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicioInternetUpdateArgs>(args: SelectSubset<T, ServicioInternetUpdateArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ServicioInternets.
     * @param {ServicioInternetDeleteManyArgs} args - Arguments to filter ServicioInternets to delete.
     * @example
     * // Delete a few ServicioInternets
     * const { count } = await prisma.servicioInternet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicioInternetDeleteManyArgs>(args?: SelectSubset<T, ServicioInternetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServicioInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServicioInternets
     * const servicioInternet = await prisma.servicioInternet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicioInternetUpdateManyArgs>(args: SelectSubset<T, ServicioInternetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServicioInternet.
     * @param {ServicioInternetUpsertArgs} args - Arguments to update or create a ServicioInternet.
     * @example
     * // Update or create a ServicioInternet
     * const servicioInternet = await prisma.servicioInternet.upsert({
     *   create: {
     *     // ... data to create a ServicioInternet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServicioInternet we want to update
     *   }
     * })
     */
    upsert<T extends ServicioInternetUpsertArgs>(args: SelectSubset<T, ServicioInternetUpsertArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ServicioInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetCountArgs} args - Arguments to filter ServicioInternets to count.
     * @example
     * // Count the number of ServicioInternets
     * const count = await prisma.servicioInternet.count({
     *   where: {
     *     // ... the filter for the ServicioInternets we want to count
     *   }
     * })
    **/
    count<T extends ServicioInternetCountArgs>(
      args?: Subset<T, ServicioInternetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicioInternetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServicioInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicioInternetAggregateArgs>(args: Subset<T, ServicioInternetAggregateArgs>): Prisma.PrismaPromise<GetServicioInternetAggregateType<T>>

    /**
     * Group by ServicioInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicioInternetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicioInternetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicioInternetGroupByArgs['orderBy'] }
        : { orderBy?: ServicioInternetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicioInternetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicioInternetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServicioInternet model
   */
  readonly fields: ServicioInternetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServicioInternet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicioInternetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientes<T extends ServicioInternet$clientesArgs<ExtArgs> = {}>(args?: Subset<T, ServicioInternet$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany"> | Null>
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServicioInternet model
   */ 
  interface ServicioInternetFieldRefs {
    readonly id: FieldRef<"ServicioInternet", 'Int'>
    readonly nombre: FieldRef<"ServicioInternet", 'String'>
    readonly velocidad: FieldRef<"ServicioInternet", 'String'>
    readonly precio: FieldRef<"ServicioInternet", 'Float'>
    readonly estado: FieldRef<"ServicioInternet", 'EstadoServicio'>
    readonly creadoEn: FieldRef<"ServicioInternet", 'DateTime'>
    readonly actualizadoEn: FieldRef<"ServicioInternet", 'DateTime'>
    readonly empresaId: FieldRef<"ServicioInternet", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ServicioInternet findUnique
   */
  export type ServicioInternetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * Filter, which ServicioInternet to fetch.
     */
    where: ServicioInternetWhereUniqueInput
  }

  /**
   * ServicioInternet findUniqueOrThrow
   */
  export type ServicioInternetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * Filter, which ServicioInternet to fetch.
     */
    where: ServicioInternetWhereUniqueInput
  }

  /**
   * ServicioInternet findFirst
   */
  export type ServicioInternetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * Filter, which ServicioInternet to fetch.
     */
    where?: ServicioInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicioInternets to fetch.
     */
    orderBy?: ServicioInternetOrderByWithRelationInput | ServicioInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServicioInternets.
     */
    cursor?: ServicioInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicioInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicioInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServicioInternets.
     */
    distinct?: ServicioInternetScalarFieldEnum | ServicioInternetScalarFieldEnum[]
  }

  /**
   * ServicioInternet findFirstOrThrow
   */
  export type ServicioInternetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * Filter, which ServicioInternet to fetch.
     */
    where?: ServicioInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicioInternets to fetch.
     */
    orderBy?: ServicioInternetOrderByWithRelationInput | ServicioInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServicioInternets.
     */
    cursor?: ServicioInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicioInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicioInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServicioInternets.
     */
    distinct?: ServicioInternetScalarFieldEnum | ServicioInternetScalarFieldEnum[]
  }

  /**
   * ServicioInternet findMany
   */
  export type ServicioInternetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * Filter, which ServicioInternets to fetch.
     */
    where?: ServicioInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicioInternets to fetch.
     */
    orderBy?: ServicioInternetOrderByWithRelationInput | ServicioInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServicioInternets.
     */
    cursor?: ServicioInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicioInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicioInternets.
     */
    skip?: number
    distinct?: ServicioInternetScalarFieldEnum | ServicioInternetScalarFieldEnum[]
  }

  /**
   * ServicioInternet create
   */
  export type ServicioInternetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * The data needed to create a ServicioInternet.
     */
    data: XOR<ServicioInternetCreateInput, ServicioInternetUncheckedCreateInput>
  }

  /**
   * ServicioInternet createMany
   */
  export type ServicioInternetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServicioInternets.
     */
    data: ServicioInternetCreateManyInput | ServicioInternetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServicioInternet createManyAndReturn
   */
  export type ServicioInternetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ServicioInternets.
     */
    data: ServicioInternetCreateManyInput | ServicioInternetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServicioInternet update
   */
  export type ServicioInternetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * The data needed to update a ServicioInternet.
     */
    data: XOR<ServicioInternetUpdateInput, ServicioInternetUncheckedUpdateInput>
    /**
     * Choose, which ServicioInternet to update.
     */
    where: ServicioInternetWhereUniqueInput
  }

  /**
   * ServicioInternet updateMany
   */
  export type ServicioInternetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServicioInternets.
     */
    data: XOR<ServicioInternetUpdateManyMutationInput, ServicioInternetUncheckedUpdateManyInput>
    /**
     * Filter which ServicioInternets to update
     */
    where?: ServicioInternetWhereInput
  }

  /**
   * ServicioInternet upsert
   */
  export type ServicioInternetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * The filter to search for the ServicioInternet to update in case it exists.
     */
    where: ServicioInternetWhereUniqueInput
    /**
     * In case the ServicioInternet found by the `where` argument doesn't exist, create a new ServicioInternet with this data.
     */
    create: XOR<ServicioInternetCreateInput, ServicioInternetUncheckedCreateInput>
    /**
     * In case the ServicioInternet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicioInternetUpdateInput, ServicioInternetUncheckedUpdateInput>
  }

  /**
   * ServicioInternet delete
   */
  export type ServicioInternetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
    /**
     * Filter which ServicioInternet to delete.
     */
    where: ServicioInternetWhereUniqueInput
  }

  /**
   * ServicioInternet deleteMany
   */
  export type ServicioInternetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServicioInternets to delete
     */
    where?: ServicioInternetWhereInput
  }

  /**
   * ServicioInternet.clientes
   */
  export type ServicioInternet$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    cursor?: ClienteInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * ServicioInternet without action
   */
  export type ServicioInternetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicioInternet
     */
    select?: ServicioInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicioInternetInclude<ExtArgs> | null
  }


  /**
   * Model SaldoEmpresa
   */

  export type AggregateSaldoEmpresa = {
    _count: SaldoEmpresaCountAggregateOutputType | null
    _avg: SaldoEmpresaAvgAggregateOutputType | null
    _sum: SaldoEmpresaSumAggregateOutputType | null
    _min: SaldoEmpresaMinAggregateOutputType | null
    _max: SaldoEmpresaMaxAggregateOutputType | null
  }

  export type SaldoEmpresaAvgAggregateOutputType = {
    id: number | null
    saldo: number | null
    egresos: number | null
    totalIngresos: number | null
    empresaId: number | null
  }

  export type SaldoEmpresaSumAggregateOutputType = {
    id: number | null
    saldo: number | null
    egresos: number | null
    totalIngresos: number | null
    empresaId: number | null
  }

  export type SaldoEmpresaMinAggregateOutputType = {
    id: number | null
    saldo: number | null
    egresos: number | null
    totalIngresos: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type SaldoEmpresaMaxAggregateOutputType = {
    id: number | null
    saldo: number | null
    egresos: number | null
    totalIngresos: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type SaldoEmpresaCountAggregateOutputType = {
    id: number
    saldo: number
    egresos: number
    totalIngresos: number
    empresaId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type SaldoEmpresaAvgAggregateInputType = {
    id?: true
    saldo?: true
    egresos?: true
    totalIngresos?: true
    empresaId?: true
  }

  export type SaldoEmpresaSumAggregateInputType = {
    id?: true
    saldo?: true
    egresos?: true
    totalIngresos?: true
    empresaId?: true
  }

  export type SaldoEmpresaMinAggregateInputType = {
    id?: true
    saldo?: true
    egresos?: true
    totalIngresos?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type SaldoEmpresaMaxAggregateInputType = {
    id?: true
    saldo?: true
    egresos?: true
    totalIngresos?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type SaldoEmpresaCountAggregateInputType = {
    id?: true
    saldo?: true
    egresos?: true
    totalIngresos?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type SaldoEmpresaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaldoEmpresa to aggregate.
     */
    where?: SaldoEmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoEmpresas to fetch.
     */
    orderBy?: SaldoEmpresaOrderByWithRelationInput | SaldoEmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaldoEmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoEmpresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoEmpresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaldoEmpresas
    **/
    _count?: true | SaldoEmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaldoEmpresaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaldoEmpresaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaldoEmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaldoEmpresaMaxAggregateInputType
  }

  export type GetSaldoEmpresaAggregateType<T extends SaldoEmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateSaldoEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaldoEmpresa[P]>
      : GetScalarType<T[P], AggregateSaldoEmpresa[P]>
  }




  export type SaldoEmpresaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaldoEmpresaWhereInput
    orderBy?: SaldoEmpresaOrderByWithAggregationInput | SaldoEmpresaOrderByWithAggregationInput[]
    by: SaldoEmpresaScalarFieldEnum[] | SaldoEmpresaScalarFieldEnum
    having?: SaldoEmpresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaldoEmpresaCountAggregateInputType | true
    _avg?: SaldoEmpresaAvgAggregateInputType
    _sum?: SaldoEmpresaSumAggregateInputType
    _min?: SaldoEmpresaMinAggregateInputType
    _max?: SaldoEmpresaMaxAggregateInputType
  }

  export type SaldoEmpresaGroupByOutputType = {
    id: number
    saldo: number
    egresos: number
    totalIngresos: number
    empresaId: number
    creadoEn: Date
    actualizadoEn: Date
    _count: SaldoEmpresaCountAggregateOutputType | null
    _avg: SaldoEmpresaAvgAggregateOutputType | null
    _sum: SaldoEmpresaSumAggregateOutputType | null
    _min: SaldoEmpresaMinAggregateOutputType | null
    _max: SaldoEmpresaMaxAggregateOutputType | null
  }

  type GetSaldoEmpresaGroupByPayload<T extends SaldoEmpresaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaldoEmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaldoEmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaldoEmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], SaldoEmpresaGroupByOutputType[P]>
        }
      >
    >


  export type SaldoEmpresaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldo?: boolean
    egresos?: boolean
    totalIngresos?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saldoEmpresa"]>

  export type SaldoEmpresaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldo?: boolean
    egresos?: boolean
    totalIngresos?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saldoEmpresa"]>

  export type SaldoEmpresaSelectScalar = {
    id?: boolean
    saldo?: boolean
    egresos?: boolean
    totalIngresos?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type SaldoEmpresaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }
  export type SaldoEmpresaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $SaldoEmpresaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaldoEmpresa"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saldo: number
      egresos: number
      totalIngresos: number
      empresaId: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["saldoEmpresa"]>
    composites: {}
  }

  type SaldoEmpresaGetPayload<S extends boolean | null | undefined | SaldoEmpresaDefaultArgs> = $Result.GetResult<Prisma.$SaldoEmpresaPayload, S>

  type SaldoEmpresaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaldoEmpresaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaldoEmpresaCountAggregateInputType | true
    }

  export interface SaldoEmpresaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaldoEmpresa'], meta: { name: 'SaldoEmpresa' } }
    /**
     * Find zero or one SaldoEmpresa that matches the filter.
     * @param {SaldoEmpresaFindUniqueArgs} args - Arguments to find a SaldoEmpresa
     * @example
     * // Get one SaldoEmpresa
     * const saldoEmpresa = await prisma.saldoEmpresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaldoEmpresaFindUniqueArgs>(args: SelectSubset<T, SaldoEmpresaFindUniqueArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SaldoEmpresa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SaldoEmpresaFindUniqueOrThrowArgs} args - Arguments to find a SaldoEmpresa
     * @example
     * // Get one SaldoEmpresa
     * const saldoEmpresa = await prisma.saldoEmpresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaldoEmpresaFindUniqueOrThrowArgs>(args: SelectSubset<T, SaldoEmpresaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SaldoEmpresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaFindFirstArgs} args - Arguments to find a SaldoEmpresa
     * @example
     * // Get one SaldoEmpresa
     * const saldoEmpresa = await prisma.saldoEmpresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaldoEmpresaFindFirstArgs>(args?: SelectSubset<T, SaldoEmpresaFindFirstArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SaldoEmpresa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaFindFirstOrThrowArgs} args - Arguments to find a SaldoEmpresa
     * @example
     * // Get one SaldoEmpresa
     * const saldoEmpresa = await prisma.saldoEmpresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaldoEmpresaFindFirstOrThrowArgs>(args?: SelectSubset<T, SaldoEmpresaFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SaldoEmpresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaldoEmpresas
     * const saldoEmpresas = await prisma.saldoEmpresa.findMany()
     * 
     * // Get first 10 SaldoEmpresas
     * const saldoEmpresas = await prisma.saldoEmpresa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saldoEmpresaWithIdOnly = await prisma.saldoEmpresa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaldoEmpresaFindManyArgs>(args?: SelectSubset<T, SaldoEmpresaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SaldoEmpresa.
     * @param {SaldoEmpresaCreateArgs} args - Arguments to create a SaldoEmpresa.
     * @example
     * // Create one SaldoEmpresa
     * const SaldoEmpresa = await prisma.saldoEmpresa.create({
     *   data: {
     *     // ... data to create a SaldoEmpresa
     *   }
     * })
     * 
     */
    create<T extends SaldoEmpresaCreateArgs>(args: SelectSubset<T, SaldoEmpresaCreateArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SaldoEmpresas.
     * @param {SaldoEmpresaCreateManyArgs} args - Arguments to create many SaldoEmpresas.
     * @example
     * // Create many SaldoEmpresas
     * const saldoEmpresa = await prisma.saldoEmpresa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaldoEmpresaCreateManyArgs>(args?: SelectSubset<T, SaldoEmpresaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaldoEmpresas and returns the data saved in the database.
     * @param {SaldoEmpresaCreateManyAndReturnArgs} args - Arguments to create many SaldoEmpresas.
     * @example
     * // Create many SaldoEmpresas
     * const saldoEmpresa = await prisma.saldoEmpresa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaldoEmpresas and only return the `id`
     * const saldoEmpresaWithIdOnly = await prisma.saldoEmpresa.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaldoEmpresaCreateManyAndReturnArgs>(args?: SelectSubset<T, SaldoEmpresaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SaldoEmpresa.
     * @param {SaldoEmpresaDeleteArgs} args - Arguments to delete one SaldoEmpresa.
     * @example
     * // Delete one SaldoEmpresa
     * const SaldoEmpresa = await prisma.saldoEmpresa.delete({
     *   where: {
     *     // ... filter to delete one SaldoEmpresa
     *   }
     * })
     * 
     */
    delete<T extends SaldoEmpresaDeleteArgs>(args: SelectSubset<T, SaldoEmpresaDeleteArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SaldoEmpresa.
     * @param {SaldoEmpresaUpdateArgs} args - Arguments to update one SaldoEmpresa.
     * @example
     * // Update one SaldoEmpresa
     * const saldoEmpresa = await prisma.saldoEmpresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaldoEmpresaUpdateArgs>(args: SelectSubset<T, SaldoEmpresaUpdateArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SaldoEmpresas.
     * @param {SaldoEmpresaDeleteManyArgs} args - Arguments to filter SaldoEmpresas to delete.
     * @example
     * // Delete a few SaldoEmpresas
     * const { count } = await prisma.saldoEmpresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaldoEmpresaDeleteManyArgs>(args?: SelectSubset<T, SaldoEmpresaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaldoEmpresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaldoEmpresas
     * const saldoEmpresa = await prisma.saldoEmpresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaldoEmpresaUpdateManyArgs>(args: SelectSubset<T, SaldoEmpresaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaldoEmpresa.
     * @param {SaldoEmpresaUpsertArgs} args - Arguments to update or create a SaldoEmpresa.
     * @example
     * // Update or create a SaldoEmpresa
     * const saldoEmpresa = await prisma.saldoEmpresa.upsert({
     *   create: {
     *     // ... data to create a SaldoEmpresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaldoEmpresa we want to update
     *   }
     * })
     */
    upsert<T extends SaldoEmpresaUpsertArgs>(args: SelectSubset<T, SaldoEmpresaUpsertArgs<ExtArgs>>): Prisma__SaldoEmpresaClient<$Result.GetResult<Prisma.$SaldoEmpresaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SaldoEmpresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaCountArgs} args - Arguments to filter SaldoEmpresas to count.
     * @example
     * // Count the number of SaldoEmpresas
     * const count = await prisma.saldoEmpresa.count({
     *   where: {
     *     // ... the filter for the SaldoEmpresas we want to count
     *   }
     * })
    **/
    count<T extends SaldoEmpresaCountArgs>(
      args?: Subset<T, SaldoEmpresaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaldoEmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaldoEmpresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaldoEmpresaAggregateArgs>(args: Subset<T, SaldoEmpresaAggregateArgs>): Prisma.PrismaPromise<GetSaldoEmpresaAggregateType<T>>

    /**
     * Group by SaldoEmpresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoEmpresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaldoEmpresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaldoEmpresaGroupByArgs['orderBy'] }
        : { orderBy?: SaldoEmpresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaldoEmpresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaldoEmpresaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaldoEmpresa model
   */
  readonly fields: SaldoEmpresaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaldoEmpresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaldoEmpresaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaldoEmpresa model
   */ 
  interface SaldoEmpresaFieldRefs {
    readonly id: FieldRef<"SaldoEmpresa", 'Int'>
    readonly saldo: FieldRef<"SaldoEmpresa", 'Float'>
    readonly egresos: FieldRef<"SaldoEmpresa", 'Float'>
    readonly totalIngresos: FieldRef<"SaldoEmpresa", 'Float'>
    readonly empresaId: FieldRef<"SaldoEmpresa", 'Int'>
    readonly creadoEn: FieldRef<"SaldoEmpresa", 'DateTime'>
    readonly actualizadoEn: FieldRef<"SaldoEmpresa", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SaldoEmpresa findUnique
   */
  export type SaldoEmpresaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoEmpresa to fetch.
     */
    where: SaldoEmpresaWhereUniqueInput
  }

  /**
   * SaldoEmpresa findUniqueOrThrow
   */
  export type SaldoEmpresaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoEmpresa to fetch.
     */
    where: SaldoEmpresaWhereUniqueInput
  }

  /**
   * SaldoEmpresa findFirst
   */
  export type SaldoEmpresaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoEmpresa to fetch.
     */
    where?: SaldoEmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoEmpresas to fetch.
     */
    orderBy?: SaldoEmpresaOrderByWithRelationInput | SaldoEmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaldoEmpresas.
     */
    cursor?: SaldoEmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoEmpresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoEmpresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaldoEmpresas.
     */
    distinct?: SaldoEmpresaScalarFieldEnum | SaldoEmpresaScalarFieldEnum[]
  }

  /**
   * SaldoEmpresa findFirstOrThrow
   */
  export type SaldoEmpresaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoEmpresa to fetch.
     */
    where?: SaldoEmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoEmpresas to fetch.
     */
    orderBy?: SaldoEmpresaOrderByWithRelationInput | SaldoEmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaldoEmpresas.
     */
    cursor?: SaldoEmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoEmpresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoEmpresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaldoEmpresas.
     */
    distinct?: SaldoEmpresaScalarFieldEnum | SaldoEmpresaScalarFieldEnum[]
  }

  /**
   * SaldoEmpresa findMany
   */
  export type SaldoEmpresaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoEmpresas to fetch.
     */
    where?: SaldoEmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoEmpresas to fetch.
     */
    orderBy?: SaldoEmpresaOrderByWithRelationInput | SaldoEmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaldoEmpresas.
     */
    cursor?: SaldoEmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoEmpresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoEmpresas.
     */
    skip?: number
    distinct?: SaldoEmpresaScalarFieldEnum | SaldoEmpresaScalarFieldEnum[]
  }

  /**
   * SaldoEmpresa create
   */
  export type SaldoEmpresaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * The data needed to create a SaldoEmpresa.
     */
    data: XOR<SaldoEmpresaCreateInput, SaldoEmpresaUncheckedCreateInput>
  }

  /**
   * SaldoEmpresa createMany
   */
  export type SaldoEmpresaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaldoEmpresas.
     */
    data: SaldoEmpresaCreateManyInput | SaldoEmpresaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SaldoEmpresa createManyAndReturn
   */
  export type SaldoEmpresaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SaldoEmpresas.
     */
    data: SaldoEmpresaCreateManyInput | SaldoEmpresaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaldoEmpresa update
   */
  export type SaldoEmpresaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * The data needed to update a SaldoEmpresa.
     */
    data: XOR<SaldoEmpresaUpdateInput, SaldoEmpresaUncheckedUpdateInput>
    /**
     * Choose, which SaldoEmpresa to update.
     */
    where: SaldoEmpresaWhereUniqueInput
  }

  /**
   * SaldoEmpresa updateMany
   */
  export type SaldoEmpresaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaldoEmpresas.
     */
    data: XOR<SaldoEmpresaUpdateManyMutationInput, SaldoEmpresaUncheckedUpdateManyInput>
    /**
     * Filter which SaldoEmpresas to update
     */
    where?: SaldoEmpresaWhereInput
  }

  /**
   * SaldoEmpresa upsert
   */
  export type SaldoEmpresaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * The filter to search for the SaldoEmpresa to update in case it exists.
     */
    where: SaldoEmpresaWhereUniqueInput
    /**
     * In case the SaldoEmpresa found by the `where` argument doesn't exist, create a new SaldoEmpresa with this data.
     */
    create: XOR<SaldoEmpresaCreateInput, SaldoEmpresaUncheckedCreateInput>
    /**
     * In case the SaldoEmpresa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaldoEmpresaUpdateInput, SaldoEmpresaUncheckedUpdateInput>
  }

  /**
   * SaldoEmpresa delete
   */
  export type SaldoEmpresaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
    /**
     * Filter which SaldoEmpresa to delete.
     */
    where: SaldoEmpresaWhereUniqueInput
  }

  /**
   * SaldoEmpresa deleteMany
   */
  export type SaldoEmpresaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaldoEmpresas to delete
     */
    where?: SaldoEmpresaWhereInput
  }

  /**
   * SaldoEmpresa without action
   */
  export type SaldoEmpresaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoEmpresa
     */
    select?: SaldoEmpresaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoEmpresaInclude<ExtArgs> | null
  }


  /**
   * Model SaldoCaja
   */

  export type AggregateSaldoCaja = {
    _count: SaldoCajaCountAggregateOutputType | null
    _avg: SaldoCajaAvgAggregateOutputType | null
    _sum: SaldoCajaSumAggregateOutputType | null
    _min: SaldoCajaMinAggregateOutputType | null
    _max: SaldoCajaMaxAggregateOutputType | null
  }

  export type SaldoCajaAvgAggregateOutputType = {
    id: number | null
    saldo: number | null
    egreso: number | null
    totalIngresos: number | null
    totalEgresos: number | null
    empresaId: number | null
  }

  export type SaldoCajaSumAggregateOutputType = {
    id: number | null
    saldo: number | null
    egreso: number | null
    totalIngresos: number | null
    totalEgresos: number | null
    empresaId: number | null
  }

  export type SaldoCajaMinAggregateOutputType = {
    id: number | null
    saldo: number | null
    egreso: number | null
    totalIngresos: number | null
    totalEgresos: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type SaldoCajaMaxAggregateOutputType = {
    id: number | null
    saldo: number | null
    egreso: number | null
    totalIngresos: number | null
    totalEgresos: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type SaldoCajaCountAggregateOutputType = {
    id: number
    saldo: number
    egreso: number
    totalIngresos: number
    totalEgresos: number
    empresaId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type SaldoCajaAvgAggregateInputType = {
    id?: true
    saldo?: true
    egreso?: true
    totalIngresos?: true
    totalEgresos?: true
    empresaId?: true
  }

  export type SaldoCajaSumAggregateInputType = {
    id?: true
    saldo?: true
    egreso?: true
    totalIngresos?: true
    totalEgresos?: true
    empresaId?: true
  }

  export type SaldoCajaMinAggregateInputType = {
    id?: true
    saldo?: true
    egreso?: true
    totalIngresos?: true
    totalEgresos?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type SaldoCajaMaxAggregateInputType = {
    id?: true
    saldo?: true
    egreso?: true
    totalIngresos?: true
    totalEgresos?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type SaldoCajaCountAggregateInputType = {
    id?: true
    saldo?: true
    egreso?: true
    totalIngresos?: true
    totalEgresos?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type SaldoCajaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaldoCaja to aggregate.
     */
    where?: SaldoCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoCajas to fetch.
     */
    orderBy?: SaldoCajaOrderByWithRelationInput | SaldoCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaldoCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoCajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaldoCajas
    **/
    _count?: true | SaldoCajaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaldoCajaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaldoCajaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaldoCajaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaldoCajaMaxAggregateInputType
  }

  export type GetSaldoCajaAggregateType<T extends SaldoCajaAggregateArgs> = {
        [P in keyof T & keyof AggregateSaldoCaja]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaldoCaja[P]>
      : GetScalarType<T[P], AggregateSaldoCaja[P]>
  }




  export type SaldoCajaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaldoCajaWhereInput
    orderBy?: SaldoCajaOrderByWithAggregationInput | SaldoCajaOrderByWithAggregationInput[]
    by: SaldoCajaScalarFieldEnum[] | SaldoCajaScalarFieldEnum
    having?: SaldoCajaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaldoCajaCountAggregateInputType | true
    _avg?: SaldoCajaAvgAggregateInputType
    _sum?: SaldoCajaSumAggregateInputType
    _min?: SaldoCajaMinAggregateInputType
    _max?: SaldoCajaMaxAggregateInputType
  }

  export type SaldoCajaGroupByOutputType = {
    id: number
    saldo: number
    egreso: number
    totalIngresos: number
    totalEgresos: number
    empresaId: number
    creadoEn: Date
    actualizadoEn: Date
    _count: SaldoCajaCountAggregateOutputType | null
    _avg: SaldoCajaAvgAggregateOutputType | null
    _sum: SaldoCajaSumAggregateOutputType | null
    _min: SaldoCajaMinAggregateOutputType | null
    _max: SaldoCajaMaxAggregateOutputType | null
  }

  type GetSaldoCajaGroupByPayload<T extends SaldoCajaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaldoCajaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaldoCajaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaldoCajaGroupByOutputType[P]>
            : GetScalarType<T[P], SaldoCajaGroupByOutputType[P]>
        }
      >
    >


  export type SaldoCajaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldo?: boolean
    egreso?: boolean
    totalIngresos?: boolean
    totalEgresos?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    registrosCaja?: boolean | SaldoCaja$registrosCajaArgs<ExtArgs>
    _count?: boolean | SaldoCajaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saldoCaja"]>

  export type SaldoCajaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldo?: boolean
    egreso?: boolean
    totalIngresos?: boolean
    totalEgresos?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saldoCaja"]>

  export type SaldoCajaSelectScalar = {
    id?: boolean
    saldo?: boolean
    egreso?: boolean
    totalIngresos?: boolean
    totalEgresos?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type SaldoCajaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    registrosCaja?: boolean | SaldoCaja$registrosCajaArgs<ExtArgs>
    _count?: boolean | SaldoCajaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SaldoCajaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $SaldoCajaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaldoCaja"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      registrosCaja: Prisma.$RegistroCajaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saldo: number
      egreso: number
      totalIngresos: number
      totalEgresos: number
      empresaId: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["saldoCaja"]>
    composites: {}
  }

  type SaldoCajaGetPayload<S extends boolean | null | undefined | SaldoCajaDefaultArgs> = $Result.GetResult<Prisma.$SaldoCajaPayload, S>

  type SaldoCajaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaldoCajaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaldoCajaCountAggregateInputType | true
    }

  export interface SaldoCajaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaldoCaja'], meta: { name: 'SaldoCaja' } }
    /**
     * Find zero or one SaldoCaja that matches the filter.
     * @param {SaldoCajaFindUniqueArgs} args - Arguments to find a SaldoCaja
     * @example
     * // Get one SaldoCaja
     * const saldoCaja = await prisma.saldoCaja.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaldoCajaFindUniqueArgs>(args: SelectSubset<T, SaldoCajaFindUniqueArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SaldoCaja that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SaldoCajaFindUniqueOrThrowArgs} args - Arguments to find a SaldoCaja
     * @example
     * // Get one SaldoCaja
     * const saldoCaja = await prisma.saldoCaja.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaldoCajaFindUniqueOrThrowArgs>(args: SelectSubset<T, SaldoCajaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SaldoCaja that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaFindFirstArgs} args - Arguments to find a SaldoCaja
     * @example
     * // Get one SaldoCaja
     * const saldoCaja = await prisma.saldoCaja.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaldoCajaFindFirstArgs>(args?: SelectSubset<T, SaldoCajaFindFirstArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SaldoCaja that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaFindFirstOrThrowArgs} args - Arguments to find a SaldoCaja
     * @example
     * // Get one SaldoCaja
     * const saldoCaja = await prisma.saldoCaja.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaldoCajaFindFirstOrThrowArgs>(args?: SelectSubset<T, SaldoCajaFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SaldoCajas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaldoCajas
     * const saldoCajas = await prisma.saldoCaja.findMany()
     * 
     * // Get first 10 SaldoCajas
     * const saldoCajas = await prisma.saldoCaja.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saldoCajaWithIdOnly = await prisma.saldoCaja.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaldoCajaFindManyArgs>(args?: SelectSubset<T, SaldoCajaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SaldoCaja.
     * @param {SaldoCajaCreateArgs} args - Arguments to create a SaldoCaja.
     * @example
     * // Create one SaldoCaja
     * const SaldoCaja = await prisma.saldoCaja.create({
     *   data: {
     *     // ... data to create a SaldoCaja
     *   }
     * })
     * 
     */
    create<T extends SaldoCajaCreateArgs>(args: SelectSubset<T, SaldoCajaCreateArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SaldoCajas.
     * @param {SaldoCajaCreateManyArgs} args - Arguments to create many SaldoCajas.
     * @example
     * // Create many SaldoCajas
     * const saldoCaja = await prisma.saldoCaja.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaldoCajaCreateManyArgs>(args?: SelectSubset<T, SaldoCajaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaldoCajas and returns the data saved in the database.
     * @param {SaldoCajaCreateManyAndReturnArgs} args - Arguments to create many SaldoCajas.
     * @example
     * // Create many SaldoCajas
     * const saldoCaja = await prisma.saldoCaja.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaldoCajas and only return the `id`
     * const saldoCajaWithIdOnly = await prisma.saldoCaja.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaldoCajaCreateManyAndReturnArgs>(args?: SelectSubset<T, SaldoCajaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SaldoCaja.
     * @param {SaldoCajaDeleteArgs} args - Arguments to delete one SaldoCaja.
     * @example
     * // Delete one SaldoCaja
     * const SaldoCaja = await prisma.saldoCaja.delete({
     *   where: {
     *     // ... filter to delete one SaldoCaja
     *   }
     * })
     * 
     */
    delete<T extends SaldoCajaDeleteArgs>(args: SelectSubset<T, SaldoCajaDeleteArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SaldoCaja.
     * @param {SaldoCajaUpdateArgs} args - Arguments to update one SaldoCaja.
     * @example
     * // Update one SaldoCaja
     * const saldoCaja = await prisma.saldoCaja.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaldoCajaUpdateArgs>(args: SelectSubset<T, SaldoCajaUpdateArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SaldoCajas.
     * @param {SaldoCajaDeleteManyArgs} args - Arguments to filter SaldoCajas to delete.
     * @example
     * // Delete a few SaldoCajas
     * const { count } = await prisma.saldoCaja.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaldoCajaDeleteManyArgs>(args?: SelectSubset<T, SaldoCajaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaldoCajas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaldoCajas
     * const saldoCaja = await prisma.saldoCaja.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaldoCajaUpdateManyArgs>(args: SelectSubset<T, SaldoCajaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaldoCaja.
     * @param {SaldoCajaUpsertArgs} args - Arguments to update or create a SaldoCaja.
     * @example
     * // Update or create a SaldoCaja
     * const saldoCaja = await prisma.saldoCaja.upsert({
     *   create: {
     *     // ... data to create a SaldoCaja
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaldoCaja we want to update
     *   }
     * })
     */
    upsert<T extends SaldoCajaUpsertArgs>(args: SelectSubset<T, SaldoCajaUpsertArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SaldoCajas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaCountArgs} args - Arguments to filter SaldoCajas to count.
     * @example
     * // Count the number of SaldoCajas
     * const count = await prisma.saldoCaja.count({
     *   where: {
     *     // ... the filter for the SaldoCajas we want to count
     *   }
     * })
    **/
    count<T extends SaldoCajaCountArgs>(
      args?: Subset<T, SaldoCajaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaldoCajaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaldoCaja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaldoCajaAggregateArgs>(args: Subset<T, SaldoCajaAggregateArgs>): Prisma.PrismaPromise<GetSaldoCajaAggregateType<T>>

    /**
     * Group by SaldoCaja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoCajaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaldoCajaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaldoCajaGroupByArgs['orderBy'] }
        : { orderBy?: SaldoCajaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaldoCajaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaldoCajaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaldoCaja model
   */
  readonly fields: SaldoCajaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaldoCaja.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaldoCajaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    registrosCaja<T extends SaldoCaja$registrosCajaArgs<ExtArgs> = {}>(args?: Subset<T, SaldoCaja$registrosCajaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaldoCaja model
   */ 
  interface SaldoCajaFieldRefs {
    readonly id: FieldRef<"SaldoCaja", 'Int'>
    readonly saldo: FieldRef<"SaldoCaja", 'Float'>
    readonly egreso: FieldRef<"SaldoCaja", 'Float'>
    readonly totalIngresos: FieldRef<"SaldoCaja", 'Float'>
    readonly totalEgresos: FieldRef<"SaldoCaja", 'Float'>
    readonly empresaId: FieldRef<"SaldoCaja", 'Int'>
    readonly creadoEn: FieldRef<"SaldoCaja", 'DateTime'>
    readonly actualizadoEn: FieldRef<"SaldoCaja", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SaldoCaja findUnique
   */
  export type SaldoCajaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoCaja to fetch.
     */
    where: SaldoCajaWhereUniqueInput
  }

  /**
   * SaldoCaja findUniqueOrThrow
   */
  export type SaldoCajaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoCaja to fetch.
     */
    where: SaldoCajaWhereUniqueInput
  }

  /**
   * SaldoCaja findFirst
   */
  export type SaldoCajaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoCaja to fetch.
     */
    where?: SaldoCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoCajas to fetch.
     */
    orderBy?: SaldoCajaOrderByWithRelationInput | SaldoCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaldoCajas.
     */
    cursor?: SaldoCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoCajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaldoCajas.
     */
    distinct?: SaldoCajaScalarFieldEnum | SaldoCajaScalarFieldEnum[]
  }

  /**
   * SaldoCaja findFirstOrThrow
   */
  export type SaldoCajaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoCaja to fetch.
     */
    where?: SaldoCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoCajas to fetch.
     */
    orderBy?: SaldoCajaOrderByWithRelationInput | SaldoCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaldoCajas.
     */
    cursor?: SaldoCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoCajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaldoCajas.
     */
    distinct?: SaldoCajaScalarFieldEnum | SaldoCajaScalarFieldEnum[]
  }

  /**
   * SaldoCaja findMany
   */
  export type SaldoCajaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * Filter, which SaldoCajas to fetch.
     */
    where?: SaldoCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaldoCajas to fetch.
     */
    orderBy?: SaldoCajaOrderByWithRelationInput | SaldoCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaldoCajas.
     */
    cursor?: SaldoCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaldoCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaldoCajas.
     */
    skip?: number
    distinct?: SaldoCajaScalarFieldEnum | SaldoCajaScalarFieldEnum[]
  }

  /**
   * SaldoCaja create
   */
  export type SaldoCajaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * The data needed to create a SaldoCaja.
     */
    data: XOR<SaldoCajaCreateInput, SaldoCajaUncheckedCreateInput>
  }

  /**
   * SaldoCaja createMany
   */
  export type SaldoCajaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaldoCajas.
     */
    data: SaldoCajaCreateManyInput | SaldoCajaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SaldoCaja createManyAndReturn
   */
  export type SaldoCajaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SaldoCajas.
     */
    data: SaldoCajaCreateManyInput | SaldoCajaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SaldoCaja update
   */
  export type SaldoCajaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * The data needed to update a SaldoCaja.
     */
    data: XOR<SaldoCajaUpdateInput, SaldoCajaUncheckedUpdateInput>
    /**
     * Choose, which SaldoCaja to update.
     */
    where: SaldoCajaWhereUniqueInput
  }

  /**
   * SaldoCaja updateMany
   */
  export type SaldoCajaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaldoCajas.
     */
    data: XOR<SaldoCajaUpdateManyMutationInput, SaldoCajaUncheckedUpdateManyInput>
    /**
     * Filter which SaldoCajas to update
     */
    where?: SaldoCajaWhereInput
  }

  /**
   * SaldoCaja upsert
   */
  export type SaldoCajaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * The filter to search for the SaldoCaja to update in case it exists.
     */
    where: SaldoCajaWhereUniqueInput
    /**
     * In case the SaldoCaja found by the `where` argument doesn't exist, create a new SaldoCaja with this data.
     */
    create: XOR<SaldoCajaCreateInput, SaldoCajaUncheckedCreateInput>
    /**
     * In case the SaldoCaja was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaldoCajaUpdateInput, SaldoCajaUncheckedUpdateInput>
  }

  /**
   * SaldoCaja delete
   */
  export type SaldoCajaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    /**
     * Filter which SaldoCaja to delete.
     */
    where: SaldoCajaWhereUniqueInput
  }

  /**
   * SaldoCaja deleteMany
   */
  export type SaldoCajaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaldoCajas to delete
     */
    where?: SaldoCajaWhereInput
  }

  /**
   * SaldoCaja.registrosCaja
   */
  export type SaldoCaja$registrosCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    where?: RegistroCajaWhereInput
    orderBy?: RegistroCajaOrderByWithRelationInput | RegistroCajaOrderByWithRelationInput[]
    cursor?: RegistroCajaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroCajaScalarFieldEnum | RegistroCajaScalarFieldEnum[]
  }

  /**
   * SaldoCaja without action
   */
  export type SaldoCajaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
  }


  /**
   * Model RegistroCaja
   */

  export type AggregateRegistroCaja = {
    _count: RegistroCajaCountAggregateOutputType | null
    _avg: RegistroCajaAvgAggregateOutputType | null
    _sum: RegistroCajaSumAggregateOutputType | null
    _min: RegistroCajaMinAggregateOutputType | null
    _max: RegistroCajaMaxAggregateOutputType | null
  }

  export type RegistroCajaAvgAggregateOutputType = {
    id: number | null
    saldoInicial: number | null
    saldoFinal: number | null
    usuarioId: number | null
    cajaId: number | null
  }

  export type RegistroCajaSumAggregateOutputType = {
    id: number | null
    saldoInicial: number | null
    saldoFinal: number | null
    usuarioId: number | null
    cajaId: number | null
  }

  export type RegistroCajaMinAggregateOutputType = {
    id: number | null
    saldoInicial: number | null
    saldoFinal: number | null
    usuarioId: number | null
    cajaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type RegistroCajaMaxAggregateOutputType = {
    id: number | null
    saldoInicial: number | null
    saldoFinal: number | null
    usuarioId: number | null
    cajaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type RegistroCajaCountAggregateOutputType = {
    id: number
    saldoInicial: number
    saldoFinal: number
    usuarioId: number
    cajaId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type RegistroCajaAvgAggregateInputType = {
    id?: true
    saldoInicial?: true
    saldoFinal?: true
    usuarioId?: true
    cajaId?: true
  }

  export type RegistroCajaSumAggregateInputType = {
    id?: true
    saldoInicial?: true
    saldoFinal?: true
    usuarioId?: true
    cajaId?: true
  }

  export type RegistroCajaMinAggregateInputType = {
    id?: true
    saldoInicial?: true
    saldoFinal?: true
    usuarioId?: true
    cajaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type RegistroCajaMaxAggregateInputType = {
    id?: true
    saldoInicial?: true
    saldoFinal?: true
    usuarioId?: true
    cajaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type RegistroCajaCountAggregateInputType = {
    id?: true
    saldoInicial?: true
    saldoFinal?: true
    usuarioId?: true
    cajaId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type RegistroCajaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegistroCaja to aggregate.
     */
    where?: RegistroCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroCajas to fetch.
     */
    orderBy?: RegistroCajaOrderByWithRelationInput | RegistroCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistroCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroCajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegistroCajas
    **/
    _count?: true | RegistroCajaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistroCajaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistroCajaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistroCajaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistroCajaMaxAggregateInputType
  }

  export type GetRegistroCajaAggregateType<T extends RegistroCajaAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistroCaja]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistroCaja[P]>
      : GetScalarType<T[P], AggregateRegistroCaja[P]>
  }




  export type RegistroCajaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroCajaWhereInput
    orderBy?: RegistroCajaOrderByWithAggregationInput | RegistroCajaOrderByWithAggregationInput[]
    by: RegistroCajaScalarFieldEnum[] | RegistroCajaScalarFieldEnum
    having?: RegistroCajaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistroCajaCountAggregateInputType | true
    _avg?: RegistroCajaAvgAggregateInputType
    _sum?: RegistroCajaSumAggregateInputType
    _min?: RegistroCajaMinAggregateInputType
    _max?: RegistroCajaMaxAggregateInputType
  }

  export type RegistroCajaGroupByOutputType = {
    id: number
    saldoInicial: number
    saldoFinal: number
    usuarioId: number | null
    cajaId: number | null
    creadoEn: Date
    actualizadoEn: Date
    _count: RegistroCajaCountAggregateOutputType | null
    _avg: RegistroCajaAvgAggregateOutputType | null
    _sum: RegistroCajaSumAggregateOutputType | null
    _min: RegistroCajaMinAggregateOutputType | null
    _max: RegistroCajaMaxAggregateOutputType | null
  }

  type GetRegistroCajaGroupByPayload<T extends RegistroCajaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistroCajaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistroCajaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistroCajaGroupByOutputType[P]>
            : GetScalarType<T[P], RegistroCajaGroupByOutputType[P]>
        }
      >
    >


  export type RegistroCajaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldoInicial?: boolean
    saldoFinal?: boolean
    usuarioId?: boolean
    cajaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    usuario?: boolean | RegistroCaja$usuarioArgs<ExtArgs>
    caja?: boolean | RegistroCaja$cajaArgs<ExtArgs>
  }, ExtArgs["result"]["registroCaja"]>

  export type RegistroCajaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldoInicial?: boolean
    saldoFinal?: boolean
    usuarioId?: boolean
    cajaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    usuario?: boolean | RegistroCaja$usuarioArgs<ExtArgs>
    caja?: boolean | RegistroCaja$cajaArgs<ExtArgs>
  }, ExtArgs["result"]["registroCaja"]>

  export type RegistroCajaSelectScalar = {
    id?: boolean
    saldoInicial?: boolean
    saldoFinal?: boolean
    usuarioId?: boolean
    cajaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type RegistroCajaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | RegistroCaja$usuarioArgs<ExtArgs>
    caja?: boolean | RegistroCaja$cajaArgs<ExtArgs>
  }
  export type RegistroCajaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | RegistroCaja$usuarioArgs<ExtArgs>
    caja?: boolean | RegistroCaja$cajaArgs<ExtArgs>
  }

  export type $RegistroCajaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegistroCaja"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
      caja: Prisma.$SaldoCajaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saldoInicial: number
      saldoFinal: number
      usuarioId: number | null
      cajaId: number | null
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["registroCaja"]>
    composites: {}
  }

  type RegistroCajaGetPayload<S extends boolean | null | undefined | RegistroCajaDefaultArgs> = $Result.GetResult<Prisma.$RegistroCajaPayload, S>

  type RegistroCajaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegistroCajaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegistroCajaCountAggregateInputType | true
    }

  export interface RegistroCajaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegistroCaja'], meta: { name: 'RegistroCaja' } }
    /**
     * Find zero or one RegistroCaja that matches the filter.
     * @param {RegistroCajaFindUniqueArgs} args - Arguments to find a RegistroCaja
     * @example
     * // Get one RegistroCaja
     * const registroCaja = await prisma.registroCaja.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistroCajaFindUniqueArgs>(args: SelectSubset<T, RegistroCajaFindUniqueArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RegistroCaja that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegistroCajaFindUniqueOrThrowArgs} args - Arguments to find a RegistroCaja
     * @example
     * // Get one RegistroCaja
     * const registroCaja = await prisma.registroCaja.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistroCajaFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistroCajaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RegistroCaja that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaFindFirstArgs} args - Arguments to find a RegistroCaja
     * @example
     * // Get one RegistroCaja
     * const registroCaja = await prisma.registroCaja.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistroCajaFindFirstArgs>(args?: SelectSubset<T, RegistroCajaFindFirstArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RegistroCaja that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaFindFirstOrThrowArgs} args - Arguments to find a RegistroCaja
     * @example
     * // Get one RegistroCaja
     * const registroCaja = await prisma.registroCaja.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistroCajaFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistroCajaFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RegistroCajas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegistroCajas
     * const registroCajas = await prisma.registroCaja.findMany()
     * 
     * // Get first 10 RegistroCajas
     * const registroCajas = await prisma.registroCaja.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registroCajaWithIdOnly = await prisma.registroCaja.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistroCajaFindManyArgs>(args?: SelectSubset<T, RegistroCajaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RegistroCaja.
     * @param {RegistroCajaCreateArgs} args - Arguments to create a RegistroCaja.
     * @example
     * // Create one RegistroCaja
     * const RegistroCaja = await prisma.registroCaja.create({
     *   data: {
     *     // ... data to create a RegistroCaja
     *   }
     * })
     * 
     */
    create<T extends RegistroCajaCreateArgs>(args: SelectSubset<T, RegistroCajaCreateArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RegistroCajas.
     * @param {RegistroCajaCreateManyArgs} args - Arguments to create many RegistroCajas.
     * @example
     * // Create many RegistroCajas
     * const registroCaja = await prisma.registroCaja.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistroCajaCreateManyArgs>(args?: SelectSubset<T, RegistroCajaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegistroCajas and returns the data saved in the database.
     * @param {RegistroCajaCreateManyAndReturnArgs} args - Arguments to create many RegistroCajas.
     * @example
     * // Create many RegistroCajas
     * const registroCaja = await prisma.registroCaja.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegistroCajas and only return the `id`
     * const registroCajaWithIdOnly = await prisma.registroCaja.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistroCajaCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistroCajaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RegistroCaja.
     * @param {RegistroCajaDeleteArgs} args - Arguments to delete one RegistroCaja.
     * @example
     * // Delete one RegistroCaja
     * const RegistroCaja = await prisma.registroCaja.delete({
     *   where: {
     *     // ... filter to delete one RegistroCaja
     *   }
     * })
     * 
     */
    delete<T extends RegistroCajaDeleteArgs>(args: SelectSubset<T, RegistroCajaDeleteArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RegistroCaja.
     * @param {RegistroCajaUpdateArgs} args - Arguments to update one RegistroCaja.
     * @example
     * // Update one RegistroCaja
     * const registroCaja = await prisma.registroCaja.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistroCajaUpdateArgs>(args: SelectSubset<T, RegistroCajaUpdateArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RegistroCajas.
     * @param {RegistroCajaDeleteManyArgs} args - Arguments to filter RegistroCajas to delete.
     * @example
     * // Delete a few RegistroCajas
     * const { count } = await prisma.registroCaja.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistroCajaDeleteManyArgs>(args?: SelectSubset<T, RegistroCajaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegistroCajas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegistroCajas
     * const registroCaja = await prisma.registroCaja.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistroCajaUpdateManyArgs>(args: SelectSubset<T, RegistroCajaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RegistroCaja.
     * @param {RegistroCajaUpsertArgs} args - Arguments to update or create a RegistroCaja.
     * @example
     * // Update or create a RegistroCaja
     * const registroCaja = await prisma.registroCaja.upsert({
     *   create: {
     *     // ... data to create a RegistroCaja
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegistroCaja we want to update
     *   }
     * })
     */
    upsert<T extends RegistroCajaUpsertArgs>(args: SelectSubset<T, RegistroCajaUpsertArgs<ExtArgs>>): Prisma__RegistroCajaClient<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RegistroCajas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaCountArgs} args - Arguments to filter RegistroCajas to count.
     * @example
     * // Count the number of RegistroCajas
     * const count = await prisma.registroCaja.count({
     *   where: {
     *     // ... the filter for the RegistroCajas we want to count
     *   }
     * })
    **/
    count<T extends RegistroCajaCountArgs>(
      args?: Subset<T, RegistroCajaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistroCajaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegistroCaja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistroCajaAggregateArgs>(args: Subset<T, RegistroCajaAggregateArgs>): Prisma.PrismaPromise<GetRegistroCajaAggregateType<T>>

    /**
     * Group by RegistroCaja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroCajaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistroCajaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistroCajaGroupByArgs['orderBy'] }
        : { orderBy?: RegistroCajaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistroCajaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistroCajaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegistroCaja model
   */
  readonly fields: RegistroCajaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegistroCaja.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistroCajaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends RegistroCaja$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, RegistroCaja$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    caja<T extends RegistroCaja$cajaArgs<ExtArgs> = {}>(args?: Subset<T, RegistroCaja$cajaArgs<ExtArgs>>): Prisma__SaldoCajaClient<$Result.GetResult<Prisma.$SaldoCajaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegistroCaja model
   */ 
  interface RegistroCajaFieldRefs {
    readonly id: FieldRef<"RegistroCaja", 'Int'>
    readonly saldoInicial: FieldRef<"RegistroCaja", 'Float'>
    readonly saldoFinal: FieldRef<"RegistroCaja", 'Float'>
    readonly usuarioId: FieldRef<"RegistroCaja", 'Int'>
    readonly cajaId: FieldRef<"RegistroCaja", 'Int'>
    readonly creadoEn: FieldRef<"RegistroCaja", 'DateTime'>
    readonly actualizadoEn: FieldRef<"RegistroCaja", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RegistroCaja findUnique
   */
  export type RegistroCajaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * Filter, which RegistroCaja to fetch.
     */
    where: RegistroCajaWhereUniqueInput
  }

  /**
   * RegistroCaja findUniqueOrThrow
   */
  export type RegistroCajaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * Filter, which RegistroCaja to fetch.
     */
    where: RegistroCajaWhereUniqueInput
  }

  /**
   * RegistroCaja findFirst
   */
  export type RegistroCajaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * Filter, which RegistroCaja to fetch.
     */
    where?: RegistroCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroCajas to fetch.
     */
    orderBy?: RegistroCajaOrderByWithRelationInput | RegistroCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegistroCajas.
     */
    cursor?: RegistroCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroCajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegistroCajas.
     */
    distinct?: RegistroCajaScalarFieldEnum | RegistroCajaScalarFieldEnum[]
  }

  /**
   * RegistroCaja findFirstOrThrow
   */
  export type RegistroCajaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * Filter, which RegistroCaja to fetch.
     */
    where?: RegistroCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroCajas to fetch.
     */
    orderBy?: RegistroCajaOrderByWithRelationInput | RegistroCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegistroCajas.
     */
    cursor?: RegistroCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroCajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegistroCajas.
     */
    distinct?: RegistroCajaScalarFieldEnum | RegistroCajaScalarFieldEnum[]
  }

  /**
   * RegistroCaja findMany
   */
  export type RegistroCajaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * Filter, which RegistroCajas to fetch.
     */
    where?: RegistroCajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroCajas to fetch.
     */
    orderBy?: RegistroCajaOrderByWithRelationInput | RegistroCajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegistroCajas.
     */
    cursor?: RegistroCajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroCajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroCajas.
     */
    skip?: number
    distinct?: RegistroCajaScalarFieldEnum | RegistroCajaScalarFieldEnum[]
  }

  /**
   * RegistroCaja create
   */
  export type RegistroCajaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * The data needed to create a RegistroCaja.
     */
    data: XOR<RegistroCajaCreateInput, RegistroCajaUncheckedCreateInput>
  }

  /**
   * RegistroCaja createMany
   */
  export type RegistroCajaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegistroCajas.
     */
    data: RegistroCajaCreateManyInput | RegistroCajaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegistroCaja createManyAndReturn
   */
  export type RegistroCajaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RegistroCajas.
     */
    data: RegistroCajaCreateManyInput | RegistroCajaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegistroCaja update
   */
  export type RegistroCajaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * The data needed to update a RegistroCaja.
     */
    data: XOR<RegistroCajaUpdateInput, RegistroCajaUncheckedUpdateInput>
    /**
     * Choose, which RegistroCaja to update.
     */
    where: RegistroCajaWhereUniqueInput
  }

  /**
   * RegistroCaja updateMany
   */
  export type RegistroCajaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegistroCajas.
     */
    data: XOR<RegistroCajaUpdateManyMutationInput, RegistroCajaUncheckedUpdateManyInput>
    /**
     * Filter which RegistroCajas to update
     */
    where?: RegistroCajaWhereInput
  }

  /**
   * RegistroCaja upsert
   */
  export type RegistroCajaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * The filter to search for the RegistroCaja to update in case it exists.
     */
    where: RegistroCajaWhereUniqueInput
    /**
     * In case the RegistroCaja found by the `where` argument doesn't exist, create a new RegistroCaja with this data.
     */
    create: XOR<RegistroCajaCreateInput, RegistroCajaUncheckedCreateInput>
    /**
     * In case the RegistroCaja was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistroCajaUpdateInput, RegistroCajaUncheckedUpdateInput>
  }

  /**
   * RegistroCaja delete
   */
  export type RegistroCajaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    /**
     * Filter which RegistroCaja to delete.
     */
    where: RegistroCajaWhereUniqueInput
  }

  /**
   * RegistroCaja deleteMany
   */
  export type RegistroCajaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegistroCajas to delete
     */
    where?: RegistroCajaWhereInput
  }

  /**
   * RegistroCaja.usuario
   */
  export type RegistroCaja$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * RegistroCaja.caja
   */
  export type RegistroCaja$cajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaldoCaja
     */
    select?: SaldoCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaldoCajaInclude<ExtArgs> | null
    where?: SaldoCajaWhereInput
  }

  /**
   * RegistroCaja without action
   */
  export type RegistroCajaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
  }


  /**
   * Model ClienteServicio
   */

  export type AggregateClienteServicio = {
    _count: ClienteServicioCountAggregateOutputType | null
    _avg: ClienteServicioAvgAggregateOutputType | null
    _sum: ClienteServicioSumAggregateOutputType | null
    _min: ClienteServicioMinAggregateOutputType | null
    _max: ClienteServicioMaxAggregateOutputType | null
  }

  export type ClienteServicioAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    servicioId: number | null
  }

  export type ClienteServicioSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    servicioId: number | null
  }

  export type ClienteServicioMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    servicioId: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    estado: $Enums.EstadoClienteServicio | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type ClienteServicioMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    servicioId: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    estado: $Enums.EstadoClienteServicio | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type ClienteServicioCountAggregateOutputType = {
    id: number
    clienteId: number
    servicioId: number
    fechaInicio: number
    fechaFin: number
    estado: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type ClienteServicioAvgAggregateInputType = {
    id?: true
    clienteId?: true
    servicioId?: true
  }

  export type ClienteServicioSumAggregateInputType = {
    id?: true
    clienteId?: true
    servicioId?: true
  }

  export type ClienteServicioMinAggregateInputType = {
    id?: true
    clienteId?: true
    servicioId?: true
    fechaInicio?: true
    fechaFin?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type ClienteServicioMaxAggregateInputType = {
    id?: true
    clienteId?: true
    servicioId?: true
    fechaInicio?: true
    fechaFin?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type ClienteServicioCountAggregateInputType = {
    id?: true
    clienteId?: true
    servicioId?: true
    fechaInicio?: true
    fechaFin?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type ClienteServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteServicio to aggregate.
     */
    where?: ClienteServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicios to fetch.
     */
    orderBy?: ClienteServicioOrderByWithRelationInput | ClienteServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteServicios
    **/
    _count?: true | ClienteServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteServicioMaxAggregateInputType
  }

  export type GetClienteServicioAggregateType<T extends ClienteServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteServicio[P]>
      : GetScalarType<T[P], AggregateClienteServicio[P]>
  }




  export type ClienteServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteServicioWhereInput
    orderBy?: ClienteServicioOrderByWithAggregationInput | ClienteServicioOrderByWithAggregationInput[]
    by: ClienteServicioScalarFieldEnum[] | ClienteServicioScalarFieldEnum
    having?: ClienteServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteServicioCountAggregateInputType | true
    _avg?: ClienteServicioAvgAggregateInputType
    _sum?: ClienteServicioSumAggregateInputType
    _min?: ClienteServicioMinAggregateInputType
    _max?: ClienteServicioMaxAggregateInputType
  }

  export type ClienteServicioGroupByOutputType = {
    id: number
    clienteId: number
    servicioId: number
    fechaInicio: Date
    fechaFin: Date | null
    estado: $Enums.EstadoClienteServicio
    creadoEn: Date
    actualizadoEn: Date
    _count: ClienteServicioCountAggregateOutputType | null
    _avg: ClienteServicioAvgAggregateOutputType | null
    _sum: ClienteServicioSumAggregateOutputType | null
    _min: ClienteServicioMinAggregateOutputType | null
    _max: ClienteServicioMaxAggregateOutputType | null
  }

  type GetClienteServicioGroupByPayload<T extends ClienteServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteServicioGroupByOutputType[P]>
        }
      >
    >


  export type ClienteServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    servicioId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clienteServicio"]>

  export type ClienteServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    servicioId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clienteServicio"]>

  export type ClienteServicioSelectScalar = {
    id?: boolean
    clienteId?: boolean
    servicioId?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type ClienteServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }
  export type ClienteServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }

  export type $ClienteServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteServicio"
    objects: {
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
      servicio: Prisma.$ServicioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      servicioId: number
      fechaInicio: Date
      fechaFin: Date | null
      estado: $Enums.EstadoClienteServicio
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["clienteServicio"]>
    composites: {}
  }

  type ClienteServicioGetPayload<S extends boolean | null | undefined | ClienteServicioDefaultArgs> = $Result.GetResult<Prisma.$ClienteServicioPayload, S>

  type ClienteServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteServicioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteServicioCountAggregateInputType | true
    }

  export interface ClienteServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteServicio'], meta: { name: 'ClienteServicio' } }
    /**
     * Find zero or one ClienteServicio that matches the filter.
     * @param {ClienteServicioFindUniqueArgs} args - Arguments to find a ClienteServicio
     * @example
     * // Get one ClienteServicio
     * const clienteServicio = await prisma.clienteServicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteServicioFindUniqueArgs>(args: SelectSubset<T, ClienteServicioFindUniqueArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClienteServicio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteServicioFindUniqueOrThrowArgs} args - Arguments to find a ClienteServicio
     * @example
     * // Get one ClienteServicio
     * const clienteServicio = await prisma.clienteServicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClienteServicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioFindFirstArgs} args - Arguments to find a ClienteServicio
     * @example
     * // Get one ClienteServicio
     * const clienteServicio = await prisma.clienteServicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteServicioFindFirstArgs>(args?: SelectSubset<T, ClienteServicioFindFirstArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClienteServicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioFindFirstOrThrowArgs} args - Arguments to find a ClienteServicio
     * @example
     * // Get one ClienteServicio
     * const clienteServicio = await prisma.clienteServicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClienteServicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteServicios
     * const clienteServicios = await prisma.clienteServicio.findMany()
     * 
     * // Get first 10 ClienteServicios
     * const clienteServicios = await prisma.clienteServicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteServicioWithIdOnly = await prisma.clienteServicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteServicioFindManyArgs>(args?: SelectSubset<T, ClienteServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClienteServicio.
     * @param {ClienteServicioCreateArgs} args - Arguments to create a ClienteServicio.
     * @example
     * // Create one ClienteServicio
     * const ClienteServicio = await prisma.clienteServicio.create({
     *   data: {
     *     // ... data to create a ClienteServicio
     *   }
     * })
     * 
     */
    create<T extends ClienteServicioCreateArgs>(args: SelectSubset<T, ClienteServicioCreateArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClienteServicios.
     * @param {ClienteServicioCreateManyArgs} args - Arguments to create many ClienteServicios.
     * @example
     * // Create many ClienteServicios
     * const clienteServicio = await prisma.clienteServicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteServicioCreateManyArgs>(args?: SelectSubset<T, ClienteServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClienteServicios and returns the data saved in the database.
     * @param {ClienteServicioCreateManyAndReturnArgs} args - Arguments to create many ClienteServicios.
     * @example
     * // Create many ClienteServicios
     * const clienteServicio = await prisma.clienteServicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClienteServicios and only return the `id`
     * const clienteServicioWithIdOnly = await prisma.clienteServicio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClienteServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, ClienteServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClienteServicio.
     * @param {ClienteServicioDeleteArgs} args - Arguments to delete one ClienteServicio.
     * @example
     * // Delete one ClienteServicio
     * const ClienteServicio = await prisma.clienteServicio.delete({
     *   where: {
     *     // ... filter to delete one ClienteServicio
     *   }
     * })
     * 
     */
    delete<T extends ClienteServicioDeleteArgs>(args: SelectSubset<T, ClienteServicioDeleteArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClienteServicio.
     * @param {ClienteServicioUpdateArgs} args - Arguments to update one ClienteServicio.
     * @example
     * // Update one ClienteServicio
     * const clienteServicio = await prisma.clienteServicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteServicioUpdateArgs>(args: SelectSubset<T, ClienteServicioUpdateArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClienteServicios.
     * @param {ClienteServicioDeleteManyArgs} args - Arguments to filter ClienteServicios to delete.
     * @example
     * // Delete a few ClienteServicios
     * const { count } = await prisma.clienteServicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteServicioDeleteManyArgs>(args?: SelectSubset<T, ClienteServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteServicios
     * const clienteServicio = await prisma.clienteServicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteServicioUpdateManyArgs>(args: SelectSubset<T, ClienteServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteServicio.
     * @param {ClienteServicioUpsertArgs} args - Arguments to update or create a ClienteServicio.
     * @example
     * // Update or create a ClienteServicio
     * const clienteServicio = await prisma.clienteServicio.upsert({
     *   create: {
     *     // ... data to create a ClienteServicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteServicio we want to update
     *   }
     * })
     */
    upsert<T extends ClienteServicioUpsertArgs>(args: SelectSubset<T, ClienteServicioUpsertArgs<ExtArgs>>): Prisma__ClienteServicioClient<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClienteServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioCountArgs} args - Arguments to filter ClienteServicios to count.
     * @example
     * // Count the number of ClienteServicios
     * const count = await prisma.clienteServicio.count({
     *   where: {
     *     // ... the filter for the ClienteServicios we want to count
     *   }
     * })
    **/
    count<T extends ClienteServicioCountArgs>(
      args?: Subset<T, ClienteServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteServicioAggregateArgs>(args: Subset<T, ClienteServicioAggregateArgs>): Prisma.PrismaPromise<GetClienteServicioAggregateType<T>>

    /**
     * Group by ClienteServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteServicioGroupByArgs['orderBy'] }
        : { orderBy?: ClienteServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteServicio model
   */
  readonly fields: ClienteServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteServicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    servicio<T extends ServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicioDefaultArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteServicio model
   */ 
  interface ClienteServicioFieldRefs {
    readonly id: FieldRef<"ClienteServicio", 'Int'>
    readonly clienteId: FieldRef<"ClienteServicio", 'Int'>
    readonly servicioId: FieldRef<"ClienteServicio", 'Int'>
    readonly fechaInicio: FieldRef<"ClienteServicio", 'DateTime'>
    readonly fechaFin: FieldRef<"ClienteServicio", 'DateTime'>
    readonly estado: FieldRef<"ClienteServicio", 'EstadoClienteServicio'>
    readonly creadoEn: FieldRef<"ClienteServicio", 'DateTime'>
    readonly actualizadoEn: FieldRef<"ClienteServicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClienteServicio findUnique
   */
  export type ClienteServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServicio to fetch.
     */
    where: ClienteServicioWhereUniqueInput
  }

  /**
   * ClienteServicio findUniqueOrThrow
   */
  export type ClienteServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServicio to fetch.
     */
    where: ClienteServicioWhereUniqueInput
  }

  /**
   * ClienteServicio findFirst
   */
  export type ClienteServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServicio to fetch.
     */
    where?: ClienteServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicios to fetch.
     */
    orderBy?: ClienteServicioOrderByWithRelationInput | ClienteServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteServicios.
     */
    cursor?: ClienteServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteServicios.
     */
    distinct?: ClienteServicioScalarFieldEnum | ClienteServicioScalarFieldEnum[]
  }

  /**
   * ClienteServicio findFirstOrThrow
   */
  export type ClienteServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServicio to fetch.
     */
    where?: ClienteServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicios to fetch.
     */
    orderBy?: ClienteServicioOrderByWithRelationInput | ClienteServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteServicios.
     */
    cursor?: ClienteServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteServicios.
     */
    distinct?: ClienteServicioScalarFieldEnum | ClienteServicioScalarFieldEnum[]
  }

  /**
   * ClienteServicio findMany
   */
  export type ClienteServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServicios to fetch.
     */
    where?: ClienteServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicios to fetch.
     */
    orderBy?: ClienteServicioOrderByWithRelationInput | ClienteServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteServicios.
     */
    cursor?: ClienteServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicios.
     */
    skip?: number
    distinct?: ClienteServicioScalarFieldEnum | ClienteServicioScalarFieldEnum[]
  }

  /**
   * ClienteServicio create
   */
  export type ClienteServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a ClienteServicio.
     */
    data: XOR<ClienteServicioCreateInput, ClienteServicioUncheckedCreateInput>
  }

  /**
   * ClienteServicio createMany
   */
  export type ClienteServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteServicios.
     */
    data: ClienteServicioCreateManyInput | ClienteServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteServicio createManyAndReturn
   */
  export type ClienteServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClienteServicios.
     */
    data: ClienteServicioCreateManyInput | ClienteServicioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClienteServicio update
   */
  export type ClienteServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a ClienteServicio.
     */
    data: XOR<ClienteServicioUpdateInput, ClienteServicioUncheckedUpdateInput>
    /**
     * Choose, which ClienteServicio to update.
     */
    where: ClienteServicioWhereUniqueInput
  }

  /**
   * ClienteServicio updateMany
   */
  export type ClienteServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteServicios.
     */
    data: XOR<ClienteServicioUpdateManyMutationInput, ClienteServicioUncheckedUpdateManyInput>
    /**
     * Filter which ClienteServicios to update
     */
    where?: ClienteServicioWhereInput
  }

  /**
   * ClienteServicio upsert
   */
  export type ClienteServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the ClienteServicio to update in case it exists.
     */
    where: ClienteServicioWhereUniqueInput
    /**
     * In case the ClienteServicio found by the `where` argument doesn't exist, create a new ClienteServicio with this data.
     */
    create: XOR<ClienteServicioCreateInput, ClienteServicioUncheckedCreateInput>
    /**
     * In case the ClienteServicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteServicioUpdateInput, ClienteServicioUncheckedUpdateInput>
  }

  /**
   * ClienteServicio delete
   */
  export type ClienteServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    /**
     * Filter which ClienteServicio to delete.
     */
    where: ClienteServicioWhereUniqueInput
  }

  /**
   * ClienteServicio deleteMany
   */
  export type ClienteServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteServicios to delete
     */
    where?: ClienteServicioWhereInput
  }

  /**
   * ClienteServicio without action
   */
  export type ClienteServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
  }


  /**
   * Model Factura
   */

  export type AggregateFactura = {
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  export type FacturaAvgAggregateOutputType = {
    id: number | null
    empresaId: number | null
    clienteId: number | null
    montoTotal: number | null
    saldoPendiente: number | null
  }

  export type FacturaSumAggregateOutputType = {
    id: number | null
    empresaId: number | null
    clienteId: number | null
    montoTotal: number | null
    saldoPendiente: number | null
  }

  export type FacturaMinAggregateOutputType = {
    id: number | null
    empresaId: number | null
    clienteId: number | null
    tipoFactura: $Enums.TipoFactura | null
    montoTotal: number | null
    saldoPendiente: number | null
    fechaEmision: Date | null
    fechaVencimiento: Date | null
    estado: $Enums.EstadoFactura | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FacturaMaxAggregateOutputType = {
    id: number | null
    empresaId: number | null
    clienteId: number | null
    tipoFactura: $Enums.TipoFactura | null
    montoTotal: number | null
    saldoPendiente: number | null
    fechaEmision: Date | null
    fechaVencimiento: Date | null
    estado: $Enums.EstadoFactura | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FacturaCountAggregateOutputType = {
    id: number
    empresaId: number
    clienteId: number
    tipoFactura: number
    montoTotal: number
    saldoPendiente: number
    fechaEmision: number
    fechaVencimiento: number
    estado: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type FacturaAvgAggregateInputType = {
    id?: true
    empresaId?: true
    clienteId?: true
    montoTotal?: true
    saldoPendiente?: true
  }

  export type FacturaSumAggregateInputType = {
    id?: true
    empresaId?: true
    clienteId?: true
    montoTotal?: true
    saldoPendiente?: true
  }

  export type FacturaMinAggregateInputType = {
    id?: true
    empresaId?: true
    clienteId?: true
    tipoFactura?: true
    montoTotal?: true
    saldoPendiente?: true
    fechaEmision?: true
    fechaVencimiento?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FacturaMaxAggregateInputType = {
    id?: true
    empresaId?: true
    clienteId?: true
    tipoFactura?: true
    montoTotal?: true
    saldoPendiente?: true
    fechaEmision?: true
    fechaVencimiento?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FacturaCountAggregateInputType = {
    id?: true
    empresaId?: true
    clienteId?: true
    tipoFactura?: true
    montoTotal?: true
    saldoPendiente?: true
    fechaEmision?: true
    fechaVencimiento?: true
    estado?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type FacturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factura to aggregate.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Facturas
    **/
    _count?: true | FacturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacturaMaxAggregateInputType
  }

  export type GetFacturaAggregateType<T extends FacturaAggregateArgs> = {
        [P in keyof T & keyof AggregateFactura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactura[P]>
      : GetScalarType<T[P], AggregateFactura[P]>
  }




  export type FacturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithAggregationInput | FacturaOrderByWithAggregationInput[]
    by: FacturaScalarFieldEnum[] | FacturaScalarFieldEnum
    having?: FacturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacturaCountAggregateInputType | true
    _avg?: FacturaAvgAggregateInputType
    _sum?: FacturaSumAggregateInputType
    _min?: FacturaMinAggregateInputType
    _max?: FacturaMaxAggregateInputType
  }

  export type FacturaGroupByOutputType = {
    id: number
    empresaId: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente: number
    fechaEmision: Date
    fechaVencimiento: Date | null
    estado: $Enums.EstadoFactura
    creadoEn: Date
    actualizadoEn: Date
    _count: FacturaCountAggregateOutputType | null
    _avg: FacturaAvgAggregateOutputType | null
    _sum: FacturaSumAggregateOutputType | null
    _min: FacturaMinAggregateOutputType | null
    _max: FacturaMaxAggregateOutputType | null
  }

  type GetFacturaGroupByPayload<T extends FacturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacturaGroupByOutputType[P]>
            : GetScalarType<T[P], FacturaGroupByOutputType[P]>
        }
      >
    >


  export type FacturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    empresaId?: boolean
    clienteId?: boolean
    tipoFactura?: boolean
    montoTotal?: boolean
    saldoPendiente?: boolean
    fechaEmision?: boolean
    fechaVencimiento?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    servicios?: boolean | Factura$serviciosArgs<ExtArgs>
    pagos?: boolean | Factura$pagosArgs<ExtArgs>
    _count?: boolean | FacturaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>

  export type FacturaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    empresaId?: boolean
    clienteId?: boolean
    tipoFactura?: boolean
    montoTotal?: boolean
    saldoPendiente?: boolean
    fechaEmision?: boolean
    fechaVencimiento?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factura"]>

  export type FacturaSelectScalar = {
    id?: boolean
    empresaId?: boolean
    clienteId?: boolean
    tipoFactura?: boolean
    montoTotal?: boolean
    saldoPendiente?: boolean
    fechaEmision?: boolean
    fechaVencimiento?: boolean
    estado?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type FacturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    servicios?: boolean | Factura$serviciosArgs<ExtArgs>
    pagos?: boolean | Factura$pagosArgs<ExtArgs>
    _count?: boolean | FacturaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FacturaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }

  export type $FacturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Factura"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
      servicios: Prisma.$FacturaServicioPayload<ExtArgs>[]
      pagos: Prisma.$PagoFacturaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      empresaId: number
      clienteId: number
      tipoFactura: $Enums.TipoFactura
      montoTotal: number
      saldoPendiente: number
      fechaEmision: Date
      fechaVencimiento: Date | null
      estado: $Enums.EstadoFactura
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["factura"]>
    composites: {}
  }

  type FacturaGetPayload<S extends boolean | null | undefined | FacturaDefaultArgs> = $Result.GetResult<Prisma.$FacturaPayload, S>

  type FacturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacturaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacturaCountAggregateInputType | true
    }

  export interface FacturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Factura'], meta: { name: 'Factura' } }
    /**
     * Find zero or one Factura that matches the filter.
     * @param {FacturaFindUniqueArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacturaFindUniqueArgs>(args: SelectSubset<T, FacturaFindUniqueArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Factura that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FacturaFindUniqueOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacturaFindUniqueOrThrowArgs>(args: SelectSubset<T, FacturaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Factura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindFirstArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacturaFindFirstArgs>(args?: SelectSubset<T, FacturaFindFirstArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Factura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindFirstOrThrowArgs} args - Arguments to find a Factura
     * @example
     * // Get one Factura
     * const factura = await prisma.factura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacturaFindFirstOrThrowArgs>(args?: SelectSubset<T, FacturaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Facturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Facturas
     * const facturas = await prisma.factura.findMany()
     * 
     * // Get first 10 Facturas
     * const facturas = await prisma.factura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facturaWithIdOnly = await prisma.factura.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacturaFindManyArgs>(args?: SelectSubset<T, FacturaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Factura.
     * @param {FacturaCreateArgs} args - Arguments to create a Factura.
     * @example
     * // Create one Factura
     * const Factura = await prisma.factura.create({
     *   data: {
     *     // ... data to create a Factura
     *   }
     * })
     * 
     */
    create<T extends FacturaCreateArgs>(args: SelectSubset<T, FacturaCreateArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Facturas.
     * @param {FacturaCreateManyArgs} args - Arguments to create many Facturas.
     * @example
     * // Create many Facturas
     * const factura = await prisma.factura.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacturaCreateManyArgs>(args?: SelectSubset<T, FacturaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Facturas and returns the data saved in the database.
     * @param {FacturaCreateManyAndReturnArgs} args - Arguments to create many Facturas.
     * @example
     * // Create many Facturas
     * const factura = await prisma.factura.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Facturas and only return the `id`
     * const facturaWithIdOnly = await prisma.factura.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacturaCreateManyAndReturnArgs>(args?: SelectSubset<T, FacturaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Factura.
     * @param {FacturaDeleteArgs} args - Arguments to delete one Factura.
     * @example
     * // Delete one Factura
     * const Factura = await prisma.factura.delete({
     *   where: {
     *     // ... filter to delete one Factura
     *   }
     * })
     * 
     */
    delete<T extends FacturaDeleteArgs>(args: SelectSubset<T, FacturaDeleteArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Factura.
     * @param {FacturaUpdateArgs} args - Arguments to update one Factura.
     * @example
     * // Update one Factura
     * const factura = await prisma.factura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacturaUpdateArgs>(args: SelectSubset<T, FacturaUpdateArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Facturas.
     * @param {FacturaDeleteManyArgs} args - Arguments to filter Facturas to delete.
     * @example
     * // Delete a few Facturas
     * const { count } = await prisma.factura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacturaDeleteManyArgs>(args?: SelectSubset<T, FacturaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Facturas
     * const factura = await prisma.factura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacturaUpdateManyArgs>(args: SelectSubset<T, FacturaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Factura.
     * @param {FacturaUpsertArgs} args - Arguments to update or create a Factura.
     * @example
     * // Update or create a Factura
     * const factura = await prisma.factura.upsert({
     *   create: {
     *     // ... data to create a Factura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Factura we want to update
     *   }
     * })
     */
    upsert<T extends FacturaUpsertArgs>(args: SelectSubset<T, FacturaUpsertArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Facturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaCountArgs} args - Arguments to filter Facturas to count.
     * @example
     * // Count the number of Facturas
     * const count = await prisma.factura.count({
     *   where: {
     *     // ... the filter for the Facturas we want to count
     *   }
     * })
    **/
    count<T extends FacturaCountArgs>(
      args?: Subset<T, FacturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacturaAggregateArgs>(args: Subset<T, FacturaAggregateArgs>): Prisma.PrismaPromise<GetFacturaAggregateType<T>>

    /**
     * Group by Factura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacturaGroupByArgs['orderBy'] }
        : { orderBy?: FacturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Factura model
   */
  readonly fields: FacturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Factura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    servicios<T extends Factura$serviciosArgs<ExtArgs> = {}>(args?: Subset<T, Factura$serviciosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findMany"> | Null>
    pagos<T extends Factura$pagosArgs<ExtArgs> = {}>(args?: Subset<T, Factura$pagosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Factura model
   */ 
  interface FacturaFieldRefs {
    readonly id: FieldRef<"Factura", 'Int'>
    readonly empresaId: FieldRef<"Factura", 'Int'>
    readonly clienteId: FieldRef<"Factura", 'Int'>
    readonly tipoFactura: FieldRef<"Factura", 'TipoFactura'>
    readonly montoTotal: FieldRef<"Factura", 'Float'>
    readonly saldoPendiente: FieldRef<"Factura", 'Float'>
    readonly fechaEmision: FieldRef<"Factura", 'DateTime'>
    readonly fechaVencimiento: FieldRef<"Factura", 'DateTime'>
    readonly estado: FieldRef<"Factura", 'EstadoFactura'>
    readonly creadoEn: FieldRef<"Factura", 'DateTime'>
    readonly actualizadoEn: FieldRef<"Factura", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Factura findUnique
   */
  export type FacturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura findUniqueOrThrow
   */
  export type FacturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura findFirst
   */
  export type FacturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura findFirstOrThrow
   */
  export type FacturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Factura to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Facturas.
     */
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura findMany
   */
  export type FacturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter, which Facturas to fetch.
     */
    where?: FacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Facturas to fetch.
     */
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Facturas.
     */
    cursor?: FacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Facturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Facturas.
     */
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * Factura create
   */
  export type FacturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The data needed to create a Factura.
     */
    data: XOR<FacturaCreateInput, FacturaUncheckedCreateInput>
  }

  /**
   * Factura createMany
   */
  export type FacturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Facturas.
     */
    data: FacturaCreateManyInput | FacturaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Factura createManyAndReturn
   */
  export type FacturaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Facturas.
     */
    data: FacturaCreateManyInput | FacturaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Factura update
   */
  export type FacturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The data needed to update a Factura.
     */
    data: XOR<FacturaUpdateInput, FacturaUncheckedUpdateInput>
    /**
     * Choose, which Factura to update.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura updateMany
   */
  export type FacturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Facturas.
     */
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyInput>
    /**
     * Filter which Facturas to update
     */
    where?: FacturaWhereInput
  }

  /**
   * Factura upsert
   */
  export type FacturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * The filter to search for the Factura to update in case it exists.
     */
    where: FacturaWhereUniqueInput
    /**
     * In case the Factura found by the `where` argument doesn't exist, create a new Factura with this data.
     */
    create: XOR<FacturaCreateInput, FacturaUncheckedCreateInput>
    /**
     * In case the Factura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacturaUpdateInput, FacturaUncheckedUpdateInput>
  }

  /**
   * Factura delete
   */
  export type FacturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    /**
     * Filter which Factura to delete.
     */
    where: FacturaWhereUniqueInput
  }

  /**
   * Factura deleteMany
   */
  export type FacturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facturas to delete
     */
    where?: FacturaWhereInput
  }

  /**
   * Factura.servicios
   */
  export type Factura$serviciosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    where?: FacturaServicioWhereInput
    orderBy?: FacturaServicioOrderByWithRelationInput | FacturaServicioOrderByWithRelationInput[]
    cursor?: FacturaServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaServicioScalarFieldEnum | FacturaServicioScalarFieldEnum[]
  }

  /**
   * Factura.pagos
   */
  export type Factura$pagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    where?: PagoFacturaWhereInput
    orderBy?: PagoFacturaOrderByWithRelationInput | PagoFacturaOrderByWithRelationInput[]
    cursor?: PagoFacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoFacturaScalarFieldEnum | PagoFacturaScalarFieldEnum[]
  }

  /**
   * Factura without action
   */
  export type FacturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
  }


  /**
   * Model PagoFactura
   */

  export type AggregatePagoFactura = {
    _count: PagoFacturaCountAggregateOutputType | null
    _avg: PagoFacturaAvgAggregateOutputType | null
    _sum: PagoFacturaSumAggregateOutputType | null
    _min: PagoFacturaMinAggregateOutputType | null
    _max: PagoFacturaMaxAggregateOutputType | null
  }

  export type PagoFacturaAvgAggregateOutputType = {
    id: number | null
    facturaId: number | null
    clienteId: number | null
    montoPagado: number | null
  }

  export type PagoFacturaSumAggregateOutputType = {
    id: number | null
    facturaId: number | null
    clienteId: number | null
    montoPagado: number | null
  }

  export type PagoFacturaMinAggregateOutputType = {
    id: number | null
    facturaId: number | null
    clienteId: number | null
    montoPagado: number | null
    metodoPago: $Enums.MetodoPago | null
    fechaPago: Date | null
    creadoEn: Date | null
  }

  export type PagoFacturaMaxAggregateOutputType = {
    id: number | null
    facturaId: number | null
    clienteId: number | null
    montoPagado: number | null
    metodoPago: $Enums.MetodoPago | null
    fechaPago: Date | null
    creadoEn: Date | null
  }

  export type PagoFacturaCountAggregateOutputType = {
    id: number
    facturaId: number
    clienteId: number
    montoPagado: number
    metodoPago: number
    fechaPago: number
    creadoEn: number
    _all: number
  }


  export type PagoFacturaAvgAggregateInputType = {
    id?: true
    facturaId?: true
    clienteId?: true
    montoPagado?: true
  }

  export type PagoFacturaSumAggregateInputType = {
    id?: true
    facturaId?: true
    clienteId?: true
    montoPagado?: true
  }

  export type PagoFacturaMinAggregateInputType = {
    id?: true
    facturaId?: true
    clienteId?: true
    montoPagado?: true
    metodoPago?: true
    fechaPago?: true
    creadoEn?: true
  }

  export type PagoFacturaMaxAggregateInputType = {
    id?: true
    facturaId?: true
    clienteId?: true
    montoPagado?: true
    metodoPago?: true
    fechaPago?: true
    creadoEn?: true
  }

  export type PagoFacturaCountAggregateInputType = {
    id?: true
    facturaId?: true
    clienteId?: true
    montoPagado?: true
    metodoPago?: true
    fechaPago?: true
    creadoEn?: true
    _all?: true
  }

  export type PagoFacturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PagoFactura to aggregate.
     */
    where?: PagoFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturas to fetch.
     */
    orderBy?: PagoFacturaOrderByWithRelationInput | PagoFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagoFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PagoFacturas
    **/
    _count?: true | PagoFacturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagoFacturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagoFacturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagoFacturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagoFacturaMaxAggregateInputType
  }

  export type GetPagoFacturaAggregateType<T extends PagoFacturaAggregateArgs> = {
        [P in keyof T & keyof AggregatePagoFactura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagoFactura[P]>
      : GetScalarType<T[P], AggregatePagoFactura[P]>
  }




  export type PagoFacturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoFacturaWhereInput
    orderBy?: PagoFacturaOrderByWithAggregationInput | PagoFacturaOrderByWithAggregationInput[]
    by: PagoFacturaScalarFieldEnum[] | PagoFacturaScalarFieldEnum
    having?: PagoFacturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagoFacturaCountAggregateInputType | true
    _avg?: PagoFacturaAvgAggregateInputType
    _sum?: PagoFacturaSumAggregateInputType
    _min?: PagoFacturaMinAggregateInputType
    _max?: PagoFacturaMaxAggregateInputType
  }

  export type PagoFacturaGroupByOutputType = {
    id: number
    facturaId: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago: Date
    creadoEn: Date
    _count: PagoFacturaCountAggregateOutputType | null
    _avg: PagoFacturaAvgAggregateOutputType | null
    _sum: PagoFacturaSumAggregateOutputType | null
    _min: PagoFacturaMinAggregateOutputType | null
    _max: PagoFacturaMaxAggregateOutputType | null
  }

  type GetPagoFacturaGroupByPayload<T extends PagoFacturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagoFacturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagoFacturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagoFacturaGroupByOutputType[P]>
            : GetScalarType<T[P], PagoFacturaGroupByOutputType[P]>
        }
      >
    >


  export type PagoFacturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facturaId?: boolean
    clienteId?: boolean
    montoPagado?: boolean
    metodoPago?: boolean
    fechaPago?: boolean
    creadoEn?: boolean
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagoFactura"]>

  export type PagoFacturaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facturaId?: boolean
    clienteId?: boolean
    montoPagado?: boolean
    metodoPago?: boolean
    fechaPago?: boolean
    creadoEn?: boolean
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagoFactura"]>

  export type PagoFacturaSelectScalar = {
    id?: boolean
    facturaId?: boolean
    clienteId?: boolean
    montoPagado?: boolean
    metodoPago?: boolean
    fechaPago?: boolean
    creadoEn?: boolean
  }

  export type PagoFacturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }
  export type PagoFacturaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }

  export type $PagoFacturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PagoFactura"
    objects: {
      factura: Prisma.$FacturaPayload<ExtArgs>
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      facturaId: number
      clienteId: number
      montoPagado: number
      metodoPago: $Enums.MetodoPago
      fechaPago: Date
      creadoEn: Date
    }, ExtArgs["result"]["pagoFactura"]>
    composites: {}
  }

  type PagoFacturaGetPayload<S extends boolean | null | undefined | PagoFacturaDefaultArgs> = $Result.GetResult<Prisma.$PagoFacturaPayload, S>

  type PagoFacturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PagoFacturaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PagoFacturaCountAggregateInputType | true
    }

  export interface PagoFacturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PagoFactura'], meta: { name: 'PagoFactura' } }
    /**
     * Find zero or one PagoFactura that matches the filter.
     * @param {PagoFacturaFindUniqueArgs} args - Arguments to find a PagoFactura
     * @example
     * // Get one PagoFactura
     * const pagoFactura = await prisma.pagoFactura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PagoFacturaFindUniqueArgs>(args: SelectSubset<T, PagoFacturaFindUniqueArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PagoFactura that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PagoFacturaFindUniqueOrThrowArgs} args - Arguments to find a PagoFactura
     * @example
     * // Get one PagoFactura
     * const pagoFactura = await prisma.pagoFactura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PagoFacturaFindUniqueOrThrowArgs>(args: SelectSubset<T, PagoFacturaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PagoFactura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaFindFirstArgs} args - Arguments to find a PagoFactura
     * @example
     * // Get one PagoFactura
     * const pagoFactura = await prisma.pagoFactura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PagoFacturaFindFirstArgs>(args?: SelectSubset<T, PagoFacturaFindFirstArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PagoFactura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaFindFirstOrThrowArgs} args - Arguments to find a PagoFactura
     * @example
     * // Get one PagoFactura
     * const pagoFactura = await prisma.pagoFactura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PagoFacturaFindFirstOrThrowArgs>(args?: SelectSubset<T, PagoFacturaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PagoFacturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PagoFacturas
     * const pagoFacturas = await prisma.pagoFactura.findMany()
     * 
     * // Get first 10 PagoFacturas
     * const pagoFacturas = await prisma.pagoFactura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagoFacturaWithIdOnly = await prisma.pagoFactura.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PagoFacturaFindManyArgs>(args?: SelectSubset<T, PagoFacturaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PagoFactura.
     * @param {PagoFacturaCreateArgs} args - Arguments to create a PagoFactura.
     * @example
     * // Create one PagoFactura
     * const PagoFactura = await prisma.pagoFactura.create({
     *   data: {
     *     // ... data to create a PagoFactura
     *   }
     * })
     * 
     */
    create<T extends PagoFacturaCreateArgs>(args: SelectSubset<T, PagoFacturaCreateArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PagoFacturas.
     * @param {PagoFacturaCreateManyArgs} args - Arguments to create many PagoFacturas.
     * @example
     * // Create many PagoFacturas
     * const pagoFactura = await prisma.pagoFactura.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PagoFacturaCreateManyArgs>(args?: SelectSubset<T, PagoFacturaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PagoFacturas and returns the data saved in the database.
     * @param {PagoFacturaCreateManyAndReturnArgs} args - Arguments to create many PagoFacturas.
     * @example
     * // Create many PagoFacturas
     * const pagoFactura = await prisma.pagoFactura.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PagoFacturas and only return the `id`
     * const pagoFacturaWithIdOnly = await prisma.pagoFactura.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PagoFacturaCreateManyAndReturnArgs>(args?: SelectSubset<T, PagoFacturaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PagoFactura.
     * @param {PagoFacturaDeleteArgs} args - Arguments to delete one PagoFactura.
     * @example
     * // Delete one PagoFactura
     * const PagoFactura = await prisma.pagoFactura.delete({
     *   where: {
     *     // ... filter to delete one PagoFactura
     *   }
     * })
     * 
     */
    delete<T extends PagoFacturaDeleteArgs>(args: SelectSubset<T, PagoFacturaDeleteArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PagoFactura.
     * @param {PagoFacturaUpdateArgs} args - Arguments to update one PagoFactura.
     * @example
     * // Update one PagoFactura
     * const pagoFactura = await prisma.pagoFactura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PagoFacturaUpdateArgs>(args: SelectSubset<T, PagoFacturaUpdateArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PagoFacturas.
     * @param {PagoFacturaDeleteManyArgs} args - Arguments to filter PagoFacturas to delete.
     * @example
     * // Delete a few PagoFacturas
     * const { count } = await prisma.pagoFactura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PagoFacturaDeleteManyArgs>(args?: SelectSubset<T, PagoFacturaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PagoFacturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PagoFacturas
     * const pagoFactura = await prisma.pagoFactura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PagoFacturaUpdateManyArgs>(args: SelectSubset<T, PagoFacturaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PagoFactura.
     * @param {PagoFacturaUpsertArgs} args - Arguments to update or create a PagoFactura.
     * @example
     * // Update or create a PagoFactura
     * const pagoFactura = await prisma.pagoFactura.upsert({
     *   create: {
     *     // ... data to create a PagoFactura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PagoFactura we want to update
     *   }
     * })
     */
    upsert<T extends PagoFacturaUpsertArgs>(args: SelectSubset<T, PagoFacturaUpsertArgs<ExtArgs>>): Prisma__PagoFacturaClient<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PagoFacturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaCountArgs} args - Arguments to filter PagoFacturas to count.
     * @example
     * // Count the number of PagoFacturas
     * const count = await prisma.pagoFactura.count({
     *   where: {
     *     // ... the filter for the PagoFacturas we want to count
     *   }
     * })
    **/
    count<T extends PagoFacturaCountArgs>(
      args?: Subset<T, PagoFacturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagoFacturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PagoFactura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagoFacturaAggregateArgs>(args: Subset<T, PagoFacturaAggregateArgs>): Prisma.PrismaPromise<GetPagoFacturaAggregateType<T>>

    /**
     * Group by PagoFactura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagoFacturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagoFacturaGroupByArgs['orderBy'] }
        : { orderBy?: PagoFacturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagoFacturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagoFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PagoFactura model
   */
  readonly fields: PagoFacturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PagoFactura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PagoFacturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    factura<T extends FacturaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FacturaDefaultArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PagoFactura model
   */ 
  interface PagoFacturaFieldRefs {
    readonly id: FieldRef<"PagoFactura", 'Int'>
    readonly facturaId: FieldRef<"PagoFactura", 'Int'>
    readonly clienteId: FieldRef<"PagoFactura", 'Int'>
    readonly montoPagado: FieldRef<"PagoFactura", 'Float'>
    readonly metodoPago: FieldRef<"PagoFactura", 'MetodoPago'>
    readonly fechaPago: FieldRef<"PagoFactura", 'DateTime'>
    readonly creadoEn: FieldRef<"PagoFactura", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PagoFactura findUnique
   */
  export type PagoFacturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * Filter, which PagoFactura to fetch.
     */
    where: PagoFacturaWhereUniqueInput
  }

  /**
   * PagoFactura findUniqueOrThrow
   */
  export type PagoFacturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * Filter, which PagoFactura to fetch.
     */
    where: PagoFacturaWhereUniqueInput
  }

  /**
   * PagoFactura findFirst
   */
  export type PagoFacturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * Filter, which PagoFactura to fetch.
     */
    where?: PagoFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturas to fetch.
     */
    orderBy?: PagoFacturaOrderByWithRelationInput | PagoFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PagoFacturas.
     */
    cursor?: PagoFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PagoFacturas.
     */
    distinct?: PagoFacturaScalarFieldEnum | PagoFacturaScalarFieldEnum[]
  }

  /**
   * PagoFactura findFirstOrThrow
   */
  export type PagoFacturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * Filter, which PagoFactura to fetch.
     */
    where?: PagoFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturas to fetch.
     */
    orderBy?: PagoFacturaOrderByWithRelationInput | PagoFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PagoFacturas.
     */
    cursor?: PagoFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PagoFacturas.
     */
    distinct?: PagoFacturaScalarFieldEnum | PagoFacturaScalarFieldEnum[]
  }

  /**
   * PagoFactura findMany
   */
  export type PagoFacturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * Filter, which PagoFacturas to fetch.
     */
    where?: PagoFacturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturas to fetch.
     */
    orderBy?: PagoFacturaOrderByWithRelationInput | PagoFacturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PagoFacturas.
     */
    cursor?: PagoFacturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturas.
     */
    skip?: number
    distinct?: PagoFacturaScalarFieldEnum | PagoFacturaScalarFieldEnum[]
  }

  /**
   * PagoFactura create
   */
  export type PagoFacturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * The data needed to create a PagoFactura.
     */
    data: XOR<PagoFacturaCreateInput, PagoFacturaUncheckedCreateInput>
  }

  /**
   * PagoFactura createMany
   */
  export type PagoFacturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PagoFacturas.
     */
    data: PagoFacturaCreateManyInput | PagoFacturaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PagoFactura createManyAndReturn
   */
  export type PagoFacturaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PagoFacturas.
     */
    data: PagoFacturaCreateManyInput | PagoFacturaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PagoFactura update
   */
  export type PagoFacturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * The data needed to update a PagoFactura.
     */
    data: XOR<PagoFacturaUpdateInput, PagoFacturaUncheckedUpdateInput>
    /**
     * Choose, which PagoFactura to update.
     */
    where: PagoFacturaWhereUniqueInput
  }

  /**
   * PagoFactura updateMany
   */
  export type PagoFacturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PagoFacturas.
     */
    data: XOR<PagoFacturaUpdateManyMutationInput, PagoFacturaUncheckedUpdateManyInput>
    /**
     * Filter which PagoFacturas to update
     */
    where?: PagoFacturaWhereInput
  }

  /**
   * PagoFactura upsert
   */
  export type PagoFacturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * The filter to search for the PagoFactura to update in case it exists.
     */
    where: PagoFacturaWhereUniqueInput
    /**
     * In case the PagoFactura found by the `where` argument doesn't exist, create a new PagoFactura with this data.
     */
    create: XOR<PagoFacturaCreateInput, PagoFacturaUncheckedCreateInput>
    /**
     * In case the PagoFactura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagoFacturaUpdateInput, PagoFacturaUncheckedUpdateInput>
  }

  /**
   * PagoFactura delete
   */
  export type PagoFacturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    /**
     * Filter which PagoFactura to delete.
     */
    where: PagoFacturaWhereUniqueInput
  }

  /**
   * PagoFactura deleteMany
   */
  export type PagoFacturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PagoFacturas to delete
     */
    where?: PagoFacturaWhereInput
  }

  /**
   * PagoFactura without action
   */
  export type PagoFacturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
  }


  /**
   * Model FacturaInternet
   */

  export type AggregateFacturaInternet = {
    _count: FacturaInternetCountAggregateOutputType | null
    _avg: FacturaInternetAvgAggregateOutputType | null
    _sum: FacturaInternetSumAggregateOutputType | null
    _min: FacturaInternetMinAggregateOutputType | null
    _max: FacturaInternetMaxAggregateOutputType | null
  }

  export type FacturaInternetAvgAggregateOutputType = {
    id: number | null
    montoPago: number | null
    saldoPendiente: number | null
    empresaId: number | null
    clienteId: number | null
  }

  export type FacturaInternetSumAggregateOutputType = {
    id: number | null
    montoPago: number | null
    saldoPendiente: number | null
    empresaId: number | null
    clienteId: number | null
  }

  export type FacturaInternetMinAggregateOutputType = {
    id: number | null
    fechaPagoEsperada: Date | null
    fechaPagada: Date | null
    montoPago: number | null
    saldoPendiente: number | null
    empresaId: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet | null
    clienteId: number | null
    estadoFacturaInternet: $Enums.EstadoFacturaInternet | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FacturaInternetMaxAggregateOutputType = {
    id: number | null
    fechaPagoEsperada: Date | null
    fechaPagada: Date | null
    montoPago: number | null
    saldoPendiente: number | null
    empresaId: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet | null
    clienteId: number | null
    estadoFacturaInternet: $Enums.EstadoFacturaInternet | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FacturaInternetCountAggregateOutputType = {
    id: number
    fechaPagoEsperada: number
    fechaPagada: number
    montoPago: number
    saldoPendiente: number
    empresaId: number
    metodoPago: number
    clienteId: number
    estadoFacturaInternet: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type FacturaInternetAvgAggregateInputType = {
    id?: true
    montoPago?: true
    saldoPendiente?: true
    empresaId?: true
    clienteId?: true
  }

  export type FacturaInternetSumAggregateInputType = {
    id?: true
    montoPago?: true
    saldoPendiente?: true
    empresaId?: true
    clienteId?: true
  }

  export type FacturaInternetMinAggregateInputType = {
    id?: true
    fechaPagoEsperada?: true
    fechaPagada?: true
    montoPago?: true
    saldoPendiente?: true
    empresaId?: true
    metodoPago?: true
    clienteId?: true
    estadoFacturaInternet?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FacturaInternetMaxAggregateInputType = {
    id?: true
    fechaPagoEsperada?: true
    fechaPagada?: true
    montoPago?: true
    saldoPendiente?: true
    empresaId?: true
    metodoPago?: true
    clienteId?: true
    estadoFacturaInternet?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FacturaInternetCountAggregateInputType = {
    id?: true
    fechaPagoEsperada?: true
    fechaPagada?: true
    montoPago?: true
    saldoPendiente?: true
    empresaId?: true
    metodoPago?: true
    clienteId?: true
    estadoFacturaInternet?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type FacturaInternetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacturaInternet to aggregate.
     */
    where?: FacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaInternets to fetch.
     */
    orderBy?: FacturaInternetOrderByWithRelationInput | FacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacturaInternets
    **/
    _count?: true | FacturaInternetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacturaInternetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacturaInternetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacturaInternetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacturaInternetMaxAggregateInputType
  }

  export type GetFacturaInternetAggregateType<T extends FacturaInternetAggregateArgs> = {
        [P in keyof T & keyof AggregateFacturaInternet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacturaInternet[P]>
      : GetScalarType<T[P], AggregateFacturaInternet[P]>
  }




  export type FacturaInternetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaInternetWhereInput
    orderBy?: FacturaInternetOrderByWithAggregationInput | FacturaInternetOrderByWithAggregationInput[]
    by: FacturaInternetScalarFieldEnum[] | FacturaInternetScalarFieldEnum
    having?: FacturaInternetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacturaInternetCountAggregateInputType | true
    _avg?: FacturaInternetAvgAggregateInputType
    _sum?: FacturaInternetSumAggregateInputType
    _min?: FacturaInternetMinAggregateInputType
    _max?: FacturaInternetMaxAggregateInputType
  }

  export type FacturaInternetGroupByOutputType = {
    id: number
    fechaPagoEsperada: Date | null
    fechaPagada: Date | null
    montoPago: number | null
    saldoPendiente: number | null
    empresaId: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    clienteId: number
    estadoFacturaInternet: $Enums.EstadoFacturaInternet
    creadoEn: Date
    actualizadoEn: Date
    _count: FacturaInternetCountAggregateOutputType | null
    _avg: FacturaInternetAvgAggregateOutputType | null
    _sum: FacturaInternetSumAggregateOutputType | null
    _min: FacturaInternetMinAggregateOutputType | null
    _max: FacturaInternetMaxAggregateOutputType | null
  }

  type GetFacturaInternetGroupByPayload<T extends FacturaInternetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacturaInternetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacturaInternetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacturaInternetGroupByOutputType[P]>
            : GetScalarType<T[P], FacturaInternetGroupByOutputType[P]>
        }
      >
    >


  export type FacturaInternetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaPagoEsperada?: boolean
    fechaPagada?: boolean
    montoPago?: boolean
    saldoPendiente?: boolean
    empresaId?: boolean
    metodoPago?: boolean
    clienteId?: boolean
    estadoFacturaInternet?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    pagos?: boolean | FacturaInternet$pagosArgs<ExtArgs>
    _count?: boolean | FacturaInternetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facturaInternet"]>

  export type FacturaInternetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaPagoEsperada?: boolean
    fechaPagada?: boolean
    montoPago?: boolean
    saldoPendiente?: boolean
    empresaId?: boolean
    metodoPago?: boolean
    clienteId?: boolean
    estadoFacturaInternet?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facturaInternet"]>

  export type FacturaInternetSelectScalar = {
    id?: boolean
    fechaPagoEsperada?: boolean
    fechaPagada?: boolean
    montoPago?: boolean
    saldoPendiente?: boolean
    empresaId?: boolean
    metodoPago?: boolean
    clienteId?: boolean
    estadoFacturaInternet?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type FacturaInternetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    pagos?: boolean | FacturaInternet$pagosArgs<ExtArgs>
    _count?: boolean | FacturaInternetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FacturaInternetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }

  export type $FacturaInternetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FacturaInternet"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
      pagos: Prisma.$PagoFacturaInternetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fechaPagoEsperada: Date | null
      fechaPagada: Date | null
      montoPago: number | null
      saldoPendiente: number | null
      empresaId: number
      metodoPago: $Enums.MetodoPagoFacturaInternet
      clienteId: number
      estadoFacturaInternet: $Enums.EstadoFacturaInternet
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["facturaInternet"]>
    composites: {}
  }

  type FacturaInternetGetPayload<S extends boolean | null | undefined | FacturaInternetDefaultArgs> = $Result.GetResult<Prisma.$FacturaInternetPayload, S>

  type FacturaInternetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacturaInternetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacturaInternetCountAggregateInputType | true
    }

  export interface FacturaInternetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacturaInternet'], meta: { name: 'FacturaInternet' } }
    /**
     * Find zero or one FacturaInternet that matches the filter.
     * @param {FacturaInternetFindUniqueArgs} args - Arguments to find a FacturaInternet
     * @example
     * // Get one FacturaInternet
     * const facturaInternet = await prisma.facturaInternet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacturaInternetFindUniqueArgs>(args: SelectSubset<T, FacturaInternetFindUniqueArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FacturaInternet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FacturaInternetFindUniqueOrThrowArgs} args - Arguments to find a FacturaInternet
     * @example
     * // Get one FacturaInternet
     * const facturaInternet = await prisma.facturaInternet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacturaInternetFindUniqueOrThrowArgs>(args: SelectSubset<T, FacturaInternetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FacturaInternet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetFindFirstArgs} args - Arguments to find a FacturaInternet
     * @example
     * // Get one FacturaInternet
     * const facturaInternet = await prisma.facturaInternet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacturaInternetFindFirstArgs>(args?: SelectSubset<T, FacturaInternetFindFirstArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FacturaInternet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetFindFirstOrThrowArgs} args - Arguments to find a FacturaInternet
     * @example
     * // Get one FacturaInternet
     * const facturaInternet = await prisma.facturaInternet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacturaInternetFindFirstOrThrowArgs>(args?: SelectSubset<T, FacturaInternetFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FacturaInternets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacturaInternets
     * const facturaInternets = await prisma.facturaInternet.findMany()
     * 
     * // Get first 10 FacturaInternets
     * const facturaInternets = await prisma.facturaInternet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facturaInternetWithIdOnly = await prisma.facturaInternet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacturaInternetFindManyArgs>(args?: SelectSubset<T, FacturaInternetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FacturaInternet.
     * @param {FacturaInternetCreateArgs} args - Arguments to create a FacturaInternet.
     * @example
     * // Create one FacturaInternet
     * const FacturaInternet = await prisma.facturaInternet.create({
     *   data: {
     *     // ... data to create a FacturaInternet
     *   }
     * })
     * 
     */
    create<T extends FacturaInternetCreateArgs>(args: SelectSubset<T, FacturaInternetCreateArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FacturaInternets.
     * @param {FacturaInternetCreateManyArgs} args - Arguments to create many FacturaInternets.
     * @example
     * // Create many FacturaInternets
     * const facturaInternet = await prisma.facturaInternet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacturaInternetCreateManyArgs>(args?: SelectSubset<T, FacturaInternetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FacturaInternets and returns the data saved in the database.
     * @param {FacturaInternetCreateManyAndReturnArgs} args - Arguments to create many FacturaInternets.
     * @example
     * // Create many FacturaInternets
     * const facturaInternet = await prisma.facturaInternet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FacturaInternets and only return the `id`
     * const facturaInternetWithIdOnly = await prisma.facturaInternet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacturaInternetCreateManyAndReturnArgs>(args?: SelectSubset<T, FacturaInternetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FacturaInternet.
     * @param {FacturaInternetDeleteArgs} args - Arguments to delete one FacturaInternet.
     * @example
     * // Delete one FacturaInternet
     * const FacturaInternet = await prisma.facturaInternet.delete({
     *   where: {
     *     // ... filter to delete one FacturaInternet
     *   }
     * })
     * 
     */
    delete<T extends FacturaInternetDeleteArgs>(args: SelectSubset<T, FacturaInternetDeleteArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FacturaInternet.
     * @param {FacturaInternetUpdateArgs} args - Arguments to update one FacturaInternet.
     * @example
     * // Update one FacturaInternet
     * const facturaInternet = await prisma.facturaInternet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacturaInternetUpdateArgs>(args: SelectSubset<T, FacturaInternetUpdateArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FacturaInternets.
     * @param {FacturaInternetDeleteManyArgs} args - Arguments to filter FacturaInternets to delete.
     * @example
     * // Delete a few FacturaInternets
     * const { count } = await prisma.facturaInternet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacturaInternetDeleteManyArgs>(args?: SelectSubset<T, FacturaInternetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacturaInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacturaInternets
     * const facturaInternet = await prisma.facturaInternet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacturaInternetUpdateManyArgs>(args: SelectSubset<T, FacturaInternetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacturaInternet.
     * @param {FacturaInternetUpsertArgs} args - Arguments to update or create a FacturaInternet.
     * @example
     * // Update or create a FacturaInternet
     * const facturaInternet = await prisma.facturaInternet.upsert({
     *   create: {
     *     // ... data to create a FacturaInternet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacturaInternet we want to update
     *   }
     * })
     */
    upsert<T extends FacturaInternetUpsertArgs>(args: SelectSubset<T, FacturaInternetUpsertArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FacturaInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetCountArgs} args - Arguments to filter FacturaInternets to count.
     * @example
     * // Count the number of FacturaInternets
     * const count = await prisma.facturaInternet.count({
     *   where: {
     *     // ... the filter for the FacturaInternets we want to count
     *   }
     * })
    **/
    count<T extends FacturaInternetCountArgs>(
      args?: Subset<T, FacturaInternetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacturaInternetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacturaInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacturaInternetAggregateArgs>(args: Subset<T, FacturaInternetAggregateArgs>): Prisma.PrismaPromise<GetFacturaInternetAggregateType<T>>

    /**
     * Group by FacturaInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaInternetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacturaInternetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacturaInternetGroupByArgs['orderBy'] }
        : { orderBy?: FacturaInternetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacturaInternetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaInternetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacturaInternet model
   */
  readonly fields: FacturaInternetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacturaInternet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacturaInternetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    pagos<T extends FacturaInternet$pagosArgs<ExtArgs> = {}>(args?: Subset<T, FacturaInternet$pagosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FacturaInternet model
   */ 
  interface FacturaInternetFieldRefs {
    readonly id: FieldRef<"FacturaInternet", 'Int'>
    readonly fechaPagoEsperada: FieldRef<"FacturaInternet", 'DateTime'>
    readonly fechaPagada: FieldRef<"FacturaInternet", 'DateTime'>
    readonly montoPago: FieldRef<"FacturaInternet", 'Float'>
    readonly saldoPendiente: FieldRef<"FacturaInternet", 'Float'>
    readonly empresaId: FieldRef<"FacturaInternet", 'Int'>
    readonly metodoPago: FieldRef<"FacturaInternet", 'MetodoPagoFacturaInternet'>
    readonly clienteId: FieldRef<"FacturaInternet", 'Int'>
    readonly estadoFacturaInternet: FieldRef<"FacturaInternet", 'EstadoFacturaInternet'>
    readonly creadoEn: FieldRef<"FacturaInternet", 'DateTime'>
    readonly actualizadoEn: FieldRef<"FacturaInternet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FacturaInternet findUnique
   */
  export type FacturaInternetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which FacturaInternet to fetch.
     */
    where: FacturaInternetWhereUniqueInput
  }

  /**
   * FacturaInternet findUniqueOrThrow
   */
  export type FacturaInternetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which FacturaInternet to fetch.
     */
    where: FacturaInternetWhereUniqueInput
  }

  /**
   * FacturaInternet findFirst
   */
  export type FacturaInternetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which FacturaInternet to fetch.
     */
    where?: FacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaInternets to fetch.
     */
    orderBy?: FacturaInternetOrderByWithRelationInput | FacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacturaInternets.
     */
    cursor?: FacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacturaInternets.
     */
    distinct?: FacturaInternetScalarFieldEnum | FacturaInternetScalarFieldEnum[]
  }

  /**
   * FacturaInternet findFirstOrThrow
   */
  export type FacturaInternetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which FacturaInternet to fetch.
     */
    where?: FacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaInternets to fetch.
     */
    orderBy?: FacturaInternetOrderByWithRelationInput | FacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacturaInternets.
     */
    cursor?: FacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacturaInternets.
     */
    distinct?: FacturaInternetScalarFieldEnum | FacturaInternetScalarFieldEnum[]
  }

  /**
   * FacturaInternet findMany
   */
  export type FacturaInternetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which FacturaInternets to fetch.
     */
    where?: FacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaInternets to fetch.
     */
    orderBy?: FacturaInternetOrderByWithRelationInput | FacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacturaInternets.
     */
    cursor?: FacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaInternets.
     */
    skip?: number
    distinct?: FacturaInternetScalarFieldEnum | FacturaInternetScalarFieldEnum[]
  }

  /**
   * FacturaInternet create
   */
  export type FacturaInternetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * The data needed to create a FacturaInternet.
     */
    data: XOR<FacturaInternetCreateInput, FacturaInternetUncheckedCreateInput>
  }

  /**
   * FacturaInternet createMany
   */
  export type FacturaInternetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FacturaInternets.
     */
    data: FacturaInternetCreateManyInput | FacturaInternetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacturaInternet createManyAndReturn
   */
  export type FacturaInternetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FacturaInternets.
     */
    data: FacturaInternetCreateManyInput | FacturaInternetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FacturaInternet update
   */
  export type FacturaInternetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * The data needed to update a FacturaInternet.
     */
    data: XOR<FacturaInternetUpdateInput, FacturaInternetUncheckedUpdateInput>
    /**
     * Choose, which FacturaInternet to update.
     */
    where: FacturaInternetWhereUniqueInput
  }

  /**
   * FacturaInternet updateMany
   */
  export type FacturaInternetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacturaInternets.
     */
    data: XOR<FacturaInternetUpdateManyMutationInput, FacturaInternetUncheckedUpdateManyInput>
    /**
     * Filter which FacturaInternets to update
     */
    where?: FacturaInternetWhereInput
  }

  /**
   * FacturaInternet upsert
   */
  export type FacturaInternetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * The filter to search for the FacturaInternet to update in case it exists.
     */
    where: FacturaInternetWhereUniqueInput
    /**
     * In case the FacturaInternet found by the `where` argument doesn't exist, create a new FacturaInternet with this data.
     */
    create: XOR<FacturaInternetCreateInput, FacturaInternetUncheckedCreateInput>
    /**
     * In case the FacturaInternet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacturaInternetUpdateInput, FacturaInternetUncheckedUpdateInput>
  }

  /**
   * FacturaInternet delete
   */
  export type FacturaInternetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    /**
     * Filter which FacturaInternet to delete.
     */
    where: FacturaInternetWhereUniqueInput
  }

  /**
   * FacturaInternet deleteMany
   */
  export type FacturaInternetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacturaInternets to delete
     */
    where?: FacturaInternetWhereInput
  }

  /**
   * FacturaInternet.pagos
   */
  export type FacturaInternet$pagosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    where?: PagoFacturaInternetWhereInput
    orderBy?: PagoFacturaInternetOrderByWithRelationInput | PagoFacturaInternetOrderByWithRelationInput[]
    cursor?: PagoFacturaInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoFacturaInternetScalarFieldEnum | PagoFacturaInternetScalarFieldEnum[]
  }

  /**
   * FacturaInternet without action
   */
  export type FacturaInternetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
  }


  /**
   * Model PagoFacturaInternet
   */

  export type AggregatePagoFacturaInternet = {
    _count: PagoFacturaInternetCountAggregateOutputType | null
    _avg: PagoFacturaInternetAvgAggregateOutputType | null
    _sum: PagoFacturaInternetSumAggregateOutputType | null
    _min: PagoFacturaInternetMinAggregateOutputType | null
    _max: PagoFacturaInternetMaxAggregateOutputType | null
  }

  export type PagoFacturaInternetAvgAggregateOutputType = {
    id: number | null
    facturaInternetId: number | null
    clienteId: number | null
    montoPagado: number | null
  }

  export type PagoFacturaInternetSumAggregateOutputType = {
    id: number | null
    facturaInternetId: number | null
    clienteId: number | null
    montoPagado: number | null
  }

  export type PagoFacturaInternetMinAggregateOutputType = {
    id: number | null
    facturaInternetId: number | null
    clienteId: number | null
    montoPagado: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet | null
    fechaPago: Date | null
    creadoEn: Date | null
  }

  export type PagoFacturaInternetMaxAggregateOutputType = {
    id: number | null
    facturaInternetId: number | null
    clienteId: number | null
    montoPagado: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet | null
    fechaPago: Date | null
    creadoEn: Date | null
  }

  export type PagoFacturaInternetCountAggregateOutputType = {
    id: number
    facturaInternetId: number
    clienteId: number
    montoPagado: number
    metodoPago: number
    fechaPago: number
    creadoEn: number
    _all: number
  }


  export type PagoFacturaInternetAvgAggregateInputType = {
    id?: true
    facturaInternetId?: true
    clienteId?: true
    montoPagado?: true
  }

  export type PagoFacturaInternetSumAggregateInputType = {
    id?: true
    facturaInternetId?: true
    clienteId?: true
    montoPagado?: true
  }

  export type PagoFacturaInternetMinAggregateInputType = {
    id?: true
    facturaInternetId?: true
    clienteId?: true
    montoPagado?: true
    metodoPago?: true
    fechaPago?: true
    creadoEn?: true
  }

  export type PagoFacturaInternetMaxAggregateInputType = {
    id?: true
    facturaInternetId?: true
    clienteId?: true
    montoPagado?: true
    metodoPago?: true
    fechaPago?: true
    creadoEn?: true
  }

  export type PagoFacturaInternetCountAggregateInputType = {
    id?: true
    facturaInternetId?: true
    clienteId?: true
    montoPagado?: true
    metodoPago?: true
    fechaPago?: true
    creadoEn?: true
    _all?: true
  }

  export type PagoFacturaInternetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PagoFacturaInternet to aggregate.
     */
    where?: PagoFacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturaInternets to fetch.
     */
    orderBy?: PagoFacturaInternetOrderByWithRelationInput | PagoFacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagoFacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturaInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PagoFacturaInternets
    **/
    _count?: true | PagoFacturaInternetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagoFacturaInternetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagoFacturaInternetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagoFacturaInternetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagoFacturaInternetMaxAggregateInputType
  }

  export type GetPagoFacturaInternetAggregateType<T extends PagoFacturaInternetAggregateArgs> = {
        [P in keyof T & keyof AggregatePagoFacturaInternet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagoFacturaInternet[P]>
      : GetScalarType<T[P], AggregatePagoFacturaInternet[P]>
  }




  export type PagoFacturaInternetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PagoFacturaInternetWhereInput
    orderBy?: PagoFacturaInternetOrderByWithAggregationInput | PagoFacturaInternetOrderByWithAggregationInput[]
    by: PagoFacturaInternetScalarFieldEnum[] | PagoFacturaInternetScalarFieldEnum
    having?: PagoFacturaInternetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagoFacturaInternetCountAggregateInputType | true
    _avg?: PagoFacturaInternetAvgAggregateInputType
    _sum?: PagoFacturaInternetSumAggregateInputType
    _min?: PagoFacturaInternetMinAggregateInputType
    _max?: PagoFacturaInternetMaxAggregateInputType
  }

  export type PagoFacturaInternetGroupByOutputType = {
    id: number
    facturaInternetId: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago: Date
    creadoEn: Date
    _count: PagoFacturaInternetCountAggregateOutputType | null
    _avg: PagoFacturaInternetAvgAggregateOutputType | null
    _sum: PagoFacturaInternetSumAggregateOutputType | null
    _min: PagoFacturaInternetMinAggregateOutputType | null
    _max: PagoFacturaInternetMaxAggregateOutputType | null
  }

  type GetPagoFacturaInternetGroupByPayload<T extends PagoFacturaInternetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagoFacturaInternetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagoFacturaInternetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagoFacturaInternetGroupByOutputType[P]>
            : GetScalarType<T[P], PagoFacturaInternetGroupByOutputType[P]>
        }
      >
    >


  export type PagoFacturaInternetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facturaInternetId?: boolean
    clienteId?: boolean
    montoPagado?: boolean
    metodoPago?: boolean
    fechaPago?: boolean
    creadoEn?: boolean
    facturaInternet?: boolean | FacturaInternetDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagoFacturaInternet"]>

  export type PagoFacturaInternetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facturaInternetId?: boolean
    clienteId?: boolean
    montoPagado?: boolean
    metodoPago?: boolean
    fechaPago?: boolean
    creadoEn?: boolean
    facturaInternet?: boolean | FacturaInternetDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pagoFacturaInternet"]>

  export type PagoFacturaInternetSelectScalar = {
    id?: boolean
    facturaInternetId?: boolean
    clienteId?: boolean
    montoPagado?: boolean
    metodoPago?: boolean
    fechaPago?: boolean
    creadoEn?: boolean
  }

  export type PagoFacturaInternetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facturaInternet?: boolean | FacturaInternetDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }
  export type PagoFacturaInternetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facturaInternet?: boolean | FacturaInternetDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }

  export type $PagoFacturaInternetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PagoFacturaInternet"
    objects: {
      facturaInternet: Prisma.$FacturaInternetPayload<ExtArgs>
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      facturaInternetId: number
      clienteId: number
      montoPagado: number
      metodoPago: $Enums.MetodoPagoFacturaInternet
      fechaPago: Date
      creadoEn: Date
    }, ExtArgs["result"]["pagoFacturaInternet"]>
    composites: {}
  }

  type PagoFacturaInternetGetPayload<S extends boolean | null | undefined | PagoFacturaInternetDefaultArgs> = $Result.GetResult<Prisma.$PagoFacturaInternetPayload, S>

  type PagoFacturaInternetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PagoFacturaInternetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PagoFacturaInternetCountAggregateInputType | true
    }

  export interface PagoFacturaInternetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PagoFacturaInternet'], meta: { name: 'PagoFacturaInternet' } }
    /**
     * Find zero or one PagoFacturaInternet that matches the filter.
     * @param {PagoFacturaInternetFindUniqueArgs} args - Arguments to find a PagoFacturaInternet
     * @example
     * // Get one PagoFacturaInternet
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PagoFacturaInternetFindUniqueArgs>(args: SelectSubset<T, PagoFacturaInternetFindUniqueArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PagoFacturaInternet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PagoFacturaInternetFindUniqueOrThrowArgs} args - Arguments to find a PagoFacturaInternet
     * @example
     * // Get one PagoFacturaInternet
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PagoFacturaInternetFindUniqueOrThrowArgs>(args: SelectSubset<T, PagoFacturaInternetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PagoFacturaInternet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetFindFirstArgs} args - Arguments to find a PagoFacturaInternet
     * @example
     * // Get one PagoFacturaInternet
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PagoFacturaInternetFindFirstArgs>(args?: SelectSubset<T, PagoFacturaInternetFindFirstArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PagoFacturaInternet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetFindFirstOrThrowArgs} args - Arguments to find a PagoFacturaInternet
     * @example
     * // Get one PagoFacturaInternet
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PagoFacturaInternetFindFirstOrThrowArgs>(args?: SelectSubset<T, PagoFacturaInternetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PagoFacturaInternets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PagoFacturaInternets
     * const pagoFacturaInternets = await prisma.pagoFacturaInternet.findMany()
     * 
     * // Get first 10 PagoFacturaInternets
     * const pagoFacturaInternets = await prisma.pagoFacturaInternet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagoFacturaInternetWithIdOnly = await prisma.pagoFacturaInternet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PagoFacturaInternetFindManyArgs>(args?: SelectSubset<T, PagoFacturaInternetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PagoFacturaInternet.
     * @param {PagoFacturaInternetCreateArgs} args - Arguments to create a PagoFacturaInternet.
     * @example
     * // Create one PagoFacturaInternet
     * const PagoFacturaInternet = await prisma.pagoFacturaInternet.create({
     *   data: {
     *     // ... data to create a PagoFacturaInternet
     *   }
     * })
     * 
     */
    create<T extends PagoFacturaInternetCreateArgs>(args: SelectSubset<T, PagoFacturaInternetCreateArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PagoFacturaInternets.
     * @param {PagoFacturaInternetCreateManyArgs} args - Arguments to create many PagoFacturaInternets.
     * @example
     * // Create many PagoFacturaInternets
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PagoFacturaInternetCreateManyArgs>(args?: SelectSubset<T, PagoFacturaInternetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PagoFacturaInternets and returns the data saved in the database.
     * @param {PagoFacturaInternetCreateManyAndReturnArgs} args - Arguments to create many PagoFacturaInternets.
     * @example
     * // Create many PagoFacturaInternets
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PagoFacturaInternets and only return the `id`
     * const pagoFacturaInternetWithIdOnly = await prisma.pagoFacturaInternet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PagoFacturaInternetCreateManyAndReturnArgs>(args?: SelectSubset<T, PagoFacturaInternetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PagoFacturaInternet.
     * @param {PagoFacturaInternetDeleteArgs} args - Arguments to delete one PagoFacturaInternet.
     * @example
     * // Delete one PagoFacturaInternet
     * const PagoFacturaInternet = await prisma.pagoFacturaInternet.delete({
     *   where: {
     *     // ... filter to delete one PagoFacturaInternet
     *   }
     * })
     * 
     */
    delete<T extends PagoFacturaInternetDeleteArgs>(args: SelectSubset<T, PagoFacturaInternetDeleteArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PagoFacturaInternet.
     * @param {PagoFacturaInternetUpdateArgs} args - Arguments to update one PagoFacturaInternet.
     * @example
     * // Update one PagoFacturaInternet
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PagoFacturaInternetUpdateArgs>(args: SelectSubset<T, PagoFacturaInternetUpdateArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PagoFacturaInternets.
     * @param {PagoFacturaInternetDeleteManyArgs} args - Arguments to filter PagoFacturaInternets to delete.
     * @example
     * // Delete a few PagoFacturaInternets
     * const { count } = await prisma.pagoFacturaInternet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PagoFacturaInternetDeleteManyArgs>(args?: SelectSubset<T, PagoFacturaInternetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PagoFacturaInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PagoFacturaInternets
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PagoFacturaInternetUpdateManyArgs>(args: SelectSubset<T, PagoFacturaInternetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PagoFacturaInternet.
     * @param {PagoFacturaInternetUpsertArgs} args - Arguments to update or create a PagoFacturaInternet.
     * @example
     * // Update or create a PagoFacturaInternet
     * const pagoFacturaInternet = await prisma.pagoFacturaInternet.upsert({
     *   create: {
     *     // ... data to create a PagoFacturaInternet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PagoFacturaInternet we want to update
     *   }
     * })
     */
    upsert<T extends PagoFacturaInternetUpsertArgs>(args: SelectSubset<T, PagoFacturaInternetUpsertArgs<ExtArgs>>): Prisma__PagoFacturaInternetClient<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PagoFacturaInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetCountArgs} args - Arguments to filter PagoFacturaInternets to count.
     * @example
     * // Count the number of PagoFacturaInternets
     * const count = await prisma.pagoFacturaInternet.count({
     *   where: {
     *     // ... the filter for the PagoFacturaInternets we want to count
     *   }
     * })
    **/
    count<T extends PagoFacturaInternetCountArgs>(
      args?: Subset<T, PagoFacturaInternetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagoFacturaInternetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PagoFacturaInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagoFacturaInternetAggregateArgs>(args: Subset<T, PagoFacturaInternetAggregateArgs>): Prisma.PrismaPromise<GetPagoFacturaInternetAggregateType<T>>

    /**
     * Group by PagoFacturaInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagoFacturaInternetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagoFacturaInternetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagoFacturaInternetGroupByArgs['orderBy'] }
        : { orderBy?: PagoFacturaInternetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagoFacturaInternetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagoFacturaInternetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PagoFacturaInternet model
   */
  readonly fields: PagoFacturaInternetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PagoFacturaInternet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PagoFacturaInternetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    facturaInternet<T extends FacturaInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FacturaInternetDefaultArgs<ExtArgs>>): Prisma__FacturaInternetClient<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PagoFacturaInternet model
   */ 
  interface PagoFacturaInternetFieldRefs {
    readonly id: FieldRef<"PagoFacturaInternet", 'Int'>
    readonly facturaInternetId: FieldRef<"PagoFacturaInternet", 'Int'>
    readonly clienteId: FieldRef<"PagoFacturaInternet", 'Int'>
    readonly montoPagado: FieldRef<"PagoFacturaInternet", 'Float'>
    readonly metodoPago: FieldRef<"PagoFacturaInternet", 'MetodoPagoFacturaInternet'>
    readonly fechaPago: FieldRef<"PagoFacturaInternet", 'DateTime'>
    readonly creadoEn: FieldRef<"PagoFacturaInternet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PagoFacturaInternet findUnique
   */
  export type PagoFacturaInternetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which PagoFacturaInternet to fetch.
     */
    where: PagoFacturaInternetWhereUniqueInput
  }

  /**
   * PagoFacturaInternet findUniqueOrThrow
   */
  export type PagoFacturaInternetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which PagoFacturaInternet to fetch.
     */
    where: PagoFacturaInternetWhereUniqueInput
  }

  /**
   * PagoFacturaInternet findFirst
   */
  export type PagoFacturaInternetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which PagoFacturaInternet to fetch.
     */
    where?: PagoFacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturaInternets to fetch.
     */
    orderBy?: PagoFacturaInternetOrderByWithRelationInput | PagoFacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PagoFacturaInternets.
     */
    cursor?: PagoFacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturaInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PagoFacturaInternets.
     */
    distinct?: PagoFacturaInternetScalarFieldEnum | PagoFacturaInternetScalarFieldEnum[]
  }

  /**
   * PagoFacturaInternet findFirstOrThrow
   */
  export type PagoFacturaInternetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which PagoFacturaInternet to fetch.
     */
    where?: PagoFacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturaInternets to fetch.
     */
    orderBy?: PagoFacturaInternetOrderByWithRelationInput | PagoFacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PagoFacturaInternets.
     */
    cursor?: PagoFacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturaInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PagoFacturaInternets.
     */
    distinct?: PagoFacturaInternetScalarFieldEnum | PagoFacturaInternetScalarFieldEnum[]
  }

  /**
   * PagoFacturaInternet findMany
   */
  export type PagoFacturaInternetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * Filter, which PagoFacturaInternets to fetch.
     */
    where?: PagoFacturaInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PagoFacturaInternets to fetch.
     */
    orderBy?: PagoFacturaInternetOrderByWithRelationInput | PagoFacturaInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PagoFacturaInternets.
     */
    cursor?: PagoFacturaInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PagoFacturaInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PagoFacturaInternets.
     */
    skip?: number
    distinct?: PagoFacturaInternetScalarFieldEnum | PagoFacturaInternetScalarFieldEnum[]
  }

  /**
   * PagoFacturaInternet create
   */
  export type PagoFacturaInternetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * The data needed to create a PagoFacturaInternet.
     */
    data: XOR<PagoFacturaInternetCreateInput, PagoFacturaInternetUncheckedCreateInput>
  }

  /**
   * PagoFacturaInternet createMany
   */
  export type PagoFacturaInternetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PagoFacturaInternets.
     */
    data: PagoFacturaInternetCreateManyInput | PagoFacturaInternetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PagoFacturaInternet createManyAndReturn
   */
  export type PagoFacturaInternetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PagoFacturaInternets.
     */
    data: PagoFacturaInternetCreateManyInput | PagoFacturaInternetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PagoFacturaInternet update
   */
  export type PagoFacturaInternetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * The data needed to update a PagoFacturaInternet.
     */
    data: XOR<PagoFacturaInternetUpdateInput, PagoFacturaInternetUncheckedUpdateInput>
    /**
     * Choose, which PagoFacturaInternet to update.
     */
    where: PagoFacturaInternetWhereUniqueInput
  }

  /**
   * PagoFacturaInternet updateMany
   */
  export type PagoFacturaInternetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PagoFacturaInternets.
     */
    data: XOR<PagoFacturaInternetUpdateManyMutationInput, PagoFacturaInternetUncheckedUpdateManyInput>
    /**
     * Filter which PagoFacturaInternets to update
     */
    where?: PagoFacturaInternetWhereInput
  }

  /**
   * PagoFacturaInternet upsert
   */
  export type PagoFacturaInternetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * The filter to search for the PagoFacturaInternet to update in case it exists.
     */
    where: PagoFacturaInternetWhereUniqueInput
    /**
     * In case the PagoFacturaInternet found by the `where` argument doesn't exist, create a new PagoFacturaInternet with this data.
     */
    create: XOR<PagoFacturaInternetCreateInput, PagoFacturaInternetUncheckedCreateInput>
    /**
     * In case the PagoFacturaInternet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagoFacturaInternetUpdateInput, PagoFacturaInternetUncheckedUpdateInput>
  }

  /**
   * PagoFacturaInternet delete
   */
  export type PagoFacturaInternetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    /**
     * Filter which PagoFacturaInternet to delete.
     */
    where: PagoFacturaInternetWhereUniqueInput
  }

  /**
   * PagoFacturaInternet deleteMany
   */
  export type PagoFacturaInternetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PagoFacturaInternets to delete
     */
    where?: PagoFacturaInternetWhereInput
  }

  /**
   * PagoFacturaInternet without action
   */
  export type PagoFacturaInternetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
  }


  /**
   * Model FacturaServicio
   */

  export type AggregateFacturaServicio = {
    _count: FacturaServicioCountAggregateOutputType | null
    _avg: FacturaServicioAvgAggregateOutputType | null
    _sum: FacturaServicioSumAggregateOutputType | null
    _min: FacturaServicioMinAggregateOutputType | null
    _max: FacturaServicioMaxAggregateOutputType | null
  }

  export type FacturaServicioAvgAggregateOutputType = {
    id: number | null
    facturaId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
    total: number | null
  }

  export type FacturaServicioSumAggregateOutputType = {
    id: number | null
    facturaId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
    total: number | null
  }

  export type FacturaServicioMinAggregateOutputType = {
    id: number | null
    facturaId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
    total: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FacturaServicioMaxAggregateOutputType = {
    id: number | null
    facturaId: number | null
    servicioId: number | null
    cantidad: number | null
    precioUnitario: number | null
    total: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FacturaServicioCountAggregateOutputType = {
    id: number
    facturaId: number
    servicioId: number
    cantidad: number
    precioUnitario: number
    total: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type FacturaServicioAvgAggregateInputType = {
    id?: true
    facturaId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
    total?: true
  }

  export type FacturaServicioSumAggregateInputType = {
    id?: true
    facturaId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
    total?: true
  }

  export type FacturaServicioMinAggregateInputType = {
    id?: true
    facturaId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
    total?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FacturaServicioMaxAggregateInputType = {
    id?: true
    facturaId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
    total?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FacturaServicioCountAggregateInputType = {
    id?: true
    facturaId?: true
    servicioId?: true
    cantidad?: true
    precioUnitario?: true
    total?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type FacturaServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacturaServicio to aggregate.
     */
    where?: FacturaServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaServicios to fetch.
     */
    orderBy?: FacturaServicioOrderByWithRelationInput | FacturaServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacturaServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacturaServicios
    **/
    _count?: true | FacturaServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacturaServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacturaServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacturaServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacturaServicioMaxAggregateInputType
  }

  export type GetFacturaServicioAggregateType<T extends FacturaServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateFacturaServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacturaServicio[P]>
      : GetScalarType<T[P], AggregateFacturaServicio[P]>
  }




  export type FacturaServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacturaServicioWhereInput
    orderBy?: FacturaServicioOrderByWithAggregationInput | FacturaServicioOrderByWithAggregationInput[]
    by: FacturaServicioScalarFieldEnum[] | FacturaServicioScalarFieldEnum
    having?: FacturaServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacturaServicioCountAggregateInputType | true
    _avg?: FacturaServicioAvgAggregateInputType
    _sum?: FacturaServicioSumAggregateInputType
    _min?: FacturaServicioMinAggregateInputType
    _max?: FacturaServicioMaxAggregateInputType
  }

  export type FacturaServicioGroupByOutputType = {
    id: number
    facturaId: number
    servicioId: number
    cantidad: number
    precioUnitario: number
    total: number
    creadoEn: Date
    actualizadoEn: Date
    _count: FacturaServicioCountAggregateOutputType | null
    _avg: FacturaServicioAvgAggregateOutputType | null
    _sum: FacturaServicioSumAggregateOutputType | null
    _min: FacturaServicioMinAggregateOutputType | null
    _max: FacturaServicioMaxAggregateOutputType | null
  }

  type GetFacturaServicioGroupByPayload<T extends FacturaServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacturaServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacturaServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacturaServicioGroupByOutputType[P]>
            : GetScalarType<T[P], FacturaServicioGroupByOutputType[P]>
        }
      >
    >


  export type FacturaServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facturaId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    total?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facturaServicio"]>

  export type FacturaServicioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facturaId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    total?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facturaServicio"]>

  export type FacturaServicioSelectScalar = {
    id?: boolean
    facturaId?: boolean
    servicioId?: boolean
    cantidad?: boolean
    precioUnitario?: boolean
    total?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type FacturaServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }
  export type FacturaServicioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    factura?: boolean | FacturaDefaultArgs<ExtArgs>
    servicio?: boolean | ServicioDefaultArgs<ExtArgs>
  }

  export type $FacturaServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FacturaServicio"
    objects: {
      factura: Prisma.$FacturaPayload<ExtArgs>
      servicio: Prisma.$ServicioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      facturaId: number
      servicioId: number
      cantidad: number
      precioUnitario: number
      total: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["facturaServicio"]>
    composites: {}
  }

  type FacturaServicioGetPayload<S extends boolean | null | undefined | FacturaServicioDefaultArgs> = $Result.GetResult<Prisma.$FacturaServicioPayload, S>

  type FacturaServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacturaServicioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacturaServicioCountAggregateInputType | true
    }

  export interface FacturaServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacturaServicio'], meta: { name: 'FacturaServicio' } }
    /**
     * Find zero or one FacturaServicio that matches the filter.
     * @param {FacturaServicioFindUniqueArgs} args - Arguments to find a FacturaServicio
     * @example
     * // Get one FacturaServicio
     * const facturaServicio = await prisma.facturaServicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacturaServicioFindUniqueArgs>(args: SelectSubset<T, FacturaServicioFindUniqueArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FacturaServicio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FacturaServicioFindUniqueOrThrowArgs} args - Arguments to find a FacturaServicio
     * @example
     * // Get one FacturaServicio
     * const facturaServicio = await prisma.facturaServicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacturaServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, FacturaServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FacturaServicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioFindFirstArgs} args - Arguments to find a FacturaServicio
     * @example
     * // Get one FacturaServicio
     * const facturaServicio = await prisma.facturaServicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacturaServicioFindFirstArgs>(args?: SelectSubset<T, FacturaServicioFindFirstArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FacturaServicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioFindFirstOrThrowArgs} args - Arguments to find a FacturaServicio
     * @example
     * // Get one FacturaServicio
     * const facturaServicio = await prisma.facturaServicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacturaServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, FacturaServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FacturaServicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacturaServicios
     * const facturaServicios = await prisma.facturaServicio.findMany()
     * 
     * // Get first 10 FacturaServicios
     * const facturaServicios = await prisma.facturaServicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facturaServicioWithIdOnly = await prisma.facturaServicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacturaServicioFindManyArgs>(args?: SelectSubset<T, FacturaServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FacturaServicio.
     * @param {FacturaServicioCreateArgs} args - Arguments to create a FacturaServicio.
     * @example
     * // Create one FacturaServicio
     * const FacturaServicio = await prisma.facturaServicio.create({
     *   data: {
     *     // ... data to create a FacturaServicio
     *   }
     * })
     * 
     */
    create<T extends FacturaServicioCreateArgs>(args: SelectSubset<T, FacturaServicioCreateArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FacturaServicios.
     * @param {FacturaServicioCreateManyArgs} args - Arguments to create many FacturaServicios.
     * @example
     * // Create many FacturaServicios
     * const facturaServicio = await prisma.facturaServicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacturaServicioCreateManyArgs>(args?: SelectSubset<T, FacturaServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FacturaServicios and returns the data saved in the database.
     * @param {FacturaServicioCreateManyAndReturnArgs} args - Arguments to create many FacturaServicios.
     * @example
     * // Create many FacturaServicios
     * const facturaServicio = await prisma.facturaServicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FacturaServicios and only return the `id`
     * const facturaServicioWithIdOnly = await prisma.facturaServicio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacturaServicioCreateManyAndReturnArgs>(args?: SelectSubset<T, FacturaServicioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FacturaServicio.
     * @param {FacturaServicioDeleteArgs} args - Arguments to delete one FacturaServicio.
     * @example
     * // Delete one FacturaServicio
     * const FacturaServicio = await prisma.facturaServicio.delete({
     *   where: {
     *     // ... filter to delete one FacturaServicio
     *   }
     * })
     * 
     */
    delete<T extends FacturaServicioDeleteArgs>(args: SelectSubset<T, FacturaServicioDeleteArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FacturaServicio.
     * @param {FacturaServicioUpdateArgs} args - Arguments to update one FacturaServicio.
     * @example
     * // Update one FacturaServicio
     * const facturaServicio = await prisma.facturaServicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacturaServicioUpdateArgs>(args: SelectSubset<T, FacturaServicioUpdateArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FacturaServicios.
     * @param {FacturaServicioDeleteManyArgs} args - Arguments to filter FacturaServicios to delete.
     * @example
     * // Delete a few FacturaServicios
     * const { count } = await prisma.facturaServicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacturaServicioDeleteManyArgs>(args?: SelectSubset<T, FacturaServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacturaServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacturaServicios
     * const facturaServicio = await prisma.facturaServicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacturaServicioUpdateManyArgs>(args: SelectSubset<T, FacturaServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacturaServicio.
     * @param {FacturaServicioUpsertArgs} args - Arguments to update or create a FacturaServicio.
     * @example
     * // Update or create a FacturaServicio
     * const facturaServicio = await prisma.facturaServicio.upsert({
     *   create: {
     *     // ... data to create a FacturaServicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacturaServicio we want to update
     *   }
     * })
     */
    upsert<T extends FacturaServicioUpsertArgs>(args: SelectSubset<T, FacturaServicioUpsertArgs<ExtArgs>>): Prisma__FacturaServicioClient<$Result.GetResult<Prisma.$FacturaServicioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FacturaServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioCountArgs} args - Arguments to filter FacturaServicios to count.
     * @example
     * // Count the number of FacturaServicios
     * const count = await prisma.facturaServicio.count({
     *   where: {
     *     // ... the filter for the FacturaServicios we want to count
     *   }
     * })
    **/
    count<T extends FacturaServicioCountArgs>(
      args?: Subset<T, FacturaServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacturaServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacturaServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacturaServicioAggregateArgs>(args: Subset<T, FacturaServicioAggregateArgs>): Prisma.PrismaPromise<GetFacturaServicioAggregateType<T>>

    /**
     * Group by FacturaServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacturaServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacturaServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacturaServicioGroupByArgs['orderBy'] }
        : { orderBy?: FacturaServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacturaServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacturaServicio model
   */
  readonly fields: FacturaServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacturaServicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacturaServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    factura<T extends FacturaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FacturaDefaultArgs<ExtArgs>>): Prisma__FacturaClient<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    servicio<T extends ServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicioDefaultArgs<ExtArgs>>): Prisma__ServicioClient<$Result.GetResult<Prisma.$ServicioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FacturaServicio model
   */ 
  interface FacturaServicioFieldRefs {
    readonly id: FieldRef<"FacturaServicio", 'Int'>
    readonly facturaId: FieldRef<"FacturaServicio", 'Int'>
    readonly servicioId: FieldRef<"FacturaServicio", 'Int'>
    readonly cantidad: FieldRef<"FacturaServicio", 'Int'>
    readonly precioUnitario: FieldRef<"FacturaServicio", 'Float'>
    readonly total: FieldRef<"FacturaServicio", 'Float'>
    readonly creadoEn: FieldRef<"FacturaServicio", 'DateTime'>
    readonly actualizadoEn: FieldRef<"FacturaServicio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FacturaServicio findUnique
   */
  export type FacturaServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * Filter, which FacturaServicio to fetch.
     */
    where: FacturaServicioWhereUniqueInput
  }

  /**
   * FacturaServicio findUniqueOrThrow
   */
  export type FacturaServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * Filter, which FacturaServicio to fetch.
     */
    where: FacturaServicioWhereUniqueInput
  }

  /**
   * FacturaServicio findFirst
   */
  export type FacturaServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * Filter, which FacturaServicio to fetch.
     */
    where?: FacturaServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaServicios to fetch.
     */
    orderBy?: FacturaServicioOrderByWithRelationInput | FacturaServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacturaServicios.
     */
    cursor?: FacturaServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacturaServicios.
     */
    distinct?: FacturaServicioScalarFieldEnum | FacturaServicioScalarFieldEnum[]
  }

  /**
   * FacturaServicio findFirstOrThrow
   */
  export type FacturaServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * Filter, which FacturaServicio to fetch.
     */
    where?: FacturaServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaServicios to fetch.
     */
    orderBy?: FacturaServicioOrderByWithRelationInput | FacturaServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacturaServicios.
     */
    cursor?: FacturaServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacturaServicios.
     */
    distinct?: FacturaServicioScalarFieldEnum | FacturaServicioScalarFieldEnum[]
  }

  /**
   * FacturaServicio findMany
   */
  export type FacturaServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * Filter, which FacturaServicios to fetch.
     */
    where?: FacturaServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacturaServicios to fetch.
     */
    orderBy?: FacturaServicioOrderByWithRelationInput | FacturaServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacturaServicios.
     */
    cursor?: FacturaServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacturaServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacturaServicios.
     */
    skip?: number
    distinct?: FacturaServicioScalarFieldEnum | FacturaServicioScalarFieldEnum[]
  }

  /**
   * FacturaServicio create
   */
  export type FacturaServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a FacturaServicio.
     */
    data: XOR<FacturaServicioCreateInput, FacturaServicioUncheckedCreateInput>
  }

  /**
   * FacturaServicio createMany
   */
  export type FacturaServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FacturaServicios.
     */
    data: FacturaServicioCreateManyInput | FacturaServicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacturaServicio createManyAndReturn
   */
  export type FacturaServicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FacturaServicios.
     */
    data: FacturaServicioCreateManyInput | FacturaServicioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FacturaServicio update
   */
  export type FacturaServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a FacturaServicio.
     */
    data: XOR<FacturaServicioUpdateInput, FacturaServicioUncheckedUpdateInput>
    /**
     * Choose, which FacturaServicio to update.
     */
    where: FacturaServicioWhereUniqueInput
  }

  /**
   * FacturaServicio updateMany
   */
  export type FacturaServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacturaServicios.
     */
    data: XOR<FacturaServicioUpdateManyMutationInput, FacturaServicioUncheckedUpdateManyInput>
    /**
     * Filter which FacturaServicios to update
     */
    where?: FacturaServicioWhereInput
  }

  /**
   * FacturaServicio upsert
   */
  export type FacturaServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the FacturaServicio to update in case it exists.
     */
    where: FacturaServicioWhereUniqueInput
    /**
     * In case the FacturaServicio found by the `where` argument doesn't exist, create a new FacturaServicio with this data.
     */
    create: XOR<FacturaServicioCreateInput, FacturaServicioUncheckedCreateInput>
    /**
     * In case the FacturaServicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacturaServicioUpdateInput, FacturaServicioUncheckedUpdateInput>
  }

  /**
   * FacturaServicio delete
   */
  export type FacturaServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
    /**
     * Filter which FacturaServicio to delete.
     */
    where: FacturaServicioWhereUniqueInput
  }

  /**
   * FacturaServicio deleteMany
   */
  export type FacturaServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacturaServicios to delete
     */
    where?: FacturaServicioWhereInput
  }

  /**
   * FacturaServicio without action
   */
  export type FacturaServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaServicio
     */
    select?: FacturaServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaServicioInclude<ExtArgs> | null
  }


  /**
   * Model IP
   */

  export type AggregateIP = {
    _count: IPCountAggregateOutputType | null
    _avg: IPAvgAggregateOutputType | null
    _sum: IPSumAggregateOutputType | null
    _min: IPMinAggregateOutputType | null
    _max: IPMaxAggregateOutputType | null
  }

  export type IPAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type IPSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type IPMinAggregateOutputType = {
    id: number | null
    direccionIp: string | null
    clienteId: number | null
  }

  export type IPMaxAggregateOutputType = {
    id: number | null
    direccionIp: string | null
    clienteId: number | null
  }

  export type IPCountAggregateOutputType = {
    id: number
    direccionIp: number
    clienteId: number
    _all: number
  }


  export type IPAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type IPSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type IPMinAggregateInputType = {
    id?: true
    direccionIp?: true
    clienteId?: true
  }

  export type IPMaxAggregateInputType = {
    id?: true
    direccionIp?: true
    clienteId?: true
  }

  export type IPCountAggregateInputType = {
    id?: true
    direccionIp?: true
    clienteId?: true
    _all?: true
  }

  export type IPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IP to aggregate.
     */
    where?: IPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPS to fetch.
     */
    orderBy?: IPOrderByWithRelationInput | IPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IPS
    **/
    _count?: true | IPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IPAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IPSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IPMaxAggregateInputType
  }

  export type GetIPAggregateType<T extends IPAggregateArgs> = {
        [P in keyof T & keyof AggregateIP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIP[P]>
      : GetScalarType<T[P], AggregateIP[P]>
  }




  export type IPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IPWhereInput
    orderBy?: IPOrderByWithAggregationInput | IPOrderByWithAggregationInput[]
    by: IPScalarFieldEnum[] | IPScalarFieldEnum
    having?: IPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IPCountAggregateInputType | true
    _avg?: IPAvgAggregateInputType
    _sum?: IPSumAggregateInputType
    _min?: IPMinAggregateInputType
    _max?: IPMaxAggregateInputType
  }

  export type IPGroupByOutputType = {
    id: number
    direccionIp: string | null
    clienteId: number | null
    _count: IPCountAggregateOutputType | null
    _avg: IPAvgAggregateOutputType | null
    _sum: IPSumAggregateOutputType | null
    _min: IPMinAggregateOutputType | null
    _max: IPMaxAggregateOutputType | null
  }

  type GetIPGroupByPayload<T extends IPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IPGroupByOutputType[P]>
            : GetScalarType<T[P], IPGroupByOutputType[P]>
        }
      >
    >


  export type IPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    direccionIp?: boolean
    clienteId?: boolean
    cliente?: boolean | IP$clienteArgs<ExtArgs>
  }, ExtArgs["result"]["iP"]>

  export type IPSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    direccionIp?: boolean
    clienteId?: boolean
    cliente?: boolean | IP$clienteArgs<ExtArgs>
  }, ExtArgs["result"]["iP"]>

  export type IPSelectScalar = {
    id?: boolean
    direccionIp?: boolean
    clienteId?: boolean
  }

  export type IPInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | IP$clienteArgs<ExtArgs>
  }
  export type IPIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | IP$clienteArgs<ExtArgs>
  }

  export type $IPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IP"
    objects: {
      cliente: Prisma.$ClienteInternetPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      direccionIp: string | null
      clienteId: number | null
    }, ExtArgs["result"]["iP"]>
    composites: {}
  }

  type IPGetPayload<S extends boolean | null | undefined | IPDefaultArgs> = $Result.GetResult<Prisma.$IPPayload, S>

  type IPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IPFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IPCountAggregateInputType | true
    }

  export interface IPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IP'], meta: { name: 'IP' } }
    /**
     * Find zero or one IP that matches the filter.
     * @param {IPFindUniqueArgs} args - Arguments to find a IP
     * @example
     * // Get one IP
     * const iP = await prisma.iP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IPFindUniqueArgs>(args: SelectSubset<T, IPFindUniqueArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IP that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IPFindUniqueOrThrowArgs} args - Arguments to find a IP
     * @example
     * // Get one IP
     * const iP = await prisma.iP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IPFindUniqueOrThrowArgs>(args: SelectSubset<T, IPFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPFindFirstArgs} args - Arguments to find a IP
     * @example
     * // Get one IP
     * const iP = await prisma.iP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IPFindFirstArgs>(args?: SelectSubset<T, IPFindFirstArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPFindFirstOrThrowArgs} args - Arguments to find a IP
     * @example
     * // Get one IP
     * const iP = await prisma.iP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IPFindFirstOrThrowArgs>(args?: SelectSubset<T, IPFindFirstOrThrowArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IPS
     * const iPS = await prisma.iP.findMany()
     * 
     * // Get first 10 IPS
     * const iPS = await prisma.iP.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iPWithIdOnly = await prisma.iP.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IPFindManyArgs>(args?: SelectSubset<T, IPFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IP.
     * @param {IPCreateArgs} args - Arguments to create a IP.
     * @example
     * // Create one IP
     * const IP = await prisma.iP.create({
     *   data: {
     *     // ... data to create a IP
     *   }
     * })
     * 
     */
    create<T extends IPCreateArgs>(args: SelectSubset<T, IPCreateArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IPS.
     * @param {IPCreateManyArgs} args - Arguments to create many IPS.
     * @example
     * // Create many IPS
     * const iP = await prisma.iP.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IPCreateManyArgs>(args?: SelectSubset<T, IPCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IPS and returns the data saved in the database.
     * @param {IPCreateManyAndReturnArgs} args - Arguments to create many IPS.
     * @example
     * // Create many IPS
     * const iP = await prisma.iP.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IPS and only return the `id`
     * const iPWithIdOnly = await prisma.iP.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IPCreateManyAndReturnArgs>(args?: SelectSubset<T, IPCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IP.
     * @param {IPDeleteArgs} args - Arguments to delete one IP.
     * @example
     * // Delete one IP
     * const IP = await prisma.iP.delete({
     *   where: {
     *     // ... filter to delete one IP
     *   }
     * })
     * 
     */
    delete<T extends IPDeleteArgs>(args: SelectSubset<T, IPDeleteArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IP.
     * @param {IPUpdateArgs} args - Arguments to update one IP.
     * @example
     * // Update one IP
     * const iP = await prisma.iP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IPUpdateArgs>(args: SelectSubset<T, IPUpdateArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IPS.
     * @param {IPDeleteManyArgs} args - Arguments to filter IPS to delete.
     * @example
     * // Delete a few IPS
     * const { count } = await prisma.iP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IPDeleteManyArgs>(args?: SelectSubset<T, IPDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IPS
     * const iP = await prisma.iP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IPUpdateManyArgs>(args: SelectSubset<T, IPUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IP.
     * @param {IPUpsertArgs} args - Arguments to update or create a IP.
     * @example
     * // Update or create a IP
     * const iP = await prisma.iP.upsert({
     *   create: {
     *     // ... data to create a IP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IP we want to update
     *   }
     * })
     */
    upsert<T extends IPUpsertArgs>(args: SelectSubset<T, IPUpsertArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPCountArgs} args - Arguments to filter IPS to count.
     * @example
     * // Count the number of IPS
     * const count = await prisma.iP.count({
     *   where: {
     *     // ... the filter for the IPS we want to count
     *   }
     * })
    **/
    count<T extends IPCountArgs>(
      args?: Subset<T, IPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IPAggregateArgs>(args: Subset<T, IPAggregateArgs>): Prisma.PrismaPromise<GetIPAggregateType<T>>

    /**
     * Group by IP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IPGroupByArgs['orderBy'] }
        : { orderBy?: IPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IP model
   */
  readonly fields: IPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends IP$clienteArgs<ExtArgs> = {}>(args?: Subset<T, IP$clienteArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IP model
   */ 
  interface IPFieldRefs {
    readonly id: FieldRef<"IP", 'Int'>
    readonly direccionIp: FieldRef<"IP", 'String'>
    readonly clienteId: FieldRef<"IP", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * IP findUnique
   */
  export type IPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * Filter, which IP to fetch.
     */
    where: IPWhereUniqueInput
  }

  /**
   * IP findUniqueOrThrow
   */
  export type IPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * Filter, which IP to fetch.
     */
    where: IPWhereUniqueInput
  }

  /**
   * IP findFirst
   */
  export type IPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * Filter, which IP to fetch.
     */
    where?: IPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPS to fetch.
     */
    orderBy?: IPOrderByWithRelationInput | IPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IPS.
     */
    cursor?: IPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IPS.
     */
    distinct?: IPScalarFieldEnum | IPScalarFieldEnum[]
  }

  /**
   * IP findFirstOrThrow
   */
  export type IPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * Filter, which IP to fetch.
     */
    where?: IPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPS to fetch.
     */
    orderBy?: IPOrderByWithRelationInput | IPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IPS.
     */
    cursor?: IPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IPS.
     */
    distinct?: IPScalarFieldEnum | IPScalarFieldEnum[]
  }

  /**
   * IP findMany
   */
  export type IPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * Filter, which IPS to fetch.
     */
    where?: IPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPS to fetch.
     */
    orderBy?: IPOrderByWithRelationInput | IPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IPS.
     */
    cursor?: IPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPS.
     */
    skip?: number
    distinct?: IPScalarFieldEnum | IPScalarFieldEnum[]
  }

  /**
   * IP create
   */
  export type IPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * The data needed to create a IP.
     */
    data?: XOR<IPCreateInput, IPUncheckedCreateInput>
  }

  /**
   * IP createMany
   */
  export type IPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IPS.
     */
    data: IPCreateManyInput | IPCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IP createManyAndReturn
   */
  export type IPCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IPS.
     */
    data: IPCreateManyInput | IPCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IP update
   */
  export type IPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * The data needed to update a IP.
     */
    data: XOR<IPUpdateInput, IPUncheckedUpdateInput>
    /**
     * Choose, which IP to update.
     */
    where: IPWhereUniqueInput
  }

  /**
   * IP updateMany
   */
  export type IPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IPS.
     */
    data: XOR<IPUpdateManyMutationInput, IPUncheckedUpdateManyInput>
    /**
     * Filter which IPS to update
     */
    where?: IPWhereInput
  }

  /**
   * IP upsert
   */
  export type IPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * The filter to search for the IP to update in case it exists.
     */
    where: IPWhereUniqueInput
    /**
     * In case the IP found by the `where` argument doesn't exist, create a new IP with this data.
     */
    create: XOR<IPCreateInput, IPUncheckedCreateInput>
    /**
     * In case the IP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IPUpdateInput, IPUncheckedUpdateInput>
  }

  /**
   * IP delete
   */
  export type IPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    /**
     * Filter which IP to delete.
     */
    where: IPWhereUniqueInput
  }

  /**
   * IP deleteMany
   */
  export type IPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IPS to delete
     */
    where?: IPWhereInput
  }

  /**
   * IP.cliente
   */
  export type IP$clienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
  }

  /**
   * IP without action
   */
  export type IPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
  }


  /**
   * Model Fotos
   */

  export type AggregateFotos = {
    _count: FotosCountAggregateOutputType | null
    _avg: FotosAvgAggregateOutputType | null
    _sum: FotosSumAggregateOutputType | null
    _min: FotosMinAggregateOutputType | null
    _max: FotosMaxAggregateOutputType | null
  }

  export type FotosAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type FotosSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type FotosMinAggregateOutputType = {
    id: number | null
    nombreFoto: string | null
    url: string | null
    clienteId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FotosMaxAggregateOutputType = {
    id: number | null
    nombreFoto: string | null
    url: string | null
    clienteId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type FotosCountAggregateOutputType = {
    id: number
    nombreFoto: number
    url: number
    clienteId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type FotosAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type FotosSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type FotosMinAggregateInputType = {
    id?: true
    nombreFoto?: true
    url?: true
    clienteId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FotosMaxAggregateInputType = {
    id?: true
    nombreFoto?: true
    url?: true
    clienteId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type FotosCountAggregateInputType = {
    id?: true
    nombreFoto?: true
    url?: true
    clienteId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type FotosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fotos to aggregate.
     */
    where?: FotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotosOrderByWithRelationInput | FotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fotos
    **/
    _count?: true | FotosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FotosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FotosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FotosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FotosMaxAggregateInputType
  }

  export type GetFotosAggregateType<T extends FotosAggregateArgs> = {
        [P in keyof T & keyof AggregateFotos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFotos[P]>
      : GetScalarType<T[P], AggregateFotos[P]>
  }




  export type FotosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FotosWhereInput
    orderBy?: FotosOrderByWithAggregationInput | FotosOrderByWithAggregationInput[]
    by: FotosScalarFieldEnum[] | FotosScalarFieldEnum
    having?: FotosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FotosCountAggregateInputType | true
    _avg?: FotosAvgAggregateInputType
    _sum?: FotosSumAggregateInputType
    _min?: FotosMinAggregateInputType
    _max?: FotosMaxAggregateInputType
  }

  export type FotosGroupByOutputType = {
    id: number
    nombreFoto: string
    url: string | null
    clienteId: number
    creadoEn: Date
    actualizadoEn: Date
    _count: FotosCountAggregateOutputType | null
    _avg: FotosAvgAggregateOutputType | null
    _sum: FotosSumAggregateOutputType | null
    _min: FotosMinAggregateOutputType | null
    _max: FotosMaxAggregateOutputType | null
  }

  type GetFotosGroupByPayload<T extends FotosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FotosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FotosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FotosGroupByOutputType[P]>
            : GetScalarType<T[P], FotosGroupByOutputType[P]>
        }
      >
    >


  export type FotosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreFoto?: boolean
    url?: boolean
    clienteId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fotos"]>

  export type FotosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreFoto?: boolean
    url?: boolean
    clienteId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fotos"]>

  export type FotosSelectScalar = {
    id?: boolean
    nombreFoto?: boolean
    url?: boolean
    clienteId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type FotosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }
  export type FotosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }

  export type $FotosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fotos"
    objects: {
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombreFoto: string
      url: string | null
      clienteId: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["fotos"]>
    composites: {}
  }

  type FotosGetPayload<S extends boolean | null | undefined | FotosDefaultArgs> = $Result.GetResult<Prisma.$FotosPayload, S>

  type FotosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FotosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FotosCountAggregateInputType | true
    }

  export interface FotosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fotos'], meta: { name: 'Fotos' } }
    /**
     * Find zero or one Fotos that matches the filter.
     * @param {FotosFindUniqueArgs} args - Arguments to find a Fotos
     * @example
     * // Get one Fotos
     * const fotos = await prisma.fotos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FotosFindUniqueArgs>(args: SelectSubset<T, FotosFindUniqueArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fotos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FotosFindUniqueOrThrowArgs} args - Arguments to find a Fotos
     * @example
     * // Get one Fotos
     * const fotos = await prisma.fotos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FotosFindUniqueOrThrowArgs>(args: SelectSubset<T, FotosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosFindFirstArgs} args - Arguments to find a Fotos
     * @example
     * // Get one Fotos
     * const fotos = await prisma.fotos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FotosFindFirstArgs>(args?: SelectSubset<T, FotosFindFirstArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fotos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosFindFirstOrThrowArgs} args - Arguments to find a Fotos
     * @example
     * // Get one Fotos
     * const fotos = await prisma.fotos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FotosFindFirstOrThrowArgs>(args?: SelectSubset<T, FotosFindFirstOrThrowArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fotos
     * const fotos = await prisma.fotos.findMany()
     * 
     * // Get first 10 Fotos
     * const fotos = await prisma.fotos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fotosWithIdOnly = await prisma.fotos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FotosFindManyArgs>(args?: SelectSubset<T, FotosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fotos.
     * @param {FotosCreateArgs} args - Arguments to create a Fotos.
     * @example
     * // Create one Fotos
     * const Fotos = await prisma.fotos.create({
     *   data: {
     *     // ... data to create a Fotos
     *   }
     * })
     * 
     */
    create<T extends FotosCreateArgs>(args: SelectSubset<T, FotosCreateArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fotos.
     * @param {FotosCreateManyArgs} args - Arguments to create many Fotos.
     * @example
     * // Create many Fotos
     * const fotos = await prisma.fotos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FotosCreateManyArgs>(args?: SelectSubset<T, FotosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fotos and returns the data saved in the database.
     * @param {FotosCreateManyAndReturnArgs} args - Arguments to create many Fotos.
     * @example
     * // Create many Fotos
     * const fotos = await prisma.fotos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fotos and only return the `id`
     * const fotosWithIdOnly = await prisma.fotos.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FotosCreateManyAndReturnArgs>(args?: SelectSubset<T, FotosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fotos.
     * @param {FotosDeleteArgs} args - Arguments to delete one Fotos.
     * @example
     * // Delete one Fotos
     * const Fotos = await prisma.fotos.delete({
     *   where: {
     *     // ... filter to delete one Fotos
     *   }
     * })
     * 
     */
    delete<T extends FotosDeleteArgs>(args: SelectSubset<T, FotosDeleteArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fotos.
     * @param {FotosUpdateArgs} args - Arguments to update one Fotos.
     * @example
     * // Update one Fotos
     * const fotos = await prisma.fotos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FotosUpdateArgs>(args: SelectSubset<T, FotosUpdateArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fotos.
     * @param {FotosDeleteManyArgs} args - Arguments to filter Fotos to delete.
     * @example
     * // Delete a few Fotos
     * const { count } = await prisma.fotos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FotosDeleteManyArgs>(args?: SelectSubset<T, FotosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fotos
     * const fotos = await prisma.fotos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FotosUpdateManyArgs>(args: SelectSubset<T, FotosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fotos.
     * @param {FotosUpsertArgs} args - Arguments to update or create a Fotos.
     * @example
     * // Update or create a Fotos
     * const fotos = await prisma.fotos.upsert({
     *   create: {
     *     // ... data to create a Fotos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fotos we want to update
     *   }
     * })
     */
    upsert<T extends FotosUpsertArgs>(args: SelectSubset<T, FotosUpsertArgs<ExtArgs>>): Prisma__FotosClient<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosCountArgs} args - Arguments to filter Fotos to count.
     * @example
     * // Count the number of Fotos
     * const count = await prisma.fotos.count({
     *   where: {
     *     // ... the filter for the Fotos we want to count
     *   }
     * })
    **/
    count<T extends FotosCountArgs>(
      args?: Subset<T, FotosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FotosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FotosAggregateArgs>(args: Subset<T, FotosAggregateArgs>): Prisma.PrismaPromise<GetFotosAggregateType<T>>

    /**
     * Group by Fotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FotosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FotosGroupByArgs['orderBy'] }
        : { orderBy?: FotosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FotosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFotosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fotos model
   */
  readonly fields: FotosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fotos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FotosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fotos model
   */ 
  interface FotosFieldRefs {
    readonly id: FieldRef<"Fotos", 'Int'>
    readonly nombreFoto: FieldRef<"Fotos", 'String'>
    readonly url: FieldRef<"Fotos", 'String'>
    readonly clienteId: FieldRef<"Fotos", 'Int'>
    readonly creadoEn: FieldRef<"Fotos", 'DateTime'>
    readonly actualizadoEn: FieldRef<"Fotos", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Fotos findUnique
   */
  export type FotosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * Filter, which Fotos to fetch.
     */
    where: FotosWhereUniqueInput
  }

  /**
   * Fotos findUniqueOrThrow
   */
  export type FotosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * Filter, which Fotos to fetch.
     */
    where: FotosWhereUniqueInput
  }

  /**
   * Fotos findFirst
   */
  export type FotosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * Filter, which Fotos to fetch.
     */
    where?: FotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotosOrderByWithRelationInput | FotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fotos.
     */
    cursor?: FotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fotos.
     */
    distinct?: FotosScalarFieldEnum | FotosScalarFieldEnum[]
  }

  /**
   * Fotos findFirstOrThrow
   */
  export type FotosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * Filter, which Fotos to fetch.
     */
    where?: FotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotosOrderByWithRelationInput | FotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fotos.
     */
    cursor?: FotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fotos.
     */
    distinct?: FotosScalarFieldEnum | FotosScalarFieldEnum[]
  }

  /**
   * Fotos findMany
   */
  export type FotosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * Filter, which Fotos to fetch.
     */
    where?: FotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotosOrderByWithRelationInput | FotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fotos.
     */
    cursor?: FotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    distinct?: FotosScalarFieldEnum | FotosScalarFieldEnum[]
  }

  /**
   * Fotos create
   */
  export type FotosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * The data needed to create a Fotos.
     */
    data: XOR<FotosCreateInput, FotosUncheckedCreateInput>
  }

  /**
   * Fotos createMany
   */
  export type FotosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fotos.
     */
    data: FotosCreateManyInput | FotosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fotos createManyAndReturn
   */
  export type FotosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fotos.
     */
    data: FotosCreateManyInput | FotosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Fotos update
   */
  export type FotosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * The data needed to update a Fotos.
     */
    data: XOR<FotosUpdateInput, FotosUncheckedUpdateInput>
    /**
     * Choose, which Fotos to update.
     */
    where: FotosWhereUniqueInput
  }

  /**
   * Fotos updateMany
   */
  export type FotosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fotos.
     */
    data: XOR<FotosUpdateManyMutationInput, FotosUncheckedUpdateManyInput>
    /**
     * Filter which Fotos to update
     */
    where?: FotosWhereInput
  }

  /**
   * Fotos upsert
   */
  export type FotosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * The filter to search for the Fotos to update in case it exists.
     */
    where: FotosWhereUniqueInput
    /**
     * In case the Fotos found by the `where` argument doesn't exist, create a new Fotos with this data.
     */
    create: XOR<FotosCreateInput, FotosUncheckedCreateInput>
    /**
     * In case the Fotos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FotosUpdateInput, FotosUncheckedUpdateInput>
  }

  /**
   * Fotos delete
   */
  export type FotosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    /**
     * Filter which Fotos to delete.
     */
    where: FotosWhereUniqueInput
  }

  /**
   * Fotos deleteMany
   */
  export type FotosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fotos to delete
     */
    where?: FotosWhereInput
  }

  /**
   * Fotos without action
   */
  export type FotosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
  }


  /**
   * Model ClienteInternet
   */

  export type AggregateClienteInternet = {
    _count: ClienteInternetCountAggregateOutputType | null
    _avg: ClienteInternetAvgAggregateOutputType | null
    _sum: ClienteInternetSumAggregateOutputType | null
    _min: ClienteInternetMinAggregateOutputType | null
    _max: ClienteInternetMaxAggregateOutputType | null
  }

  export type ClienteInternetAvgAggregateOutputType = {
    id: number | null
    asesorId: number | null
    servicioId: number | null
    municipioId: number | null
    departamentoId: number | null
    empresaId: number | null
  }

  export type ClienteInternetSumAggregateOutputType = {
    id: number | null
    asesorId: number | null
    servicioId: number | null
    municipioId: number | null
    departamentoId: number | null
    empresaId: number | null
  }

  export type ClienteInternetMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    telefono: string | null
    direccion: string | null
    dpi: string | null
    observaciones: string | null
    contactoReferenciaNombre: string | null
    contactoReferenciaTelefono: string | null
    estadoCliente: $Enums.EstadoCliente | null
    contrasenaWifi: string | null
    ssidRouter: string | null
    fechaInstalacion: Date | null
    asesorId: number | null
    servicioId: number | null
    municipioId: number | null
    departamentoId: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type ClienteInternetMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    telefono: string | null
    direccion: string | null
    dpi: string | null
    observaciones: string | null
    contactoReferenciaNombre: string | null
    contactoReferenciaTelefono: string | null
    estadoCliente: $Enums.EstadoCliente | null
    contrasenaWifi: string | null
    ssidRouter: string | null
    fechaInstalacion: Date | null
    asesorId: number | null
    servicioId: number | null
    municipioId: number | null
    departamentoId: number | null
    empresaId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type ClienteInternetCountAggregateOutputType = {
    id: number
    nombre: number
    telefono: number
    direccion: number
    dpi: number
    observaciones: number
    contactoReferenciaNombre: number
    contactoReferenciaTelefono: number
    estadoCliente: number
    contrasenaWifi: number
    ssidRouter: number
    fechaInstalacion: number
    asesorId: number
    servicioId: number
    municipioId: number
    departamentoId: number
    empresaId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type ClienteInternetAvgAggregateInputType = {
    id?: true
    asesorId?: true
    servicioId?: true
    municipioId?: true
    departamentoId?: true
    empresaId?: true
  }

  export type ClienteInternetSumAggregateInputType = {
    id?: true
    asesorId?: true
    servicioId?: true
    municipioId?: true
    departamentoId?: true
    empresaId?: true
  }

  export type ClienteInternetMinAggregateInputType = {
    id?: true
    nombre?: true
    telefono?: true
    direccion?: true
    dpi?: true
    observaciones?: true
    contactoReferenciaNombre?: true
    contactoReferenciaTelefono?: true
    estadoCliente?: true
    contrasenaWifi?: true
    ssidRouter?: true
    fechaInstalacion?: true
    asesorId?: true
    servicioId?: true
    municipioId?: true
    departamentoId?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type ClienteInternetMaxAggregateInputType = {
    id?: true
    nombre?: true
    telefono?: true
    direccion?: true
    dpi?: true
    observaciones?: true
    contactoReferenciaNombre?: true
    contactoReferenciaTelefono?: true
    estadoCliente?: true
    contrasenaWifi?: true
    ssidRouter?: true
    fechaInstalacion?: true
    asesorId?: true
    servicioId?: true
    municipioId?: true
    departamentoId?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type ClienteInternetCountAggregateInputType = {
    id?: true
    nombre?: true
    telefono?: true
    direccion?: true
    dpi?: true
    observaciones?: true
    contactoReferenciaNombre?: true
    contactoReferenciaTelefono?: true
    estadoCliente?: true
    contrasenaWifi?: true
    ssidRouter?: true
    fechaInstalacion?: true
    asesorId?: true
    servicioId?: true
    municipioId?: true
    departamentoId?: true
    empresaId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type ClienteInternetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteInternet to aggregate.
     */
    where?: ClienteInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInternets to fetch.
     */
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteInternets
    **/
    _count?: true | ClienteInternetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteInternetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteInternetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteInternetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteInternetMaxAggregateInputType
  }

  export type GetClienteInternetAggregateType<T extends ClienteInternetAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteInternet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteInternet[P]>
      : GetScalarType<T[P], AggregateClienteInternet[P]>
  }




  export type ClienteInternetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithAggregationInput | ClienteInternetOrderByWithAggregationInput[]
    by: ClienteInternetScalarFieldEnum[] | ClienteInternetScalarFieldEnum
    having?: ClienteInternetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteInternetCountAggregateInputType | true
    _avg?: ClienteInternetAvgAggregateInputType
    _sum?: ClienteInternetSumAggregateInputType
    _min?: ClienteInternetMinAggregateInputType
    _max?: ClienteInternetMaxAggregateInputType
  }

  export type ClienteInternetGroupByOutputType = {
    id: number
    nombre: string
    telefono: string | null
    direccion: string | null
    dpi: string | null
    observaciones: string | null
    contactoReferenciaNombre: string | null
    contactoReferenciaTelefono: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter: string | null
    fechaInstalacion: Date | null
    asesorId: number | null
    servicioId: number
    municipioId: number | null
    departamentoId: number | null
    empresaId: number
    creadoEn: Date
    actualizadoEn: Date
    _count: ClienteInternetCountAggregateOutputType | null
    _avg: ClienteInternetAvgAggregateOutputType | null
    _sum: ClienteInternetSumAggregateOutputType | null
    _min: ClienteInternetMinAggregateOutputType | null
    _max: ClienteInternetMaxAggregateOutputType | null
  }

  type GetClienteInternetGroupByPayload<T extends ClienteInternetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteInternetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteInternetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteInternetGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteInternetGroupByOutputType[P]>
        }
      >
    >


  export type ClienteInternetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    telefono?: boolean
    direccion?: boolean
    dpi?: boolean
    observaciones?: boolean
    contactoReferenciaNombre?: boolean
    contactoReferenciaTelefono?: boolean
    estadoCliente?: boolean
    contrasenaWifi?: boolean
    ssidRouter?: boolean
    fechaInstalacion?: boolean
    asesorId?: boolean
    servicioId?: boolean
    municipioId?: boolean
    departamentoId?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    asesor?: boolean | ClienteInternet$asesorArgs<ExtArgs>
    servicio?: boolean | ServicioInternetDefaultArgs<ExtArgs>
    municipio?: boolean | ClienteInternet$municipioArgs<ExtArgs>
    departamento?: boolean | ClienteInternet$departamentoArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    ruta?: boolean | ClienteInternet$rutaArgs<ExtArgs>
    IP?: boolean | ClienteInternet$IPArgs<ExtArgs>
    ubicacion?: boolean | ClienteInternet$ubicacionArgs<ExtArgs>
    ticketSoporte?: boolean | ClienteInternet$ticketSoporteArgs<ExtArgs>
    saldoCliente?: boolean | ClienteInternet$saldoClienteArgs<ExtArgs>
    fotos?: boolean | ClienteInternet$fotosArgs<ExtArgs>
    clienteServicio?: boolean | ClienteInternet$clienteServicioArgs<ExtArgs>
    facturaInternet?: boolean | ClienteInternet$facturaInternetArgs<ExtArgs>
    PagoFacturaInternet?: boolean | ClienteInternet$PagoFacturaInternetArgs<ExtArgs>
    factura?: boolean | ClienteInternet$facturaArgs<ExtArgs>
    pagoFactura?: boolean | ClienteInternet$pagoFacturaArgs<ExtArgs>
    _count?: boolean | ClienteInternetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clienteInternet"]>

  export type ClienteInternetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    telefono?: boolean
    direccion?: boolean
    dpi?: boolean
    observaciones?: boolean
    contactoReferenciaNombre?: boolean
    contactoReferenciaTelefono?: boolean
    estadoCliente?: boolean
    contrasenaWifi?: boolean
    ssidRouter?: boolean
    fechaInstalacion?: boolean
    asesorId?: boolean
    servicioId?: boolean
    municipioId?: boolean
    departamentoId?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    asesor?: boolean | ClienteInternet$asesorArgs<ExtArgs>
    servicio?: boolean | ServicioInternetDefaultArgs<ExtArgs>
    municipio?: boolean | ClienteInternet$municipioArgs<ExtArgs>
    departamento?: boolean | ClienteInternet$departamentoArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clienteInternet"]>

  export type ClienteInternetSelectScalar = {
    id?: boolean
    nombre?: boolean
    telefono?: boolean
    direccion?: boolean
    dpi?: boolean
    observaciones?: boolean
    contactoReferenciaNombre?: boolean
    contactoReferenciaTelefono?: boolean
    estadoCliente?: boolean
    contrasenaWifi?: boolean
    ssidRouter?: boolean
    fechaInstalacion?: boolean
    asesorId?: boolean
    servicioId?: boolean
    municipioId?: boolean
    departamentoId?: boolean
    empresaId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type ClienteInternetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asesor?: boolean | ClienteInternet$asesorArgs<ExtArgs>
    servicio?: boolean | ServicioInternetDefaultArgs<ExtArgs>
    municipio?: boolean | ClienteInternet$municipioArgs<ExtArgs>
    departamento?: boolean | ClienteInternet$departamentoArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    ruta?: boolean | ClienteInternet$rutaArgs<ExtArgs>
    IP?: boolean | ClienteInternet$IPArgs<ExtArgs>
    ubicacion?: boolean | ClienteInternet$ubicacionArgs<ExtArgs>
    ticketSoporte?: boolean | ClienteInternet$ticketSoporteArgs<ExtArgs>
    saldoCliente?: boolean | ClienteInternet$saldoClienteArgs<ExtArgs>
    fotos?: boolean | ClienteInternet$fotosArgs<ExtArgs>
    clienteServicio?: boolean | ClienteInternet$clienteServicioArgs<ExtArgs>
    facturaInternet?: boolean | ClienteInternet$facturaInternetArgs<ExtArgs>
    PagoFacturaInternet?: boolean | ClienteInternet$PagoFacturaInternetArgs<ExtArgs>
    factura?: boolean | ClienteInternet$facturaArgs<ExtArgs>
    pagoFactura?: boolean | ClienteInternet$pagoFacturaArgs<ExtArgs>
    _count?: boolean | ClienteInternetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClienteInternetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    asesor?: boolean | ClienteInternet$asesorArgs<ExtArgs>
    servicio?: boolean | ServicioInternetDefaultArgs<ExtArgs>
    municipio?: boolean | ClienteInternet$municipioArgs<ExtArgs>
    departamento?: boolean | ClienteInternet$departamentoArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $ClienteInternetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteInternet"
    objects: {
      asesor: Prisma.$UsuarioPayload<ExtArgs> | null
      servicio: Prisma.$ServicioInternetPayload<ExtArgs>
      municipio: Prisma.$MunicipioPayload<ExtArgs> | null
      departamento: Prisma.$DepartamentoPayload<ExtArgs> | null
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      ruta: Prisma.$RutaPayload<ExtArgs>[]
      IP: Prisma.$IPPayload<ExtArgs> | null
      ubicacion: Prisma.$UbicacionPayload<ExtArgs> | null
      ticketSoporte: Prisma.$TicketSoportePayload<ExtArgs>[]
      saldoCliente: Prisma.$saldoClientePayload<ExtArgs> | null
      fotos: Prisma.$FotosPayload<ExtArgs>[]
      clienteServicio: Prisma.$ClienteServicioPayload<ExtArgs>[]
      facturaInternet: Prisma.$FacturaInternetPayload<ExtArgs>[]
      PagoFacturaInternet: Prisma.$PagoFacturaInternetPayload<ExtArgs>[]
      factura: Prisma.$FacturaPayload<ExtArgs>[]
      pagoFactura: Prisma.$PagoFacturaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      telefono: string | null
      direccion: string | null
      dpi: string | null
      observaciones: string | null
      contactoReferenciaNombre: string | null
      contactoReferenciaTelefono: string | null
      estadoCliente: $Enums.EstadoCliente
      contrasenaWifi: string
      ssidRouter: string | null
      fechaInstalacion: Date | null
      asesorId: number | null
      servicioId: number
      municipioId: number | null
      departamentoId: number | null
      empresaId: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["clienteInternet"]>
    composites: {}
  }

  type ClienteInternetGetPayload<S extends boolean | null | undefined | ClienteInternetDefaultArgs> = $Result.GetResult<Prisma.$ClienteInternetPayload, S>

  type ClienteInternetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteInternetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteInternetCountAggregateInputType | true
    }

  export interface ClienteInternetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteInternet'], meta: { name: 'ClienteInternet' } }
    /**
     * Find zero or one ClienteInternet that matches the filter.
     * @param {ClienteInternetFindUniqueArgs} args - Arguments to find a ClienteInternet
     * @example
     * // Get one ClienteInternet
     * const clienteInternet = await prisma.clienteInternet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteInternetFindUniqueArgs>(args: SelectSubset<T, ClienteInternetFindUniqueArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClienteInternet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteInternetFindUniqueOrThrowArgs} args - Arguments to find a ClienteInternet
     * @example
     * // Get one ClienteInternet
     * const clienteInternet = await prisma.clienteInternet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteInternetFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteInternetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClienteInternet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetFindFirstArgs} args - Arguments to find a ClienteInternet
     * @example
     * // Get one ClienteInternet
     * const clienteInternet = await prisma.clienteInternet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteInternetFindFirstArgs>(args?: SelectSubset<T, ClienteInternetFindFirstArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClienteInternet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetFindFirstOrThrowArgs} args - Arguments to find a ClienteInternet
     * @example
     * // Get one ClienteInternet
     * const clienteInternet = await prisma.clienteInternet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteInternetFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteInternetFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClienteInternets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteInternets
     * const clienteInternets = await prisma.clienteInternet.findMany()
     * 
     * // Get first 10 ClienteInternets
     * const clienteInternets = await prisma.clienteInternet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteInternetWithIdOnly = await prisma.clienteInternet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteInternetFindManyArgs>(args?: SelectSubset<T, ClienteInternetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClienteInternet.
     * @param {ClienteInternetCreateArgs} args - Arguments to create a ClienteInternet.
     * @example
     * // Create one ClienteInternet
     * const ClienteInternet = await prisma.clienteInternet.create({
     *   data: {
     *     // ... data to create a ClienteInternet
     *   }
     * })
     * 
     */
    create<T extends ClienteInternetCreateArgs>(args: SelectSubset<T, ClienteInternetCreateArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClienteInternets.
     * @param {ClienteInternetCreateManyArgs} args - Arguments to create many ClienteInternets.
     * @example
     * // Create many ClienteInternets
     * const clienteInternet = await prisma.clienteInternet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteInternetCreateManyArgs>(args?: SelectSubset<T, ClienteInternetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClienteInternets and returns the data saved in the database.
     * @param {ClienteInternetCreateManyAndReturnArgs} args - Arguments to create many ClienteInternets.
     * @example
     * // Create many ClienteInternets
     * const clienteInternet = await prisma.clienteInternet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClienteInternets and only return the `id`
     * const clienteInternetWithIdOnly = await prisma.clienteInternet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClienteInternetCreateManyAndReturnArgs>(args?: SelectSubset<T, ClienteInternetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClienteInternet.
     * @param {ClienteInternetDeleteArgs} args - Arguments to delete one ClienteInternet.
     * @example
     * // Delete one ClienteInternet
     * const ClienteInternet = await prisma.clienteInternet.delete({
     *   where: {
     *     // ... filter to delete one ClienteInternet
     *   }
     * })
     * 
     */
    delete<T extends ClienteInternetDeleteArgs>(args: SelectSubset<T, ClienteInternetDeleteArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClienteInternet.
     * @param {ClienteInternetUpdateArgs} args - Arguments to update one ClienteInternet.
     * @example
     * // Update one ClienteInternet
     * const clienteInternet = await prisma.clienteInternet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteInternetUpdateArgs>(args: SelectSubset<T, ClienteInternetUpdateArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClienteInternets.
     * @param {ClienteInternetDeleteManyArgs} args - Arguments to filter ClienteInternets to delete.
     * @example
     * // Delete a few ClienteInternets
     * const { count } = await prisma.clienteInternet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteInternetDeleteManyArgs>(args?: SelectSubset<T, ClienteInternetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteInternets
     * const clienteInternet = await prisma.clienteInternet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteInternetUpdateManyArgs>(args: SelectSubset<T, ClienteInternetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteInternet.
     * @param {ClienteInternetUpsertArgs} args - Arguments to update or create a ClienteInternet.
     * @example
     * // Update or create a ClienteInternet
     * const clienteInternet = await prisma.clienteInternet.upsert({
     *   create: {
     *     // ... data to create a ClienteInternet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteInternet we want to update
     *   }
     * })
     */
    upsert<T extends ClienteInternetUpsertArgs>(args: SelectSubset<T, ClienteInternetUpsertArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClienteInternets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetCountArgs} args - Arguments to filter ClienteInternets to count.
     * @example
     * // Count the number of ClienteInternets
     * const count = await prisma.clienteInternet.count({
     *   where: {
     *     // ... the filter for the ClienteInternets we want to count
     *   }
     * })
    **/
    count<T extends ClienteInternetCountArgs>(
      args?: Subset<T, ClienteInternetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteInternetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteInternetAggregateArgs>(args: Subset<T, ClienteInternetAggregateArgs>): Prisma.PrismaPromise<GetClienteInternetAggregateType<T>>

    /**
     * Group by ClienteInternet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInternetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteInternetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteInternetGroupByArgs['orderBy'] }
        : { orderBy?: ClienteInternetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteInternetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteInternetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteInternet model
   */
  readonly fields: ClienteInternetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteInternet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteInternetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    asesor<T extends ClienteInternet$asesorArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$asesorArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    servicio<T extends ServicioInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicioInternetDefaultArgs<ExtArgs>>): Prisma__ServicioInternetClient<$Result.GetResult<Prisma.$ServicioInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    municipio<T extends ClienteInternet$municipioArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$municipioArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    departamento<T extends ClienteInternet$departamentoArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$departamentoArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ruta<T extends ClienteInternet$rutaArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$rutaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findMany"> | Null>
    IP<T extends ClienteInternet$IPArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$IPArgs<ExtArgs>>): Prisma__IPClient<$Result.GetResult<Prisma.$IPPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ubicacion<T extends ClienteInternet$ubicacionArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$ubicacionArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ticketSoporte<T extends ClienteInternet$ticketSoporteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$ticketSoporteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findMany"> | Null>
    saldoCliente<T extends ClienteInternet$saldoClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$saldoClienteArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    fotos<T extends ClienteInternet$fotosArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$fotosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotosPayload<ExtArgs>, T, "findMany"> | Null>
    clienteServicio<T extends ClienteInternet$clienteServicioArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$clienteServicioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicioPayload<ExtArgs>, T, "findMany"> | Null>
    facturaInternet<T extends ClienteInternet$facturaInternetArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$facturaInternetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaInternetPayload<ExtArgs>, T, "findMany"> | Null>
    PagoFacturaInternet<T extends ClienteInternet$PagoFacturaInternetArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$PagoFacturaInternetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaInternetPayload<ExtArgs>, T, "findMany"> | Null>
    factura<T extends ClienteInternet$facturaArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$facturaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany"> | Null>
    pagoFactura<T extends ClienteInternet$pagoFacturaArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternet$pagoFacturaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagoFacturaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteInternet model
   */ 
  interface ClienteInternetFieldRefs {
    readonly id: FieldRef<"ClienteInternet", 'Int'>
    readonly nombre: FieldRef<"ClienteInternet", 'String'>
    readonly telefono: FieldRef<"ClienteInternet", 'String'>
    readonly direccion: FieldRef<"ClienteInternet", 'String'>
    readonly dpi: FieldRef<"ClienteInternet", 'String'>
    readonly observaciones: FieldRef<"ClienteInternet", 'String'>
    readonly contactoReferenciaNombre: FieldRef<"ClienteInternet", 'String'>
    readonly contactoReferenciaTelefono: FieldRef<"ClienteInternet", 'String'>
    readonly estadoCliente: FieldRef<"ClienteInternet", 'EstadoCliente'>
    readonly contrasenaWifi: FieldRef<"ClienteInternet", 'String'>
    readonly ssidRouter: FieldRef<"ClienteInternet", 'String'>
    readonly fechaInstalacion: FieldRef<"ClienteInternet", 'DateTime'>
    readonly asesorId: FieldRef<"ClienteInternet", 'Int'>
    readonly servicioId: FieldRef<"ClienteInternet", 'Int'>
    readonly municipioId: FieldRef<"ClienteInternet", 'Int'>
    readonly departamentoId: FieldRef<"ClienteInternet", 'Int'>
    readonly empresaId: FieldRef<"ClienteInternet", 'Int'>
    readonly creadoEn: FieldRef<"ClienteInternet", 'DateTime'>
    readonly actualizadoEn: FieldRef<"ClienteInternet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClienteInternet findUnique
   */
  export type ClienteInternetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInternet to fetch.
     */
    where: ClienteInternetWhereUniqueInput
  }

  /**
   * ClienteInternet findUniqueOrThrow
   */
  export type ClienteInternetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInternet to fetch.
     */
    where: ClienteInternetWhereUniqueInput
  }

  /**
   * ClienteInternet findFirst
   */
  export type ClienteInternetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInternet to fetch.
     */
    where?: ClienteInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInternets to fetch.
     */
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteInternets.
     */
    cursor?: ClienteInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteInternets.
     */
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * ClienteInternet findFirstOrThrow
   */
  export type ClienteInternetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInternet to fetch.
     */
    where?: ClienteInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInternets to fetch.
     */
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteInternets.
     */
    cursor?: ClienteInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInternets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteInternets.
     */
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * ClienteInternet findMany
   */
  export type ClienteInternetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInternets to fetch.
     */
    where?: ClienteInternetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInternets to fetch.
     */
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteInternets.
     */
    cursor?: ClienteInternetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInternets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInternets.
     */
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * ClienteInternet create
   */
  export type ClienteInternetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * The data needed to create a ClienteInternet.
     */
    data: XOR<ClienteInternetCreateInput, ClienteInternetUncheckedCreateInput>
  }

  /**
   * ClienteInternet createMany
   */
  export type ClienteInternetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteInternets.
     */
    data: ClienteInternetCreateManyInput | ClienteInternetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteInternet createManyAndReturn
   */
  export type ClienteInternetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClienteInternets.
     */
    data: ClienteInternetCreateManyInput | ClienteInternetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClienteInternet update
   */
  export type ClienteInternetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * The data needed to update a ClienteInternet.
     */
    data: XOR<ClienteInternetUpdateInput, ClienteInternetUncheckedUpdateInput>
    /**
     * Choose, which ClienteInternet to update.
     */
    where: ClienteInternetWhereUniqueInput
  }

  /**
   * ClienteInternet updateMany
   */
  export type ClienteInternetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteInternets.
     */
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyInput>
    /**
     * Filter which ClienteInternets to update
     */
    where?: ClienteInternetWhereInput
  }

  /**
   * ClienteInternet upsert
   */
  export type ClienteInternetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * The filter to search for the ClienteInternet to update in case it exists.
     */
    where: ClienteInternetWhereUniqueInput
    /**
     * In case the ClienteInternet found by the `where` argument doesn't exist, create a new ClienteInternet with this data.
     */
    create: XOR<ClienteInternetCreateInput, ClienteInternetUncheckedCreateInput>
    /**
     * In case the ClienteInternet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteInternetUpdateInput, ClienteInternetUncheckedUpdateInput>
  }

  /**
   * ClienteInternet delete
   */
  export type ClienteInternetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    /**
     * Filter which ClienteInternet to delete.
     */
    where: ClienteInternetWhereUniqueInput
  }

  /**
   * ClienteInternet deleteMany
   */
  export type ClienteInternetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteInternets to delete
     */
    where?: ClienteInternetWhereInput
  }

  /**
   * ClienteInternet.asesor
   */
  export type ClienteInternet$asesorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * ClienteInternet.municipio
   */
  export type ClienteInternet$municipioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    where?: MunicipioWhereInput
  }

  /**
   * ClienteInternet.departamento
   */
  export type ClienteInternet$departamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    where?: DepartamentoWhereInput
  }

  /**
   * ClienteInternet.ruta
   */
  export type ClienteInternet$rutaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    where?: RutaWhereInput
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    cursor?: RutaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RutaScalarFieldEnum | RutaScalarFieldEnum[]
  }

  /**
   * ClienteInternet.IP
   */
  export type ClienteInternet$IPArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IP
     */
    select?: IPSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IPInclude<ExtArgs> | null
    where?: IPWhereInput
  }

  /**
   * ClienteInternet.ubicacion
   */
  export type ClienteInternet$ubicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    where?: UbicacionWhereInput
  }

  /**
   * ClienteInternet.ticketSoporte
   */
  export type ClienteInternet$ticketSoporteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    where?: TicketSoporteWhereInput
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    cursor?: TicketSoporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * ClienteInternet.saldoCliente
   */
  export type ClienteInternet$saldoClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    where?: saldoClienteWhereInput
  }

  /**
   * ClienteInternet.fotos
   */
  export type ClienteInternet$fotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fotos
     */
    select?: FotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotosInclude<ExtArgs> | null
    where?: FotosWhereInput
    orderBy?: FotosOrderByWithRelationInput | FotosOrderByWithRelationInput[]
    cursor?: FotosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FotosScalarFieldEnum | FotosScalarFieldEnum[]
  }

  /**
   * ClienteInternet.clienteServicio
   */
  export type ClienteInternet$clienteServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServicio
     */
    select?: ClienteServicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicioInclude<ExtArgs> | null
    where?: ClienteServicioWhereInput
    orderBy?: ClienteServicioOrderByWithRelationInput | ClienteServicioOrderByWithRelationInput[]
    cursor?: ClienteServicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteServicioScalarFieldEnum | ClienteServicioScalarFieldEnum[]
  }

  /**
   * ClienteInternet.facturaInternet
   */
  export type ClienteInternet$facturaInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacturaInternet
     */
    select?: FacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInternetInclude<ExtArgs> | null
    where?: FacturaInternetWhereInput
    orderBy?: FacturaInternetOrderByWithRelationInput | FacturaInternetOrderByWithRelationInput[]
    cursor?: FacturaInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaInternetScalarFieldEnum | FacturaInternetScalarFieldEnum[]
  }

  /**
   * ClienteInternet.PagoFacturaInternet
   */
  export type ClienteInternet$PagoFacturaInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFacturaInternet
     */
    select?: PagoFacturaInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInternetInclude<ExtArgs> | null
    where?: PagoFacturaInternetWhereInput
    orderBy?: PagoFacturaInternetOrderByWithRelationInput | PagoFacturaInternetOrderByWithRelationInput[]
    cursor?: PagoFacturaInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoFacturaInternetScalarFieldEnum | PagoFacturaInternetScalarFieldEnum[]
  }

  /**
   * ClienteInternet.factura
   */
  export type ClienteInternet$facturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Factura
     */
    select?: FacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FacturaInclude<ExtArgs> | null
    where?: FacturaWhereInput
    orderBy?: FacturaOrderByWithRelationInput | FacturaOrderByWithRelationInput[]
    cursor?: FacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FacturaScalarFieldEnum | FacturaScalarFieldEnum[]
  }

  /**
   * ClienteInternet.pagoFactura
   */
  export type ClienteInternet$pagoFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PagoFactura
     */
    select?: PagoFacturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PagoFacturaInclude<ExtArgs> | null
    where?: PagoFacturaWhereInput
    orderBy?: PagoFacturaOrderByWithRelationInput | PagoFacturaOrderByWithRelationInput[]
    cursor?: PagoFacturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PagoFacturaScalarFieldEnum | PagoFacturaScalarFieldEnum[]
  }

  /**
   * ClienteInternet without action
   */
  export type ClienteInternetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
  }


  /**
   * Model saldoCliente
   */

  export type AggregateSaldoCliente = {
    _count: SaldoClienteCountAggregateOutputType | null
    _avg: SaldoClienteAvgAggregateOutputType | null
    _sum: SaldoClienteSumAggregateOutputType | null
    _min: SaldoClienteMinAggregateOutputType | null
    _max: SaldoClienteMaxAggregateOutputType | null
  }

  export type SaldoClienteAvgAggregateOutputType = {
    id: number | null
    saldoPendiente: number | null
    saldoFavor: number | null
    totalPagos: number | null
    clienteId: number | null
  }

  export type SaldoClienteSumAggregateOutputType = {
    id: number | null
    saldoPendiente: number | null
    saldoFavor: number | null
    totalPagos: number | null
    clienteId: number | null
  }

  export type SaldoClienteMinAggregateOutputType = {
    id: number | null
    saldoPendiente: number | null
    saldoFavor: number | null
    totalPagos: number | null
    clienteId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type SaldoClienteMaxAggregateOutputType = {
    id: number | null
    saldoPendiente: number | null
    saldoFavor: number | null
    totalPagos: number | null
    clienteId: number | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type SaldoClienteCountAggregateOutputType = {
    id: number
    saldoPendiente: number
    saldoFavor: number
    totalPagos: number
    clienteId: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type SaldoClienteAvgAggregateInputType = {
    id?: true
    saldoPendiente?: true
    saldoFavor?: true
    totalPagos?: true
    clienteId?: true
  }

  export type SaldoClienteSumAggregateInputType = {
    id?: true
    saldoPendiente?: true
    saldoFavor?: true
    totalPagos?: true
    clienteId?: true
  }

  export type SaldoClienteMinAggregateInputType = {
    id?: true
    saldoPendiente?: true
    saldoFavor?: true
    totalPagos?: true
    clienteId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type SaldoClienteMaxAggregateInputType = {
    id?: true
    saldoPendiente?: true
    saldoFavor?: true
    totalPagos?: true
    clienteId?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type SaldoClienteCountAggregateInputType = {
    id?: true
    saldoPendiente?: true
    saldoFavor?: true
    totalPagos?: true
    clienteId?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type SaldoClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which saldoCliente to aggregate.
     */
    where?: saldoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saldoClientes to fetch.
     */
    orderBy?: saldoClienteOrderByWithRelationInput | saldoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: saldoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saldoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saldoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned saldoClientes
    **/
    _count?: true | SaldoClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaldoClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaldoClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaldoClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaldoClienteMaxAggregateInputType
  }

  export type GetSaldoClienteAggregateType<T extends SaldoClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateSaldoCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaldoCliente[P]>
      : GetScalarType<T[P], AggregateSaldoCliente[P]>
  }




  export type saldoClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: saldoClienteWhereInput
    orderBy?: saldoClienteOrderByWithAggregationInput | saldoClienteOrderByWithAggregationInput[]
    by: SaldoClienteScalarFieldEnum[] | SaldoClienteScalarFieldEnum
    having?: saldoClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaldoClienteCountAggregateInputType | true
    _avg?: SaldoClienteAvgAggregateInputType
    _sum?: SaldoClienteSumAggregateInputType
    _min?: SaldoClienteMinAggregateInputType
    _max?: SaldoClienteMaxAggregateInputType
  }

  export type SaldoClienteGroupByOutputType = {
    id: number
    saldoPendiente: number | null
    saldoFavor: number | null
    totalPagos: number | null
    clienteId: number
    creadoEn: Date
    actualizadoEn: Date
    _count: SaldoClienteCountAggregateOutputType | null
    _avg: SaldoClienteAvgAggregateOutputType | null
    _sum: SaldoClienteSumAggregateOutputType | null
    _min: SaldoClienteMinAggregateOutputType | null
    _max: SaldoClienteMaxAggregateOutputType | null
  }

  type GetSaldoClienteGroupByPayload<T extends saldoClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaldoClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaldoClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaldoClienteGroupByOutputType[P]>
            : GetScalarType<T[P], SaldoClienteGroupByOutputType[P]>
        }
      >
    >


  export type saldoClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldoPendiente?: boolean
    saldoFavor?: boolean
    totalPagos?: boolean
    clienteId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saldoCliente"]>

  export type saldoClienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    saldoPendiente?: boolean
    saldoFavor?: boolean
    totalPagos?: boolean
    clienteId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saldoCliente"]>

  export type saldoClienteSelectScalar = {
    id?: boolean
    saldoPendiente?: boolean
    saldoFavor?: boolean
    totalPagos?: boolean
    clienteId?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type saldoClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }
  export type saldoClienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
  }

  export type $saldoClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "saldoCliente"
    objects: {
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      saldoPendiente: number | null
      saldoFavor: number | null
      totalPagos: number | null
      clienteId: number
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["saldoCliente"]>
    composites: {}
  }

  type saldoClienteGetPayload<S extends boolean | null | undefined | saldoClienteDefaultArgs> = $Result.GetResult<Prisma.$saldoClientePayload, S>

  type saldoClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<saldoClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaldoClienteCountAggregateInputType | true
    }

  export interface saldoClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['saldoCliente'], meta: { name: 'saldoCliente' } }
    /**
     * Find zero or one SaldoCliente that matches the filter.
     * @param {saldoClienteFindUniqueArgs} args - Arguments to find a SaldoCliente
     * @example
     * // Get one SaldoCliente
     * const saldoCliente = await prisma.saldoCliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends saldoClienteFindUniqueArgs>(args: SelectSubset<T, saldoClienteFindUniqueArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SaldoCliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {saldoClienteFindUniqueOrThrowArgs} args - Arguments to find a SaldoCliente
     * @example
     * // Get one SaldoCliente
     * const saldoCliente = await prisma.saldoCliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends saldoClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, saldoClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SaldoCliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saldoClienteFindFirstArgs} args - Arguments to find a SaldoCliente
     * @example
     * // Get one SaldoCliente
     * const saldoCliente = await prisma.saldoCliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends saldoClienteFindFirstArgs>(args?: SelectSubset<T, saldoClienteFindFirstArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SaldoCliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saldoClienteFindFirstOrThrowArgs} args - Arguments to find a SaldoCliente
     * @example
     * // Get one SaldoCliente
     * const saldoCliente = await prisma.saldoCliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends saldoClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, saldoClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SaldoClientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saldoClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaldoClientes
     * const saldoClientes = await prisma.saldoCliente.findMany()
     * 
     * // Get first 10 SaldoClientes
     * const saldoClientes = await prisma.saldoCliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saldoClienteWithIdOnly = await prisma.saldoCliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends saldoClienteFindManyArgs>(args?: SelectSubset<T, saldoClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SaldoCliente.
     * @param {saldoClienteCreateArgs} args - Arguments to create a SaldoCliente.
     * @example
     * // Create one SaldoCliente
     * const SaldoCliente = await prisma.saldoCliente.create({
     *   data: {
     *     // ... data to create a SaldoCliente
     *   }
     * })
     * 
     */
    create<T extends saldoClienteCreateArgs>(args: SelectSubset<T, saldoClienteCreateArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SaldoClientes.
     * @param {saldoClienteCreateManyArgs} args - Arguments to create many SaldoClientes.
     * @example
     * // Create many SaldoClientes
     * const saldoCliente = await prisma.saldoCliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends saldoClienteCreateManyArgs>(args?: SelectSubset<T, saldoClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaldoClientes and returns the data saved in the database.
     * @param {saldoClienteCreateManyAndReturnArgs} args - Arguments to create many SaldoClientes.
     * @example
     * // Create many SaldoClientes
     * const saldoCliente = await prisma.saldoCliente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaldoClientes and only return the `id`
     * const saldoClienteWithIdOnly = await prisma.saldoCliente.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends saldoClienteCreateManyAndReturnArgs>(args?: SelectSubset<T, saldoClienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SaldoCliente.
     * @param {saldoClienteDeleteArgs} args - Arguments to delete one SaldoCliente.
     * @example
     * // Delete one SaldoCliente
     * const SaldoCliente = await prisma.saldoCliente.delete({
     *   where: {
     *     // ... filter to delete one SaldoCliente
     *   }
     * })
     * 
     */
    delete<T extends saldoClienteDeleteArgs>(args: SelectSubset<T, saldoClienteDeleteArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SaldoCliente.
     * @param {saldoClienteUpdateArgs} args - Arguments to update one SaldoCliente.
     * @example
     * // Update one SaldoCliente
     * const saldoCliente = await prisma.saldoCliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends saldoClienteUpdateArgs>(args: SelectSubset<T, saldoClienteUpdateArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SaldoClientes.
     * @param {saldoClienteDeleteManyArgs} args - Arguments to filter SaldoClientes to delete.
     * @example
     * // Delete a few SaldoClientes
     * const { count } = await prisma.saldoCliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends saldoClienteDeleteManyArgs>(args?: SelectSubset<T, saldoClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaldoClientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saldoClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaldoClientes
     * const saldoCliente = await prisma.saldoCliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends saldoClienteUpdateManyArgs>(args: SelectSubset<T, saldoClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaldoCliente.
     * @param {saldoClienteUpsertArgs} args - Arguments to update or create a SaldoCliente.
     * @example
     * // Update or create a SaldoCliente
     * const saldoCliente = await prisma.saldoCliente.upsert({
     *   create: {
     *     // ... data to create a SaldoCliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaldoCliente we want to update
     *   }
     * })
     */
    upsert<T extends saldoClienteUpsertArgs>(args: SelectSubset<T, saldoClienteUpsertArgs<ExtArgs>>): Prisma__saldoClienteClient<$Result.GetResult<Prisma.$saldoClientePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SaldoClientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saldoClienteCountArgs} args - Arguments to filter SaldoClientes to count.
     * @example
     * // Count the number of SaldoClientes
     * const count = await prisma.saldoCliente.count({
     *   where: {
     *     // ... the filter for the SaldoClientes we want to count
     *   }
     * })
    **/
    count<T extends saldoClienteCountArgs>(
      args?: Subset<T, saldoClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaldoClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaldoCliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaldoClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaldoClienteAggregateArgs>(args: Subset<T, SaldoClienteAggregateArgs>): Prisma.PrismaPromise<GetSaldoClienteAggregateType<T>>

    /**
     * Group by SaldoCliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saldoClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends saldoClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: saldoClienteGroupByArgs['orderBy'] }
        : { orderBy?: saldoClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, saldoClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaldoClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the saldoCliente model
   */
  readonly fields: saldoClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for saldoCliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__saldoClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the saldoCliente model
   */ 
  interface saldoClienteFieldRefs {
    readonly id: FieldRef<"saldoCliente", 'Int'>
    readonly saldoPendiente: FieldRef<"saldoCliente", 'Float'>
    readonly saldoFavor: FieldRef<"saldoCliente", 'Float'>
    readonly totalPagos: FieldRef<"saldoCliente", 'Float'>
    readonly clienteId: FieldRef<"saldoCliente", 'Int'>
    readonly creadoEn: FieldRef<"saldoCliente", 'DateTime'>
    readonly actualizadoEn: FieldRef<"saldoCliente", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * saldoCliente findUnique
   */
  export type saldoClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * Filter, which saldoCliente to fetch.
     */
    where: saldoClienteWhereUniqueInput
  }

  /**
   * saldoCliente findUniqueOrThrow
   */
  export type saldoClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * Filter, which saldoCliente to fetch.
     */
    where: saldoClienteWhereUniqueInput
  }

  /**
   * saldoCliente findFirst
   */
  export type saldoClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * Filter, which saldoCliente to fetch.
     */
    where?: saldoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saldoClientes to fetch.
     */
    orderBy?: saldoClienteOrderByWithRelationInput | saldoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for saldoClientes.
     */
    cursor?: saldoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saldoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saldoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of saldoClientes.
     */
    distinct?: SaldoClienteScalarFieldEnum | SaldoClienteScalarFieldEnum[]
  }

  /**
   * saldoCliente findFirstOrThrow
   */
  export type saldoClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * Filter, which saldoCliente to fetch.
     */
    where?: saldoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saldoClientes to fetch.
     */
    orderBy?: saldoClienteOrderByWithRelationInput | saldoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for saldoClientes.
     */
    cursor?: saldoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saldoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saldoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of saldoClientes.
     */
    distinct?: SaldoClienteScalarFieldEnum | SaldoClienteScalarFieldEnum[]
  }

  /**
   * saldoCliente findMany
   */
  export type saldoClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * Filter, which saldoClientes to fetch.
     */
    where?: saldoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of saldoClientes to fetch.
     */
    orderBy?: saldoClienteOrderByWithRelationInput | saldoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing saldoClientes.
     */
    cursor?: saldoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` saldoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` saldoClientes.
     */
    skip?: number
    distinct?: SaldoClienteScalarFieldEnum | SaldoClienteScalarFieldEnum[]
  }

  /**
   * saldoCliente create
   */
  export type saldoClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a saldoCliente.
     */
    data: XOR<saldoClienteCreateInput, saldoClienteUncheckedCreateInput>
  }

  /**
   * saldoCliente createMany
   */
  export type saldoClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many saldoClientes.
     */
    data: saldoClienteCreateManyInput | saldoClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * saldoCliente createManyAndReturn
   */
  export type saldoClienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many saldoClientes.
     */
    data: saldoClienteCreateManyInput | saldoClienteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * saldoCliente update
   */
  export type saldoClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a saldoCliente.
     */
    data: XOR<saldoClienteUpdateInput, saldoClienteUncheckedUpdateInput>
    /**
     * Choose, which saldoCliente to update.
     */
    where: saldoClienteWhereUniqueInput
  }

  /**
   * saldoCliente updateMany
   */
  export type saldoClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update saldoClientes.
     */
    data: XOR<saldoClienteUpdateManyMutationInput, saldoClienteUncheckedUpdateManyInput>
    /**
     * Filter which saldoClientes to update
     */
    where?: saldoClienteWhereInput
  }

  /**
   * saldoCliente upsert
   */
  export type saldoClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the saldoCliente to update in case it exists.
     */
    where: saldoClienteWhereUniqueInput
    /**
     * In case the saldoCliente found by the `where` argument doesn't exist, create a new saldoCliente with this data.
     */
    create: XOR<saldoClienteCreateInput, saldoClienteUncheckedCreateInput>
    /**
     * In case the saldoCliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<saldoClienteUpdateInput, saldoClienteUncheckedUpdateInput>
  }

  /**
   * saldoCliente delete
   */
  export type saldoClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
    /**
     * Filter which saldoCliente to delete.
     */
    where: saldoClienteWhereUniqueInput
  }

  /**
   * saldoCliente deleteMany
   */
  export type saldoClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which saldoClientes to delete
     */
    where?: saldoClienteWhereInput
  }

  /**
   * saldoCliente without action
   */
  export type saldoClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the saldoCliente
     */
    select?: saldoClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: saldoClienteInclude<ExtArgs> | null
  }


  /**
   * Model Ubicacion
   */

  export type AggregateUbicacion = {
    _count: UbicacionCountAggregateOutputType | null
    _avg: UbicacionAvgAggregateOutputType | null
    _sum: UbicacionSumAggregateOutputType | null
    _min: UbicacionMinAggregateOutputType | null
    _max: UbicacionMaxAggregateOutputType | null
  }

  export type UbicacionAvgAggregateOutputType = {
    id: number | null
    latitud: number | null
    longitud: number | null
    clienteId: number | null
    empresaId: number | null
  }

  export type UbicacionSumAggregateOutputType = {
    id: number | null
    latitud: number | null
    longitud: number | null
    clienteId: number | null
    empresaId: number | null
  }

  export type UbicacionMinAggregateOutputType = {
    id: number | null
    creadoEn: Date | null
    latitud: number | null
    longitud: number | null
    clienteId: number | null
    empresaId: number | null
  }

  export type UbicacionMaxAggregateOutputType = {
    id: number | null
    creadoEn: Date | null
    latitud: number | null
    longitud: number | null
    clienteId: number | null
    empresaId: number | null
  }

  export type UbicacionCountAggregateOutputType = {
    id: number
    creadoEn: number
    latitud: number
    longitud: number
    clienteId: number
    empresaId: number
    _all: number
  }


  export type UbicacionAvgAggregateInputType = {
    id?: true
    latitud?: true
    longitud?: true
    clienteId?: true
    empresaId?: true
  }

  export type UbicacionSumAggregateInputType = {
    id?: true
    latitud?: true
    longitud?: true
    clienteId?: true
    empresaId?: true
  }

  export type UbicacionMinAggregateInputType = {
    id?: true
    creadoEn?: true
    latitud?: true
    longitud?: true
    clienteId?: true
    empresaId?: true
  }

  export type UbicacionMaxAggregateInputType = {
    id?: true
    creadoEn?: true
    latitud?: true
    longitud?: true
    clienteId?: true
    empresaId?: true
  }

  export type UbicacionCountAggregateInputType = {
    id?: true
    creadoEn?: true
    latitud?: true
    longitud?: true
    clienteId?: true
    empresaId?: true
    _all?: true
  }

  export type UbicacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ubicacion to aggregate.
     */
    where?: UbicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ubicacions to fetch.
     */
    orderBy?: UbicacionOrderByWithRelationInput | UbicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UbicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ubicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ubicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ubicacions
    **/
    _count?: true | UbicacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UbicacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UbicacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UbicacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UbicacionMaxAggregateInputType
  }

  export type GetUbicacionAggregateType<T extends UbicacionAggregateArgs> = {
        [P in keyof T & keyof AggregateUbicacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUbicacion[P]>
      : GetScalarType<T[P], AggregateUbicacion[P]>
  }




  export type UbicacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UbicacionWhereInput
    orderBy?: UbicacionOrderByWithAggregationInput | UbicacionOrderByWithAggregationInput[]
    by: UbicacionScalarFieldEnum[] | UbicacionScalarFieldEnum
    having?: UbicacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UbicacionCountAggregateInputType | true
    _avg?: UbicacionAvgAggregateInputType
    _sum?: UbicacionSumAggregateInputType
    _min?: UbicacionMinAggregateInputType
    _max?: UbicacionMaxAggregateInputType
  }

  export type UbicacionGroupByOutputType = {
    id: number
    creadoEn: Date
    latitud: number | null
    longitud: number | null
    clienteId: number
    empresaId: number
    _count: UbicacionCountAggregateOutputType | null
    _avg: UbicacionAvgAggregateOutputType | null
    _sum: UbicacionSumAggregateOutputType | null
    _min: UbicacionMinAggregateOutputType | null
    _max: UbicacionMaxAggregateOutputType | null
  }

  type GetUbicacionGroupByPayload<T extends UbicacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UbicacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UbicacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UbicacionGroupByOutputType[P]>
            : GetScalarType<T[P], UbicacionGroupByOutputType[P]>
        }
      >
    >


  export type UbicacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creadoEn?: boolean
    latitud?: boolean
    longitud?: boolean
    clienteId?: boolean
    empresaId?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ubicacion"]>

  export type UbicacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creadoEn?: boolean
    latitud?: boolean
    longitud?: boolean
    clienteId?: boolean
    empresaId?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ubicacion"]>

  export type UbicacionSelectScalar = {
    id?: boolean
    creadoEn?: boolean
    latitud?: boolean
    longitud?: boolean
    clienteId?: boolean
    empresaId?: boolean
  }

  export type UbicacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }
  export type UbicacionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $UbicacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ubicacion"
    objects: {
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
      empresa: Prisma.$EmpresaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      creadoEn: Date
      latitud: number | null
      longitud: number | null
      clienteId: number
      empresaId: number
    }, ExtArgs["result"]["ubicacion"]>
    composites: {}
  }

  type UbicacionGetPayload<S extends boolean | null | undefined | UbicacionDefaultArgs> = $Result.GetResult<Prisma.$UbicacionPayload, S>

  type UbicacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UbicacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UbicacionCountAggregateInputType | true
    }

  export interface UbicacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ubicacion'], meta: { name: 'Ubicacion' } }
    /**
     * Find zero or one Ubicacion that matches the filter.
     * @param {UbicacionFindUniqueArgs} args - Arguments to find a Ubicacion
     * @example
     * // Get one Ubicacion
     * const ubicacion = await prisma.ubicacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UbicacionFindUniqueArgs>(args: SelectSubset<T, UbicacionFindUniqueArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ubicacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UbicacionFindUniqueOrThrowArgs} args - Arguments to find a Ubicacion
     * @example
     * // Get one Ubicacion
     * const ubicacion = await prisma.ubicacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UbicacionFindUniqueOrThrowArgs>(args: SelectSubset<T, UbicacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ubicacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionFindFirstArgs} args - Arguments to find a Ubicacion
     * @example
     * // Get one Ubicacion
     * const ubicacion = await prisma.ubicacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UbicacionFindFirstArgs>(args?: SelectSubset<T, UbicacionFindFirstArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ubicacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionFindFirstOrThrowArgs} args - Arguments to find a Ubicacion
     * @example
     * // Get one Ubicacion
     * const ubicacion = await prisma.ubicacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UbicacionFindFirstOrThrowArgs>(args?: SelectSubset<T, UbicacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ubicacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ubicacions
     * const ubicacions = await prisma.ubicacion.findMany()
     * 
     * // Get first 10 Ubicacions
     * const ubicacions = await prisma.ubicacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ubicacionWithIdOnly = await prisma.ubicacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UbicacionFindManyArgs>(args?: SelectSubset<T, UbicacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ubicacion.
     * @param {UbicacionCreateArgs} args - Arguments to create a Ubicacion.
     * @example
     * // Create one Ubicacion
     * const Ubicacion = await prisma.ubicacion.create({
     *   data: {
     *     // ... data to create a Ubicacion
     *   }
     * })
     * 
     */
    create<T extends UbicacionCreateArgs>(args: SelectSubset<T, UbicacionCreateArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ubicacions.
     * @param {UbicacionCreateManyArgs} args - Arguments to create many Ubicacions.
     * @example
     * // Create many Ubicacions
     * const ubicacion = await prisma.ubicacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UbicacionCreateManyArgs>(args?: SelectSubset<T, UbicacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ubicacions and returns the data saved in the database.
     * @param {UbicacionCreateManyAndReturnArgs} args - Arguments to create many Ubicacions.
     * @example
     * // Create many Ubicacions
     * const ubicacion = await prisma.ubicacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ubicacions and only return the `id`
     * const ubicacionWithIdOnly = await prisma.ubicacion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UbicacionCreateManyAndReturnArgs>(args?: SelectSubset<T, UbicacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ubicacion.
     * @param {UbicacionDeleteArgs} args - Arguments to delete one Ubicacion.
     * @example
     * // Delete one Ubicacion
     * const Ubicacion = await prisma.ubicacion.delete({
     *   where: {
     *     // ... filter to delete one Ubicacion
     *   }
     * })
     * 
     */
    delete<T extends UbicacionDeleteArgs>(args: SelectSubset<T, UbicacionDeleteArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ubicacion.
     * @param {UbicacionUpdateArgs} args - Arguments to update one Ubicacion.
     * @example
     * // Update one Ubicacion
     * const ubicacion = await prisma.ubicacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UbicacionUpdateArgs>(args: SelectSubset<T, UbicacionUpdateArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ubicacions.
     * @param {UbicacionDeleteManyArgs} args - Arguments to filter Ubicacions to delete.
     * @example
     * // Delete a few Ubicacions
     * const { count } = await prisma.ubicacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UbicacionDeleteManyArgs>(args?: SelectSubset<T, UbicacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ubicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ubicacions
     * const ubicacion = await prisma.ubicacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UbicacionUpdateManyArgs>(args: SelectSubset<T, UbicacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ubicacion.
     * @param {UbicacionUpsertArgs} args - Arguments to update or create a Ubicacion.
     * @example
     * // Update or create a Ubicacion
     * const ubicacion = await prisma.ubicacion.upsert({
     *   create: {
     *     // ... data to create a Ubicacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ubicacion we want to update
     *   }
     * })
     */
    upsert<T extends UbicacionUpsertArgs>(args: SelectSubset<T, UbicacionUpsertArgs<ExtArgs>>): Prisma__UbicacionClient<$Result.GetResult<Prisma.$UbicacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ubicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionCountArgs} args - Arguments to filter Ubicacions to count.
     * @example
     * // Count the number of Ubicacions
     * const count = await prisma.ubicacion.count({
     *   where: {
     *     // ... the filter for the Ubicacions we want to count
     *   }
     * })
    **/
    count<T extends UbicacionCountArgs>(
      args?: Subset<T, UbicacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UbicacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ubicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UbicacionAggregateArgs>(args: Subset<T, UbicacionAggregateArgs>): Prisma.PrismaPromise<GetUbicacionAggregateType<T>>

    /**
     * Group by Ubicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UbicacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UbicacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UbicacionGroupByArgs['orderBy'] }
        : { orderBy?: UbicacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UbicacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUbicacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ubicacion model
   */
  readonly fields: UbicacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ubicacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UbicacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ubicacion model
   */ 
  interface UbicacionFieldRefs {
    readonly id: FieldRef<"Ubicacion", 'Int'>
    readonly creadoEn: FieldRef<"Ubicacion", 'DateTime'>
    readonly latitud: FieldRef<"Ubicacion", 'Float'>
    readonly longitud: FieldRef<"Ubicacion", 'Float'>
    readonly clienteId: FieldRef<"Ubicacion", 'Int'>
    readonly empresaId: FieldRef<"Ubicacion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ubicacion findUnique
   */
  export type UbicacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * Filter, which Ubicacion to fetch.
     */
    where: UbicacionWhereUniqueInput
  }

  /**
   * Ubicacion findUniqueOrThrow
   */
  export type UbicacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * Filter, which Ubicacion to fetch.
     */
    where: UbicacionWhereUniqueInput
  }

  /**
   * Ubicacion findFirst
   */
  export type UbicacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * Filter, which Ubicacion to fetch.
     */
    where?: UbicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ubicacions to fetch.
     */
    orderBy?: UbicacionOrderByWithRelationInput | UbicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ubicacions.
     */
    cursor?: UbicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ubicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ubicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ubicacions.
     */
    distinct?: UbicacionScalarFieldEnum | UbicacionScalarFieldEnum[]
  }

  /**
   * Ubicacion findFirstOrThrow
   */
  export type UbicacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * Filter, which Ubicacion to fetch.
     */
    where?: UbicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ubicacions to fetch.
     */
    orderBy?: UbicacionOrderByWithRelationInput | UbicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ubicacions.
     */
    cursor?: UbicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ubicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ubicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ubicacions.
     */
    distinct?: UbicacionScalarFieldEnum | UbicacionScalarFieldEnum[]
  }

  /**
   * Ubicacion findMany
   */
  export type UbicacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * Filter, which Ubicacions to fetch.
     */
    where?: UbicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ubicacions to fetch.
     */
    orderBy?: UbicacionOrderByWithRelationInput | UbicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ubicacions.
     */
    cursor?: UbicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ubicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ubicacions.
     */
    skip?: number
    distinct?: UbicacionScalarFieldEnum | UbicacionScalarFieldEnum[]
  }

  /**
   * Ubicacion create
   */
  export type UbicacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Ubicacion.
     */
    data: XOR<UbicacionCreateInput, UbicacionUncheckedCreateInput>
  }

  /**
   * Ubicacion createMany
   */
  export type UbicacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ubicacions.
     */
    data: UbicacionCreateManyInput | UbicacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ubicacion createManyAndReturn
   */
  export type UbicacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ubicacions.
     */
    data: UbicacionCreateManyInput | UbicacionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ubicacion update
   */
  export type UbicacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Ubicacion.
     */
    data: XOR<UbicacionUpdateInput, UbicacionUncheckedUpdateInput>
    /**
     * Choose, which Ubicacion to update.
     */
    where: UbicacionWhereUniqueInput
  }

  /**
   * Ubicacion updateMany
   */
  export type UbicacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ubicacions.
     */
    data: XOR<UbicacionUpdateManyMutationInput, UbicacionUncheckedUpdateManyInput>
    /**
     * Filter which Ubicacions to update
     */
    where?: UbicacionWhereInput
  }

  /**
   * Ubicacion upsert
   */
  export type UbicacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Ubicacion to update in case it exists.
     */
    where: UbicacionWhereUniqueInput
    /**
     * In case the Ubicacion found by the `where` argument doesn't exist, create a new Ubicacion with this data.
     */
    create: XOR<UbicacionCreateInput, UbicacionUncheckedCreateInput>
    /**
     * In case the Ubicacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UbicacionUpdateInput, UbicacionUncheckedUpdateInput>
  }

  /**
   * Ubicacion delete
   */
  export type UbicacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
    /**
     * Filter which Ubicacion to delete.
     */
    where: UbicacionWhereUniqueInput
  }

  /**
   * Ubicacion deleteMany
   */
  export type UbicacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ubicacions to delete
     */
    where?: UbicacionWhereInput
  }

  /**
   * Ubicacion without action
   */
  export type UbicacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ubicacion
     */
    select?: UbicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UbicacionInclude<ExtArgs> | null
  }


  /**
   * Model Departamento
   */

  export type AggregateDepartamento = {
    _count: DepartamentoCountAggregateOutputType | null
    _avg: DepartamentoAvgAggregateOutputType | null
    _sum: DepartamentoSumAggregateOutputType | null
    _min: DepartamentoMinAggregateOutputType | null
    _max: DepartamentoMaxAggregateOutputType | null
  }

  export type DepartamentoAvgAggregateOutputType = {
    id: number | null
  }

  export type DepartamentoSumAggregateOutputType = {
    id: number | null
  }

  export type DepartamentoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type DepartamentoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type DepartamentoCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type DepartamentoAvgAggregateInputType = {
    id?: true
  }

  export type DepartamentoSumAggregateInputType = {
    id?: true
  }

  export type DepartamentoMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type DepartamentoMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type DepartamentoCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type DepartamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departamento to aggregate.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departamentos
    **/
    _count?: true | DepartamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartamentoMaxAggregateInputType
  }

  export type GetDepartamentoAggregateType<T extends DepartamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartamento[P]>
      : GetScalarType<T[P], AggregateDepartamento[P]>
  }




  export type DepartamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartamentoWhereInput
    orderBy?: DepartamentoOrderByWithAggregationInput | DepartamentoOrderByWithAggregationInput[]
    by: DepartamentoScalarFieldEnum[] | DepartamentoScalarFieldEnum
    having?: DepartamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartamentoCountAggregateInputType | true
    _avg?: DepartamentoAvgAggregateInputType
    _sum?: DepartamentoSumAggregateInputType
    _min?: DepartamentoMinAggregateInputType
    _max?: DepartamentoMaxAggregateInputType
  }

  export type DepartamentoGroupByOutputType = {
    id: number
    nombre: string
    _count: DepartamentoCountAggregateOutputType | null
    _avg: DepartamentoAvgAggregateOutputType | null
    _sum: DepartamentoSumAggregateOutputType | null
    _min: DepartamentoMinAggregateOutputType | null
    _max: DepartamentoMaxAggregateOutputType | null
  }

  type GetDepartamentoGroupByPayload<T extends DepartamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartamentoGroupByOutputType[P]>
            : GetScalarType<T[P], DepartamentoGroupByOutputType[P]>
        }
      >
    >


  export type DepartamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    municipios?: boolean | Departamento$municipiosArgs<ExtArgs>
    clientes?: boolean | Departamento$clientesArgs<ExtArgs>
    _count?: boolean | DepartamentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departamento"]>

  export type DepartamentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["departamento"]>

  export type DepartamentoSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type DepartamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    municipios?: boolean | Departamento$municipiosArgs<ExtArgs>
    clientes?: boolean | Departamento$clientesArgs<ExtArgs>
    _count?: boolean | DepartamentoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartamentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepartamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Departamento"
    objects: {
      municipios: Prisma.$MunicipioPayload<ExtArgs>[]
      clientes: Prisma.$ClienteInternetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["departamento"]>
    composites: {}
  }

  type DepartamentoGetPayload<S extends boolean | null | undefined | DepartamentoDefaultArgs> = $Result.GetResult<Prisma.$DepartamentoPayload, S>

  type DepartamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartamentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartamentoCountAggregateInputType | true
    }

  export interface DepartamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Departamento'], meta: { name: 'Departamento' } }
    /**
     * Find zero or one Departamento that matches the filter.
     * @param {DepartamentoFindUniqueArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartamentoFindUniqueArgs>(args: SelectSubset<T, DepartamentoFindUniqueArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Departamento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartamentoFindUniqueOrThrowArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Departamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoFindFirstArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartamentoFindFirstArgs>(args?: SelectSubset<T, DepartamentoFindFirstArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Departamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoFindFirstOrThrowArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departamentos
     * const departamentos = await prisma.departamento.findMany()
     * 
     * // Get first 10 Departamentos
     * const departamentos = await prisma.departamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departamentoWithIdOnly = await prisma.departamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartamentoFindManyArgs>(args?: SelectSubset<T, DepartamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Departamento.
     * @param {DepartamentoCreateArgs} args - Arguments to create a Departamento.
     * @example
     * // Create one Departamento
     * const Departamento = await prisma.departamento.create({
     *   data: {
     *     // ... data to create a Departamento
     *   }
     * })
     * 
     */
    create<T extends DepartamentoCreateArgs>(args: SelectSubset<T, DepartamentoCreateArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departamentos.
     * @param {DepartamentoCreateManyArgs} args - Arguments to create many Departamentos.
     * @example
     * // Create many Departamentos
     * const departamento = await prisma.departamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartamentoCreateManyArgs>(args?: SelectSubset<T, DepartamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departamentos and returns the data saved in the database.
     * @param {DepartamentoCreateManyAndReturnArgs} args - Arguments to create many Departamentos.
     * @example
     * // Create many Departamentos
     * const departamento = await prisma.departamento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departamentos and only return the `id`
     * const departamentoWithIdOnly = await prisma.departamento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartamentoCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartamentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Departamento.
     * @param {DepartamentoDeleteArgs} args - Arguments to delete one Departamento.
     * @example
     * // Delete one Departamento
     * const Departamento = await prisma.departamento.delete({
     *   where: {
     *     // ... filter to delete one Departamento
     *   }
     * })
     * 
     */
    delete<T extends DepartamentoDeleteArgs>(args: SelectSubset<T, DepartamentoDeleteArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Departamento.
     * @param {DepartamentoUpdateArgs} args - Arguments to update one Departamento.
     * @example
     * // Update one Departamento
     * const departamento = await prisma.departamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartamentoUpdateArgs>(args: SelectSubset<T, DepartamentoUpdateArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departamentos.
     * @param {DepartamentoDeleteManyArgs} args - Arguments to filter Departamentos to delete.
     * @example
     * // Delete a few Departamentos
     * const { count } = await prisma.departamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartamentoDeleteManyArgs>(args?: SelectSubset<T, DepartamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departamentos
     * const departamento = await prisma.departamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartamentoUpdateManyArgs>(args: SelectSubset<T, DepartamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Departamento.
     * @param {DepartamentoUpsertArgs} args - Arguments to update or create a Departamento.
     * @example
     * // Update or create a Departamento
     * const departamento = await prisma.departamento.upsert({
     *   create: {
     *     // ... data to create a Departamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Departamento we want to update
     *   }
     * })
     */
    upsert<T extends DepartamentoUpsertArgs>(args: SelectSubset<T, DepartamentoUpsertArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoCountArgs} args - Arguments to filter Departamentos to count.
     * @example
     * // Count the number of Departamentos
     * const count = await prisma.departamento.count({
     *   where: {
     *     // ... the filter for the Departamentos we want to count
     *   }
     * })
    **/
    count<T extends DepartamentoCountArgs>(
      args?: Subset<T, DepartamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Departamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartamentoAggregateArgs>(args: Subset<T, DepartamentoAggregateArgs>): Prisma.PrismaPromise<GetDepartamentoAggregateType<T>>

    /**
     * Group by Departamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartamentoGroupByArgs['orderBy'] }
        : { orderBy?: DepartamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Departamento model
   */
  readonly fields: DepartamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Departamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    municipios<T extends Departamento$municipiosArgs<ExtArgs> = {}>(args?: Subset<T, Departamento$municipiosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findMany"> | Null>
    clientes<T extends Departamento$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Departamento$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Departamento model
   */ 
  interface DepartamentoFieldRefs {
    readonly id: FieldRef<"Departamento", 'Int'>
    readonly nombre: FieldRef<"Departamento", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Departamento findUnique
   */
  export type DepartamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento findUniqueOrThrow
   */
  export type DepartamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento findFirst
   */
  export type DepartamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departamentos.
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departamentos.
     */
    distinct?: DepartamentoScalarFieldEnum | DepartamentoScalarFieldEnum[]
  }

  /**
   * Departamento findFirstOrThrow
   */
  export type DepartamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamento to fetch.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departamentos.
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departamentos.
     */
    distinct?: DepartamentoScalarFieldEnum | DepartamentoScalarFieldEnum[]
  }

  /**
   * Departamento findMany
   */
  export type DepartamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter, which Departamentos to fetch.
     */
    where?: DepartamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departamentos to fetch.
     */
    orderBy?: DepartamentoOrderByWithRelationInput | DepartamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departamentos.
     */
    cursor?: DepartamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departamentos.
     */
    skip?: number
    distinct?: DepartamentoScalarFieldEnum | DepartamentoScalarFieldEnum[]
  }

  /**
   * Departamento create
   */
  export type DepartamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Departamento.
     */
    data: XOR<DepartamentoCreateInput, DepartamentoUncheckedCreateInput>
  }

  /**
   * Departamento createMany
   */
  export type DepartamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departamentos.
     */
    data: DepartamentoCreateManyInput | DepartamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Departamento createManyAndReturn
   */
  export type DepartamentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departamentos.
     */
    data: DepartamentoCreateManyInput | DepartamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Departamento update
   */
  export type DepartamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Departamento.
     */
    data: XOR<DepartamentoUpdateInput, DepartamentoUncheckedUpdateInput>
    /**
     * Choose, which Departamento to update.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento updateMany
   */
  export type DepartamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departamentos.
     */
    data: XOR<DepartamentoUpdateManyMutationInput, DepartamentoUncheckedUpdateManyInput>
    /**
     * Filter which Departamentos to update
     */
    where?: DepartamentoWhereInput
  }

  /**
   * Departamento upsert
   */
  export type DepartamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Departamento to update in case it exists.
     */
    where: DepartamentoWhereUniqueInput
    /**
     * In case the Departamento found by the `where` argument doesn't exist, create a new Departamento with this data.
     */
    create: XOR<DepartamentoCreateInput, DepartamentoUncheckedCreateInput>
    /**
     * In case the Departamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartamentoUpdateInput, DepartamentoUncheckedUpdateInput>
  }

  /**
   * Departamento delete
   */
  export type DepartamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
    /**
     * Filter which Departamento to delete.
     */
    where: DepartamentoWhereUniqueInput
  }

  /**
   * Departamento deleteMany
   */
  export type DepartamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departamentos to delete
     */
    where?: DepartamentoWhereInput
  }

  /**
   * Departamento.municipios
   */
  export type Departamento$municipiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    where?: MunicipioWhereInput
    orderBy?: MunicipioOrderByWithRelationInput | MunicipioOrderByWithRelationInput[]
    cursor?: MunicipioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }

  /**
   * Departamento.clientes
   */
  export type Departamento$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    cursor?: ClienteInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * Departamento without action
   */
  export type DepartamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departamento
     */
    select?: DepartamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartamentoInclude<ExtArgs> | null
  }


  /**
   * Model Municipio
   */

  export type AggregateMunicipio = {
    _count: MunicipioCountAggregateOutputType | null
    _avg: MunicipioAvgAggregateOutputType | null
    _sum: MunicipioSumAggregateOutputType | null
    _min: MunicipioMinAggregateOutputType | null
    _max: MunicipioMaxAggregateOutputType | null
  }

  export type MunicipioAvgAggregateOutputType = {
    id: number | null
    departamentoId: number | null
  }

  export type MunicipioSumAggregateOutputType = {
    id: number | null
    departamentoId: number | null
  }

  export type MunicipioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    departamentoId: number | null
  }

  export type MunicipioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    departamentoId: number | null
  }

  export type MunicipioCountAggregateOutputType = {
    id: number
    nombre: number
    departamentoId: number
    _all: number
  }


  export type MunicipioAvgAggregateInputType = {
    id?: true
    departamentoId?: true
  }

  export type MunicipioSumAggregateInputType = {
    id?: true
    departamentoId?: true
  }

  export type MunicipioMinAggregateInputType = {
    id?: true
    nombre?: true
    departamentoId?: true
  }

  export type MunicipioMaxAggregateInputType = {
    id?: true
    nombre?: true
    departamentoId?: true
  }

  export type MunicipioCountAggregateInputType = {
    id?: true
    nombre?: true
    departamentoId?: true
    _all?: true
  }

  export type MunicipioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Municipio to aggregate.
     */
    where?: MunicipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipios to fetch.
     */
    orderBy?: MunicipioOrderByWithRelationInput | MunicipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MunicipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Municipios
    **/
    _count?: true | MunicipioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MunicipioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MunicipioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MunicipioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MunicipioMaxAggregateInputType
  }

  export type GetMunicipioAggregateType<T extends MunicipioAggregateArgs> = {
        [P in keyof T & keyof AggregateMunicipio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMunicipio[P]>
      : GetScalarType<T[P], AggregateMunicipio[P]>
  }




  export type MunicipioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MunicipioWhereInput
    orderBy?: MunicipioOrderByWithAggregationInput | MunicipioOrderByWithAggregationInput[]
    by: MunicipioScalarFieldEnum[] | MunicipioScalarFieldEnum
    having?: MunicipioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MunicipioCountAggregateInputType | true
    _avg?: MunicipioAvgAggregateInputType
    _sum?: MunicipioSumAggregateInputType
    _min?: MunicipioMinAggregateInputType
    _max?: MunicipioMaxAggregateInputType
  }

  export type MunicipioGroupByOutputType = {
    id: number
    nombre: string
    departamentoId: number
    _count: MunicipioCountAggregateOutputType | null
    _avg: MunicipioAvgAggregateOutputType | null
    _sum: MunicipioSumAggregateOutputType | null
    _min: MunicipioMinAggregateOutputType | null
    _max: MunicipioMaxAggregateOutputType | null
  }

  type GetMunicipioGroupByPayload<T extends MunicipioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MunicipioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MunicipioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MunicipioGroupByOutputType[P]>
            : GetScalarType<T[P], MunicipioGroupByOutputType[P]>
        }
      >
    >


  export type MunicipioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    departamentoId?: boolean
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
    clientes?: boolean | Municipio$clientesArgs<ExtArgs>
    _count?: boolean | MunicipioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["municipio"]>

  export type MunicipioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    departamentoId?: boolean
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["municipio"]>

  export type MunicipioSelectScalar = {
    id?: boolean
    nombre?: boolean
    departamentoId?: boolean
  }

  export type MunicipioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
    clientes?: boolean | Municipio$clientesArgs<ExtArgs>
    _count?: boolean | MunicipioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MunicipioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departamento?: boolean | DepartamentoDefaultArgs<ExtArgs>
  }

  export type $MunicipioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Municipio"
    objects: {
      departamento: Prisma.$DepartamentoPayload<ExtArgs>
      clientes: Prisma.$ClienteInternetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      departamentoId: number
    }, ExtArgs["result"]["municipio"]>
    composites: {}
  }

  type MunicipioGetPayload<S extends boolean | null | undefined | MunicipioDefaultArgs> = $Result.GetResult<Prisma.$MunicipioPayload, S>

  type MunicipioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MunicipioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MunicipioCountAggregateInputType | true
    }

  export interface MunicipioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Municipio'], meta: { name: 'Municipio' } }
    /**
     * Find zero or one Municipio that matches the filter.
     * @param {MunicipioFindUniqueArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MunicipioFindUniqueArgs>(args: SelectSubset<T, MunicipioFindUniqueArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Municipio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MunicipioFindUniqueOrThrowArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MunicipioFindUniqueOrThrowArgs>(args: SelectSubset<T, MunicipioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Municipio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioFindFirstArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MunicipioFindFirstArgs>(args?: SelectSubset<T, MunicipioFindFirstArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Municipio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioFindFirstOrThrowArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MunicipioFindFirstOrThrowArgs>(args?: SelectSubset<T, MunicipioFindFirstOrThrowArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Municipios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Municipios
     * const municipios = await prisma.municipio.findMany()
     * 
     * // Get first 10 Municipios
     * const municipios = await prisma.municipio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const municipioWithIdOnly = await prisma.municipio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MunicipioFindManyArgs>(args?: SelectSubset<T, MunicipioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Municipio.
     * @param {MunicipioCreateArgs} args - Arguments to create a Municipio.
     * @example
     * // Create one Municipio
     * const Municipio = await prisma.municipio.create({
     *   data: {
     *     // ... data to create a Municipio
     *   }
     * })
     * 
     */
    create<T extends MunicipioCreateArgs>(args: SelectSubset<T, MunicipioCreateArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Municipios.
     * @param {MunicipioCreateManyArgs} args - Arguments to create many Municipios.
     * @example
     * // Create many Municipios
     * const municipio = await prisma.municipio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MunicipioCreateManyArgs>(args?: SelectSubset<T, MunicipioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Municipios and returns the data saved in the database.
     * @param {MunicipioCreateManyAndReturnArgs} args - Arguments to create many Municipios.
     * @example
     * // Create many Municipios
     * const municipio = await prisma.municipio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Municipios and only return the `id`
     * const municipioWithIdOnly = await prisma.municipio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MunicipioCreateManyAndReturnArgs>(args?: SelectSubset<T, MunicipioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Municipio.
     * @param {MunicipioDeleteArgs} args - Arguments to delete one Municipio.
     * @example
     * // Delete one Municipio
     * const Municipio = await prisma.municipio.delete({
     *   where: {
     *     // ... filter to delete one Municipio
     *   }
     * })
     * 
     */
    delete<T extends MunicipioDeleteArgs>(args: SelectSubset<T, MunicipioDeleteArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Municipio.
     * @param {MunicipioUpdateArgs} args - Arguments to update one Municipio.
     * @example
     * // Update one Municipio
     * const municipio = await prisma.municipio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MunicipioUpdateArgs>(args: SelectSubset<T, MunicipioUpdateArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Municipios.
     * @param {MunicipioDeleteManyArgs} args - Arguments to filter Municipios to delete.
     * @example
     * // Delete a few Municipios
     * const { count } = await prisma.municipio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MunicipioDeleteManyArgs>(args?: SelectSubset<T, MunicipioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Municipios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Municipios
     * const municipio = await prisma.municipio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MunicipioUpdateManyArgs>(args: SelectSubset<T, MunicipioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Municipio.
     * @param {MunicipioUpsertArgs} args - Arguments to update or create a Municipio.
     * @example
     * // Update or create a Municipio
     * const municipio = await prisma.municipio.upsert({
     *   create: {
     *     // ... data to create a Municipio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Municipio we want to update
     *   }
     * })
     */
    upsert<T extends MunicipioUpsertArgs>(args: SelectSubset<T, MunicipioUpsertArgs<ExtArgs>>): Prisma__MunicipioClient<$Result.GetResult<Prisma.$MunicipioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Municipios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioCountArgs} args - Arguments to filter Municipios to count.
     * @example
     * // Count the number of Municipios
     * const count = await prisma.municipio.count({
     *   where: {
     *     // ... the filter for the Municipios we want to count
     *   }
     * })
    **/
    count<T extends MunicipioCountArgs>(
      args?: Subset<T, MunicipioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MunicipioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Municipio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MunicipioAggregateArgs>(args: Subset<T, MunicipioAggregateArgs>): Prisma.PrismaPromise<GetMunicipioAggregateType<T>>

    /**
     * Group by Municipio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MunicipioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MunicipioGroupByArgs['orderBy'] }
        : { orderBy?: MunicipioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MunicipioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMunicipioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Municipio model
   */
  readonly fields: MunicipioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Municipio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MunicipioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departamento<T extends DepartamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartamentoDefaultArgs<ExtArgs>>): Prisma__DepartamentoClient<$Result.GetResult<Prisma.$DepartamentoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    clientes<T extends Municipio$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Municipio$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Municipio model
   */ 
  interface MunicipioFieldRefs {
    readonly id: FieldRef<"Municipio", 'Int'>
    readonly nombre: FieldRef<"Municipio", 'String'>
    readonly departamentoId: FieldRef<"Municipio", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Municipio findUnique
   */
  export type MunicipioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * Filter, which Municipio to fetch.
     */
    where: MunicipioWhereUniqueInput
  }

  /**
   * Municipio findUniqueOrThrow
   */
  export type MunicipioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * Filter, which Municipio to fetch.
     */
    where: MunicipioWhereUniqueInput
  }

  /**
   * Municipio findFirst
   */
  export type MunicipioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * Filter, which Municipio to fetch.
     */
    where?: MunicipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipios to fetch.
     */
    orderBy?: MunicipioOrderByWithRelationInput | MunicipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Municipios.
     */
    cursor?: MunicipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Municipios.
     */
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }

  /**
   * Municipio findFirstOrThrow
   */
  export type MunicipioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * Filter, which Municipio to fetch.
     */
    where?: MunicipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipios to fetch.
     */
    orderBy?: MunicipioOrderByWithRelationInput | MunicipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Municipios.
     */
    cursor?: MunicipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Municipios.
     */
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }

  /**
   * Municipio findMany
   */
  export type MunicipioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * Filter, which Municipios to fetch.
     */
    where?: MunicipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Municipios to fetch.
     */
    orderBy?: MunicipioOrderByWithRelationInput | MunicipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Municipios.
     */
    cursor?: MunicipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Municipios.
     */
    skip?: number
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }

  /**
   * Municipio create
   */
  export type MunicipioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * The data needed to create a Municipio.
     */
    data: XOR<MunicipioCreateInput, MunicipioUncheckedCreateInput>
  }

  /**
   * Municipio createMany
   */
  export type MunicipioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Municipios.
     */
    data: MunicipioCreateManyInput | MunicipioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Municipio createManyAndReturn
   */
  export type MunicipioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Municipios.
     */
    data: MunicipioCreateManyInput | MunicipioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Municipio update
   */
  export type MunicipioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * The data needed to update a Municipio.
     */
    data: XOR<MunicipioUpdateInput, MunicipioUncheckedUpdateInput>
    /**
     * Choose, which Municipio to update.
     */
    where: MunicipioWhereUniqueInput
  }

  /**
   * Municipio updateMany
   */
  export type MunicipioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Municipios.
     */
    data: XOR<MunicipioUpdateManyMutationInput, MunicipioUncheckedUpdateManyInput>
    /**
     * Filter which Municipios to update
     */
    where?: MunicipioWhereInput
  }

  /**
   * Municipio upsert
   */
  export type MunicipioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * The filter to search for the Municipio to update in case it exists.
     */
    where: MunicipioWhereUniqueInput
    /**
     * In case the Municipio found by the `where` argument doesn't exist, create a new Municipio with this data.
     */
    create: XOR<MunicipioCreateInput, MunicipioUncheckedCreateInput>
    /**
     * In case the Municipio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MunicipioUpdateInput, MunicipioUncheckedUpdateInput>
  }

  /**
   * Municipio delete
   */
  export type MunicipioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
    /**
     * Filter which Municipio to delete.
     */
    where: MunicipioWhereUniqueInput
  }

  /**
   * Municipio deleteMany
   */
  export type MunicipioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Municipios to delete
     */
    where?: MunicipioWhereInput
  }

  /**
   * Municipio.clientes
   */
  export type Municipio$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    cursor?: ClienteInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * Municipio without action
   */
  export type MunicipioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Municipio
     */
    select?: MunicipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MunicipioInclude<ExtArgs> | null
  }


  /**
   * Model Ruta
   */

  export type AggregateRuta = {
    _count: RutaCountAggregateOutputType | null
    _avg: RutaAvgAggregateOutputType | null
    _sum: RutaSumAggregateOutputType | null
    _min: RutaMinAggregateOutputType | null
    _max: RutaMaxAggregateOutputType | null
  }

  export type RutaAvgAggregateOutputType = {
    id: number | null
    cobradorId: number | null
    cobrados: number | null
    montoCobrado: number | null
    EmpresaId: number | null
  }

  export type RutaSumAggregateOutputType = {
    id: number | null
    cobradorId: number | null
    cobrados: number | null
    montoCobrado: number | null
    EmpresaId: number | null
  }

  export type RutaMinAggregateOutputType = {
    id: number | null
    nombreRuta: string | null
    cobradorId: number | null
    cobrados: number | null
    montoCobrado: number | null
    estadoRuta: $Enums.EstadoRuta | null
    EmpresaId: number | null
  }

  export type RutaMaxAggregateOutputType = {
    id: number | null
    nombreRuta: string | null
    cobradorId: number | null
    cobrados: number | null
    montoCobrado: number | null
    estadoRuta: $Enums.EstadoRuta | null
    EmpresaId: number | null
  }

  export type RutaCountAggregateOutputType = {
    id: number
    nombreRuta: number
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: number
    EmpresaId: number
    _all: number
  }


  export type RutaAvgAggregateInputType = {
    id?: true
    cobradorId?: true
    cobrados?: true
    montoCobrado?: true
    EmpresaId?: true
  }

  export type RutaSumAggregateInputType = {
    id?: true
    cobradorId?: true
    cobrados?: true
    montoCobrado?: true
    EmpresaId?: true
  }

  export type RutaMinAggregateInputType = {
    id?: true
    nombreRuta?: true
    cobradorId?: true
    cobrados?: true
    montoCobrado?: true
    estadoRuta?: true
    EmpresaId?: true
  }

  export type RutaMaxAggregateInputType = {
    id?: true
    nombreRuta?: true
    cobradorId?: true
    cobrados?: true
    montoCobrado?: true
    estadoRuta?: true
    EmpresaId?: true
  }

  export type RutaCountAggregateInputType = {
    id?: true
    nombreRuta?: true
    cobradorId?: true
    cobrados?: true
    montoCobrado?: true
    estadoRuta?: true
    EmpresaId?: true
    _all?: true
  }

  export type RutaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ruta to aggregate.
     */
    where?: RutaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RutaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rutas
    **/
    _count?: true | RutaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RutaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RutaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RutaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RutaMaxAggregateInputType
  }

  export type GetRutaAggregateType<T extends RutaAggregateArgs> = {
        [P in keyof T & keyof AggregateRuta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRuta[P]>
      : GetScalarType<T[P], AggregateRuta[P]>
  }




  export type RutaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RutaWhereInput
    orderBy?: RutaOrderByWithAggregationInput | RutaOrderByWithAggregationInput[]
    by: RutaScalarFieldEnum[] | RutaScalarFieldEnum
    having?: RutaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RutaCountAggregateInputType | true
    _avg?: RutaAvgAggregateInputType
    _sum?: RutaSumAggregateInputType
    _min?: RutaMinAggregateInputType
    _max?: RutaMaxAggregateInputType
  }

  export type RutaGroupByOutputType = {
    id: number
    nombreRuta: string
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    EmpresaId: number
    _count: RutaCountAggregateOutputType | null
    _avg: RutaAvgAggregateOutputType | null
    _sum: RutaSumAggregateOutputType | null
    _min: RutaMinAggregateOutputType | null
    _max: RutaMaxAggregateOutputType | null
  }

  type GetRutaGroupByPayload<T extends RutaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RutaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RutaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RutaGroupByOutputType[P]>
            : GetScalarType<T[P], RutaGroupByOutputType[P]>
        }
      >
    >


  export type RutaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreRuta?: boolean
    cobradorId?: boolean
    cobrados?: boolean
    montoCobrado?: boolean
    estadoRuta?: boolean
    EmpresaId?: boolean
    cobrador?: boolean | UsuarioDefaultArgs<ExtArgs>
    Clientes?: boolean | Ruta$ClientesArgs<ExtArgs>
    Empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    _count?: boolean | RutaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ruta"]>

  export type RutaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreRuta?: boolean
    cobradorId?: boolean
    cobrados?: boolean
    montoCobrado?: boolean
    estadoRuta?: boolean
    EmpresaId?: boolean
    cobrador?: boolean | UsuarioDefaultArgs<ExtArgs>
    Empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ruta"]>

  export type RutaSelectScalar = {
    id?: boolean
    nombreRuta?: boolean
    cobradorId?: boolean
    cobrados?: boolean
    montoCobrado?: boolean
    estadoRuta?: boolean
    EmpresaId?: boolean
  }

  export type RutaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobrador?: boolean | UsuarioDefaultArgs<ExtArgs>
    Clientes?: boolean | Ruta$ClientesArgs<ExtArgs>
    Empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    _count?: boolean | RutaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RutaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cobrador?: boolean | UsuarioDefaultArgs<ExtArgs>
    Empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $RutaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ruta"
    objects: {
      cobrador: Prisma.$UsuarioPayload<ExtArgs>
      Clientes: Prisma.$ClienteInternetPayload<ExtArgs>[]
      Empresa: Prisma.$EmpresaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombreRuta: string
      cobradorId: number
      cobrados: number
      montoCobrado: number
      estadoRuta: $Enums.EstadoRuta
      EmpresaId: number
    }, ExtArgs["result"]["ruta"]>
    composites: {}
  }

  type RutaGetPayload<S extends boolean | null | undefined | RutaDefaultArgs> = $Result.GetResult<Prisma.$RutaPayload, S>

  type RutaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RutaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RutaCountAggregateInputType | true
    }

  export interface RutaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ruta'], meta: { name: 'Ruta' } }
    /**
     * Find zero or one Ruta that matches the filter.
     * @param {RutaFindUniqueArgs} args - Arguments to find a Ruta
     * @example
     * // Get one Ruta
     * const ruta = await prisma.ruta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RutaFindUniqueArgs>(args: SelectSubset<T, RutaFindUniqueArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ruta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RutaFindUniqueOrThrowArgs} args - Arguments to find a Ruta
     * @example
     * // Get one Ruta
     * const ruta = await prisma.ruta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RutaFindUniqueOrThrowArgs>(args: SelectSubset<T, RutaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ruta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaFindFirstArgs} args - Arguments to find a Ruta
     * @example
     * // Get one Ruta
     * const ruta = await prisma.ruta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RutaFindFirstArgs>(args?: SelectSubset<T, RutaFindFirstArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ruta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaFindFirstOrThrowArgs} args - Arguments to find a Ruta
     * @example
     * // Get one Ruta
     * const ruta = await prisma.ruta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RutaFindFirstOrThrowArgs>(args?: SelectSubset<T, RutaFindFirstOrThrowArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rutas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rutas
     * const rutas = await prisma.ruta.findMany()
     * 
     * // Get first 10 Rutas
     * const rutas = await prisma.ruta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rutaWithIdOnly = await prisma.ruta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RutaFindManyArgs>(args?: SelectSubset<T, RutaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ruta.
     * @param {RutaCreateArgs} args - Arguments to create a Ruta.
     * @example
     * // Create one Ruta
     * const Ruta = await prisma.ruta.create({
     *   data: {
     *     // ... data to create a Ruta
     *   }
     * })
     * 
     */
    create<T extends RutaCreateArgs>(args: SelectSubset<T, RutaCreateArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rutas.
     * @param {RutaCreateManyArgs} args - Arguments to create many Rutas.
     * @example
     * // Create many Rutas
     * const ruta = await prisma.ruta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RutaCreateManyArgs>(args?: SelectSubset<T, RutaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rutas and returns the data saved in the database.
     * @param {RutaCreateManyAndReturnArgs} args - Arguments to create many Rutas.
     * @example
     * // Create many Rutas
     * const ruta = await prisma.ruta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rutas and only return the `id`
     * const rutaWithIdOnly = await prisma.ruta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RutaCreateManyAndReturnArgs>(args?: SelectSubset<T, RutaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ruta.
     * @param {RutaDeleteArgs} args - Arguments to delete one Ruta.
     * @example
     * // Delete one Ruta
     * const Ruta = await prisma.ruta.delete({
     *   where: {
     *     // ... filter to delete one Ruta
     *   }
     * })
     * 
     */
    delete<T extends RutaDeleteArgs>(args: SelectSubset<T, RutaDeleteArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ruta.
     * @param {RutaUpdateArgs} args - Arguments to update one Ruta.
     * @example
     * // Update one Ruta
     * const ruta = await prisma.ruta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RutaUpdateArgs>(args: SelectSubset<T, RutaUpdateArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rutas.
     * @param {RutaDeleteManyArgs} args - Arguments to filter Rutas to delete.
     * @example
     * // Delete a few Rutas
     * const { count } = await prisma.ruta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RutaDeleteManyArgs>(args?: SelectSubset<T, RutaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rutas
     * const ruta = await prisma.ruta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RutaUpdateManyArgs>(args: SelectSubset<T, RutaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ruta.
     * @param {RutaUpsertArgs} args - Arguments to update or create a Ruta.
     * @example
     * // Update or create a Ruta
     * const ruta = await prisma.ruta.upsert({
     *   create: {
     *     // ... data to create a Ruta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ruta we want to update
     *   }
     * })
     */
    upsert<T extends RutaUpsertArgs>(args: SelectSubset<T, RutaUpsertArgs<ExtArgs>>): Prisma__RutaClient<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaCountArgs} args - Arguments to filter Rutas to count.
     * @example
     * // Count the number of Rutas
     * const count = await prisma.ruta.count({
     *   where: {
     *     // ... the filter for the Rutas we want to count
     *   }
     * })
    **/
    count<T extends RutaCountArgs>(
      args?: Subset<T, RutaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RutaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ruta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RutaAggregateArgs>(args: Subset<T, RutaAggregateArgs>): Prisma.PrismaPromise<GetRutaAggregateType<T>>

    /**
     * Group by Ruta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RutaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RutaGroupByArgs['orderBy'] }
        : { orderBy?: RutaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RutaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRutaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ruta model
   */
  readonly fields: RutaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ruta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RutaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cobrador<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Clientes<T extends Ruta$ClientesArgs<ExtArgs> = {}>(args?: Subset<T, Ruta$ClientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany"> | Null>
    Empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ruta model
   */ 
  interface RutaFieldRefs {
    readonly id: FieldRef<"Ruta", 'Int'>
    readonly nombreRuta: FieldRef<"Ruta", 'String'>
    readonly cobradorId: FieldRef<"Ruta", 'Int'>
    readonly cobrados: FieldRef<"Ruta", 'Int'>
    readonly montoCobrado: FieldRef<"Ruta", 'Int'>
    readonly estadoRuta: FieldRef<"Ruta", 'EstadoRuta'>
    readonly EmpresaId: FieldRef<"Ruta", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ruta findUnique
   */
  export type RutaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * Filter, which Ruta to fetch.
     */
    where: RutaWhereUniqueInput
  }

  /**
   * Ruta findUniqueOrThrow
   */
  export type RutaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * Filter, which Ruta to fetch.
     */
    where: RutaWhereUniqueInput
  }

  /**
   * Ruta findFirst
   */
  export type RutaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * Filter, which Ruta to fetch.
     */
    where?: RutaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rutas.
     */
    cursor?: RutaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rutas.
     */
    distinct?: RutaScalarFieldEnum | RutaScalarFieldEnum[]
  }

  /**
   * Ruta findFirstOrThrow
   */
  export type RutaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * Filter, which Ruta to fetch.
     */
    where?: RutaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rutas.
     */
    cursor?: RutaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rutas.
     */
    distinct?: RutaScalarFieldEnum | RutaScalarFieldEnum[]
  }

  /**
   * Ruta findMany
   */
  export type RutaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * Filter, which Rutas to fetch.
     */
    where?: RutaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rutas.
     */
    cursor?: RutaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    distinct?: RutaScalarFieldEnum | RutaScalarFieldEnum[]
  }

  /**
   * Ruta create
   */
  export type RutaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * The data needed to create a Ruta.
     */
    data: XOR<RutaCreateInput, RutaUncheckedCreateInput>
  }

  /**
   * Ruta createMany
   */
  export type RutaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rutas.
     */
    data: RutaCreateManyInput | RutaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ruta createManyAndReturn
   */
  export type RutaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rutas.
     */
    data: RutaCreateManyInput | RutaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ruta update
   */
  export type RutaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * The data needed to update a Ruta.
     */
    data: XOR<RutaUpdateInput, RutaUncheckedUpdateInput>
    /**
     * Choose, which Ruta to update.
     */
    where: RutaWhereUniqueInput
  }

  /**
   * Ruta updateMany
   */
  export type RutaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rutas.
     */
    data: XOR<RutaUpdateManyMutationInput, RutaUncheckedUpdateManyInput>
    /**
     * Filter which Rutas to update
     */
    where?: RutaWhereInput
  }

  /**
   * Ruta upsert
   */
  export type RutaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * The filter to search for the Ruta to update in case it exists.
     */
    where: RutaWhereUniqueInput
    /**
     * In case the Ruta found by the `where` argument doesn't exist, create a new Ruta with this data.
     */
    create: XOR<RutaCreateInput, RutaUncheckedCreateInput>
    /**
     * In case the Ruta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RutaUpdateInput, RutaUncheckedUpdateInput>
  }

  /**
   * Ruta delete
   */
  export type RutaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    /**
     * Filter which Ruta to delete.
     */
    where: RutaWhereUniqueInput
  }

  /**
   * Ruta deleteMany
   */
  export type RutaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rutas to delete
     */
    where?: RutaWhereInput
  }

  /**
   * Ruta.Clientes
   */
  export type Ruta$ClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    cursor?: ClienteInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * Ruta without action
   */
  export type RutaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
  }


  /**
   * Model TicketSoporte
   */

  export type AggregateTicketSoporte = {
    _count: TicketSoporteCountAggregateOutputType | null
    _avg: TicketSoporteAvgAggregateOutputType | null
    _sum: TicketSoporteSumAggregateOutputType | null
    _min: TicketSoporteMinAggregateOutputType | null
    _max: TicketSoporteMaxAggregateOutputType | null
  }

  export type TicketSoporteAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    empresaId: number | null
    tecnicoId: number | null
    creadoPorId: number | null
  }

  export type TicketSoporteSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    empresaId: number | null
    tecnicoId: number | null
    creadoPorId: number | null
  }

  export type TicketSoporteMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    empresaId: number | null
    tecnicoId: number | null
    creadoPorId: number | null
    estado: $Enums.EstadoTicketSoporte | null
    prioridad: $Enums.PrioridadTicketSoporte | null
    descripcion: string | null
    comentarios: string | null
    fechaCreacion: Date | null
    fechaCierre: Date | null
  }

  export type TicketSoporteMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    empresaId: number | null
    tecnicoId: number | null
    creadoPorId: number | null
    estado: $Enums.EstadoTicketSoporte | null
    prioridad: $Enums.PrioridadTicketSoporte | null
    descripcion: string | null
    comentarios: string | null
    fechaCreacion: Date | null
    fechaCierre: Date | null
  }

  export type TicketSoporteCountAggregateOutputType = {
    id: number
    clienteId: number
    empresaId: number
    tecnicoId: number
    creadoPorId: number
    estado: number
    prioridad: number
    descripcion: number
    comentarios: number
    fechaCreacion: number
    fechaCierre: number
    _all: number
  }


  export type TicketSoporteAvgAggregateInputType = {
    id?: true
    clienteId?: true
    empresaId?: true
    tecnicoId?: true
    creadoPorId?: true
  }

  export type TicketSoporteSumAggregateInputType = {
    id?: true
    clienteId?: true
    empresaId?: true
    tecnicoId?: true
    creadoPorId?: true
  }

  export type TicketSoporteMinAggregateInputType = {
    id?: true
    clienteId?: true
    empresaId?: true
    tecnicoId?: true
    creadoPorId?: true
    estado?: true
    prioridad?: true
    descripcion?: true
    comentarios?: true
    fechaCreacion?: true
    fechaCierre?: true
  }

  export type TicketSoporteMaxAggregateInputType = {
    id?: true
    clienteId?: true
    empresaId?: true
    tecnicoId?: true
    creadoPorId?: true
    estado?: true
    prioridad?: true
    descripcion?: true
    comentarios?: true
    fechaCreacion?: true
    fechaCierre?: true
  }

  export type TicketSoporteCountAggregateInputType = {
    id?: true
    clienteId?: true
    empresaId?: true
    tecnicoId?: true
    creadoPorId?: true
    estado?: true
    prioridad?: true
    descripcion?: true
    comentarios?: true
    fechaCreacion?: true
    fechaCierre?: true
    _all?: true
  }

  export type TicketSoporteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketSoporte to aggregate.
     */
    where?: TicketSoporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketSoportes to fetch.
     */
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketSoporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketSoportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketSoportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TicketSoportes
    **/
    _count?: true | TicketSoporteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketSoporteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSoporteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketSoporteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketSoporteMaxAggregateInputType
  }

  export type GetTicketSoporteAggregateType<T extends TicketSoporteAggregateArgs> = {
        [P in keyof T & keyof AggregateTicketSoporte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicketSoporte[P]>
      : GetScalarType<T[P], AggregateTicketSoporte[P]>
  }




  export type TicketSoporteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketSoporteWhereInput
    orderBy?: TicketSoporteOrderByWithAggregationInput | TicketSoporteOrderByWithAggregationInput[]
    by: TicketSoporteScalarFieldEnum[] | TicketSoporteScalarFieldEnum
    having?: TicketSoporteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketSoporteCountAggregateInputType | true
    _avg?: TicketSoporteAvgAggregateInputType
    _sum?: TicketSoporteSumAggregateInputType
    _min?: TicketSoporteMinAggregateInputType
    _max?: TicketSoporteMaxAggregateInputType
  }

  export type TicketSoporteGroupByOutputType = {
    id: number
    clienteId: number
    empresaId: number
    tecnicoId: number | null
    creadoPorId: number | null
    estado: $Enums.EstadoTicketSoporte
    prioridad: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios: string | null
    fechaCreacion: Date
    fechaCierre: Date | null
    _count: TicketSoporteCountAggregateOutputType | null
    _avg: TicketSoporteAvgAggregateOutputType | null
    _sum: TicketSoporteSumAggregateOutputType | null
    _min: TicketSoporteMinAggregateOutputType | null
    _max: TicketSoporteMaxAggregateOutputType | null
  }

  type GetTicketSoporteGroupByPayload<T extends TicketSoporteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketSoporteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketSoporteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketSoporteGroupByOutputType[P]>
            : GetScalarType<T[P], TicketSoporteGroupByOutputType[P]>
        }
      >
    >


  export type TicketSoporteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    empresaId?: boolean
    tecnicoId?: boolean
    creadoPorId?: boolean
    estado?: boolean
    prioridad?: boolean
    descripcion?: boolean
    comentarios?: boolean
    fechaCreacion?: boolean
    fechaCierre?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    tecnico?: boolean | TicketSoporte$tecnicoArgs<ExtArgs>
    creadoPor?: boolean | TicketSoporte$creadoPorArgs<ExtArgs>
    SeguimientoTicket?: boolean | TicketSoporte$SeguimientoTicketArgs<ExtArgs>
    _count?: boolean | TicketSoporteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticketSoporte"]>

  export type TicketSoporteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    empresaId?: boolean
    tecnicoId?: boolean
    creadoPorId?: boolean
    estado?: boolean
    prioridad?: boolean
    descripcion?: boolean
    comentarios?: boolean
    fechaCreacion?: boolean
    fechaCierre?: boolean
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    tecnico?: boolean | TicketSoporte$tecnicoArgs<ExtArgs>
    creadoPor?: boolean | TicketSoporte$creadoPorArgs<ExtArgs>
  }, ExtArgs["result"]["ticketSoporte"]>

  export type TicketSoporteSelectScalar = {
    id?: boolean
    clienteId?: boolean
    empresaId?: boolean
    tecnicoId?: boolean
    creadoPorId?: boolean
    estado?: boolean
    prioridad?: boolean
    descripcion?: boolean
    comentarios?: boolean
    fechaCreacion?: boolean
    fechaCierre?: boolean
  }

  export type TicketSoporteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    tecnico?: boolean | TicketSoporte$tecnicoArgs<ExtArgs>
    creadoPor?: boolean | TicketSoporte$creadoPorArgs<ExtArgs>
    SeguimientoTicket?: boolean | TicketSoporte$SeguimientoTicketArgs<ExtArgs>
    _count?: boolean | TicketSoporteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketSoporteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteInternetDefaultArgs<ExtArgs>
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    tecnico?: boolean | TicketSoporte$tecnicoArgs<ExtArgs>
    creadoPor?: boolean | TicketSoporte$creadoPorArgs<ExtArgs>
  }

  export type $TicketSoportePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TicketSoporte"
    objects: {
      cliente: Prisma.$ClienteInternetPayload<ExtArgs>
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      tecnico: Prisma.$UsuarioPayload<ExtArgs> | null
      creadoPor: Prisma.$UsuarioPayload<ExtArgs> | null
      SeguimientoTicket: Prisma.$SeguimientoTicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      empresaId: number
      tecnicoId: number | null
      creadoPorId: number | null
      estado: $Enums.EstadoTicketSoporte
      prioridad: $Enums.PrioridadTicketSoporte
      descripcion: string
      comentarios: string | null
      fechaCreacion: Date
      fechaCierre: Date | null
    }, ExtArgs["result"]["ticketSoporte"]>
    composites: {}
  }

  type TicketSoporteGetPayload<S extends boolean | null | undefined | TicketSoporteDefaultArgs> = $Result.GetResult<Prisma.$TicketSoportePayload, S>

  type TicketSoporteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketSoporteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketSoporteCountAggregateInputType | true
    }

  export interface TicketSoporteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TicketSoporte'], meta: { name: 'TicketSoporte' } }
    /**
     * Find zero or one TicketSoporte that matches the filter.
     * @param {TicketSoporteFindUniqueArgs} args - Arguments to find a TicketSoporte
     * @example
     * // Get one TicketSoporte
     * const ticketSoporte = await prisma.ticketSoporte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketSoporteFindUniqueArgs>(args: SelectSubset<T, TicketSoporteFindUniqueArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TicketSoporte that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketSoporteFindUniqueOrThrowArgs} args - Arguments to find a TicketSoporte
     * @example
     * // Get one TicketSoporte
     * const ticketSoporte = await prisma.ticketSoporte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketSoporteFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketSoporteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TicketSoporte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteFindFirstArgs} args - Arguments to find a TicketSoporte
     * @example
     * // Get one TicketSoporte
     * const ticketSoporte = await prisma.ticketSoporte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketSoporteFindFirstArgs>(args?: SelectSubset<T, TicketSoporteFindFirstArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TicketSoporte that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteFindFirstOrThrowArgs} args - Arguments to find a TicketSoporte
     * @example
     * // Get one TicketSoporte
     * const ticketSoporte = await prisma.ticketSoporte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketSoporteFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketSoporteFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TicketSoportes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TicketSoportes
     * const ticketSoportes = await prisma.ticketSoporte.findMany()
     * 
     * // Get first 10 TicketSoportes
     * const ticketSoportes = await prisma.ticketSoporte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketSoporteWithIdOnly = await prisma.ticketSoporte.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketSoporteFindManyArgs>(args?: SelectSubset<T, TicketSoporteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TicketSoporte.
     * @param {TicketSoporteCreateArgs} args - Arguments to create a TicketSoporte.
     * @example
     * // Create one TicketSoporte
     * const TicketSoporte = await prisma.ticketSoporte.create({
     *   data: {
     *     // ... data to create a TicketSoporte
     *   }
     * })
     * 
     */
    create<T extends TicketSoporteCreateArgs>(args: SelectSubset<T, TicketSoporteCreateArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TicketSoportes.
     * @param {TicketSoporteCreateManyArgs} args - Arguments to create many TicketSoportes.
     * @example
     * // Create many TicketSoportes
     * const ticketSoporte = await prisma.ticketSoporte.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketSoporteCreateManyArgs>(args?: SelectSubset<T, TicketSoporteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TicketSoportes and returns the data saved in the database.
     * @param {TicketSoporteCreateManyAndReturnArgs} args - Arguments to create many TicketSoportes.
     * @example
     * // Create many TicketSoportes
     * const ticketSoporte = await prisma.ticketSoporte.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TicketSoportes and only return the `id`
     * const ticketSoporteWithIdOnly = await prisma.ticketSoporte.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketSoporteCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketSoporteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TicketSoporte.
     * @param {TicketSoporteDeleteArgs} args - Arguments to delete one TicketSoporte.
     * @example
     * // Delete one TicketSoporte
     * const TicketSoporte = await prisma.ticketSoporte.delete({
     *   where: {
     *     // ... filter to delete one TicketSoporte
     *   }
     * })
     * 
     */
    delete<T extends TicketSoporteDeleteArgs>(args: SelectSubset<T, TicketSoporteDeleteArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TicketSoporte.
     * @param {TicketSoporteUpdateArgs} args - Arguments to update one TicketSoporte.
     * @example
     * // Update one TicketSoporte
     * const ticketSoporte = await prisma.ticketSoporte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketSoporteUpdateArgs>(args: SelectSubset<T, TicketSoporteUpdateArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TicketSoportes.
     * @param {TicketSoporteDeleteManyArgs} args - Arguments to filter TicketSoportes to delete.
     * @example
     * // Delete a few TicketSoportes
     * const { count } = await prisma.ticketSoporte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketSoporteDeleteManyArgs>(args?: SelectSubset<T, TicketSoporteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TicketSoportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TicketSoportes
     * const ticketSoporte = await prisma.ticketSoporte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketSoporteUpdateManyArgs>(args: SelectSubset<T, TicketSoporteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TicketSoporte.
     * @param {TicketSoporteUpsertArgs} args - Arguments to update or create a TicketSoporte.
     * @example
     * // Update or create a TicketSoporte
     * const ticketSoporte = await prisma.ticketSoporte.upsert({
     *   create: {
     *     // ... data to create a TicketSoporte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TicketSoporte we want to update
     *   }
     * })
     */
    upsert<T extends TicketSoporteUpsertArgs>(args: SelectSubset<T, TicketSoporteUpsertArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TicketSoportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteCountArgs} args - Arguments to filter TicketSoportes to count.
     * @example
     * // Count the number of TicketSoportes
     * const count = await prisma.ticketSoporte.count({
     *   where: {
     *     // ... the filter for the TicketSoportes we want to count
     *   }
     * })
    **/
    count<T extends TicketSoporteCountArgs>(
      args?: Subset<T, TicketSoporteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketSoporteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TicketSoporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketSoporteAggregateArgs>(args: Subset<T, TicketSoporteAggregateArgs>): Prisma.PrismaPromise<GetTicketSoporteAggregateType<T>>

    /**
     * Group by TicketSoporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketSoporteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketSoporteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketSoporteGroupByArgs['orderBy'] }
        : { orderBy?: TicketSoporteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketSoporteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketSoporteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TicketSoporte model
   */
  readonly fields: TicketSoporteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TicketSoporte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketSoporteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteInternetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInternetDefaultArgs<ExtArgs>>): Prisma__ClienteInternetClient<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tecnico<T extends TicketSoporte$tecnicoArgs<ExtArgs> = {}>(args?: Subset<T, TicketSoporte$tecnicoArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    creadoPor<T extends TicketSoporte$creadoPorArgs<ExtArgs> = {}>(args?: Subset<T, TicketSoporte$creadoPorArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    SeguimientoTicket<T extends TicketSoporte$SeguimientoTicketArgs<ExtArgs> = {}>(args?: Subset<T, TicketSoporte$SeguimientoTicketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TicketSoporte model
   */ 
  interface TicketSoporteFieldRefs {
    readonly id: FieldRef<"TicketSoporte", 'Int'>
    readonly clienteId: FieldRef<"TicketSoporte", 'Int'>
    readonly empresaId: FieldRef<"TicketSoporte", 'Int'>
    readonly tecnicoId: FieldRef<"TicketSoporte", 'Int'>
    readonly creadoPorId: FieldRef<"TicketSoporte", 'Int'>
    readonly estado: FieldRef<"TicketSoporte", 'EstadoTicketSoporte'>
    readonly prioridad: FieldRef<"TicketSoporte", 'PrioridadTicketSoporte'>
    readonly descripcion: FieldRef<"TicketSoporte", 'String'>
    readonly comentarios: FieldRef<"TicketSoporte", 'String'>
    readonly fechaCreacion: FieldRef<"TicketSoporte", 'DateTime'>
    readonly fechaCierre: FieldRef<"TicketSoporte", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TicketSoporte findUnique
   */
  export type TicketSoporteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * Filter, which TicketSoporte to fetch.
     */
    where: TicketSoporteWhereUniqueInput
  }

  /**
   * TicketSoporte findUniqueOrThrow
   */
  export type TicketSoporteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * Filter, which TicketSoporte to fetch.
     */
    where: TicketSoporteWhereUniqueInput
  }

  /**
   * TicketSoporte findFirst
   */
  export type TicketSoporteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * Filter, which TicketSoporte to fetch.
     */
    where?: TicketSoporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketSoportes to fetch.
     */
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketSoportes.
     */
    cursor?: TicketSoporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketSoportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketSoportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketSoportes.
     */
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * TicketSoporte findFirstOrThrow
   */
  export type TicketSoporteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * Filter, which TicketSoporte to fetch.
     */
    where?: TicketSoporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketSoportes to fetch.
     */
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TicketSoportes.
     */
    cursor?: TicketSoporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketSoportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketSoportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TicketSoportes.
     */
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * TicketSoporte findMany
   */
  export type TicketSoporteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * Filter, which TicketSoportes to fetch.
     */
    where?: TicketSoporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TicketSoportes to fetch.
     */
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TicketSoportes.
     */
    cursor?: TicketSoporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TicketSoportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TicketSoportes.
     */
    skip?: number
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * TicketSoporte create
   */
  export type TicketSoporteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * The data needed to create a TicketSoporte.
     */
    data: XOR<TicketSoporteCreateInput, TicketSoporteUncheckedCreateInput>
  }

  /**
   * TicketSoporte createMany
   */
  export type TicketSoporteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TicketSoportes.
     */
    data: TicketSoporteCreateManyInput | TicketSoporteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TicketSoporte createManyAndReturn
   */
  export type TicketSoporteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TicketSoportes.
     */
    data: TicketSoporteCreateManyInput | TicketSoporteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TicketSoporte update
   */
  export type TicketSoporteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * The data needed to update a TicketSoporte.
     */
    data: XOR<TicketSoporteUpdateInput, TicketSoporteUncheckedUpdateInput>
    /**
     * Choose, which TicketSoporte to update.
     */
    where: TicketSoporteWhereUniqueInput
  }

  /**
   * TicketSoporte updateMany
   */
  export type TicketSoporteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TicketSoportes.
     */
    data: XOR<TicketSoporteUpdateManyMutationInput, TicketSoporteUncheckedUpdateManyInput>
    /**
     * Filter which TicketSoportes to update
     */
    where?: TicketSoporteWhereInput
  }

  /**
   * TicketSoporte upsert
   */
  export type TicketSoporteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * The filter to search for the TicketSoporte to update in case it exists.
     */
    where: TicketSoporteWhereUniqueInput
    /**
     * In case the TicketSoporte found by the `where` argument doesn't exist, create a new TicketSoporte with this data.
     */
    create: XOR<TicketSoporteCreateInput, TicketSoporteUncheckedCreateInput>
    /**
     * In case the TicketSoporte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketSoporteUpdateInput, TicketSoporteUncheckedUpdateInput>
  }

  /**
   * TicketSoporte delete
   */
  export type TicketSoporteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    /**
     * Filter which TicketSoporte to delete.
     */
    where: TicketSoporteWhereUniqueInput
  }

  /**
   * TicketSoporte deleteMany
   */
  export type TicketSoporteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TicketSoportes to delete
     */
    where?: TicketSoporteWhereInput
  }

  /**
   * TicketSoporte.tecnico
   */
  export type TicketSoporte$tecnicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * TicketSoporte.creadoPor
   */
  export type TicketSoporte$creadoPorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * TicketSoporte.SeguimientoTicket
   */
  export type TicketSoporte$SeguimientoTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    where?: SeguimientoTicketWhereInput
    orderBy?: SeguimientoTicketOrderByWithRelationInput | SeguimientoTicketOrderByWithRelationInput[]
    cursor?: SeguimientoTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeguimientoTicketScalarFieldEnum | SeguimientoTicketScalarFieldEnum[]
  }

  /**
   * TicketSoporte without action
   */
  export type TicketSoporteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
  }


  /**
   * Model SeguimientoTicket
   */

  export type AggregateSeguimientoTicket = {
    _count: SeguimientoTicketCountAggregateOutputType | null
    _avg: SeguimientoTicketAvgAggregateOutputType | null
    _sum: SeguimientoTicketSumAggregateOutputType | null
    _min: SeguimientoTicketMinAggregateOutputType | null
    _max: SeguimientoTicketMaxAggregateOutputType | null
  }

  export type SeguimientoTicketAvgAggregateOutputType = {
    id: number | null
    ticketId: number | null
    usuarioId: number | null
  }

  export type SeguimientoTicketSumAggregateOutputType = {
    id: number | null
    ticketId: number | null
    usuarioId: number | null
  }

  export type SeguimientoTicketMinAggregateOutputType = {
    id: number | null
    ticketId: number | null
    usuarioId: number | null
    descripcion: string | null
    fechaRegistro: Date | null
  }

  export type SeguimientoTicketMaxAggregateOutputType = {
    id: number | null
    ticketId: number | null
    usuarioId: number | null
    descripcion: string | null
    fechaRegistro: Date | null
  }

  export type SeguimientoTicketCountAggregateOutputType = {
    id: number
    ticketId: number
    usuarioId: number
    descripcion: number
    fechaRegistro: number
    _all: number
  }


  export type SeguimientoTicketAvgAggregateInputType = {
    id?: true
    ticketId?: true
    usuarioId?: true
  }

  export type SeguimientoTicketSumAggregateInputType = {
    id?: true
    ticketId?: true
    usuarioId?: true
  }

  export type SeguimientoTicketMinAggregateInputType = {
    id?: true
    ticketId?: true
    usuarioId?: true
    descripcion?: true
    fechaRegistro?: true
  }

  export type SeguimientoTicketMaxAggregateInputType = {
    id?: true
    ticketId?: true
    usuarioId?: true
    descripcion?: true
    fechaRegistro?: true
  }

  export type SeguimientoTicketCountAggregateInputType = {
    id?: true
    ticketId?: true
    usuarioId?: true
    descripcion?: true
    fechaRegistro?: true
    _all?: true
  }

  export type SeguimientoTicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeguimientoTicket to aggregate.
     */
    where?: SeguimientoTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeguimientoTickets to fetch.
     */
    orderBy?: SeguimientoTicketOrderByWithRelationInput | SeguimientoTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeguimientoTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeguimientoTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeguimientoTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeguimientoTickets
    **/
    _count?: true | SeguimientoTicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeguimientoTicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeguimientoTicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeguimientoTicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeguimientoTicketMaxAggregateInputType
  }

  export type GetSeguimientoTicketAggregateType<T extends SeguimientoTicketAggregateArgs> = {
        [P in keyof T & keyof AggregateSeguimientoTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeguimientoTicket[P]>
      : GetScalarType<T[P], AggregateSeguimientoTicket[P]>
  }




  export type SeguimientoTicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguimientoTicketWhereInput
    orderBy?: SeguimientoTicketOrderByWithAggregationInput | SeguimientoTicketOrderByWithAggregationInput[]
    by: SeguimientoTicketScalarFieldEnum[] | SeguimientoTicketScalarFieldEnum
    having?: SeguimientoTicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeguimientoTicketCountAggregateInputType | true
    _avg?: SeguimientoTicketAvgAggregateInputType
    _sum?: SeguimientoTicketSumAggregateInputType
    _min?: SeguimientoTicketMinAggregateInputType
    _max?: SeguimientoTicketMaxAggregateInputType
  }

  export type SeguimientoTicketGroupByOutputType = {
    id: number
    ticketId: number
    usuarioId: number
    descripcion: string
    fechaRegistro: Date
    _count: SeguimientoTicketCountAggregateOutputType | null
    _avg: SeguimientoTicketAvgAggregateOutputType | null
    _sum: SeguimientoTicketSumAggregateOutputType | null
    _min: SeguimientoTicketMinAggregateOutputType | null
    _max: SeguimientoTicketMaxAggregateOutputType | null
  }

  type GetSeguimientoTicketGroupByPayload<T extends SeguimientoTicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeguimientoTicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeguimientoTicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeguimientoTicketGroupByOutputType[P]>
            : GetScalarType<T[P], SeguimientoTicketGroupByOutputType[P]>
        }
      >
    >


  export type SeguimientoTicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticketId?: boolean
    usuarioId?: boolean
    descripcion?: boolean
    fechaRegistro?: boolean
    ticket?: boolean | TicketSoporteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seguimientoTicket"]>

  export type SeguimientoTicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ticketId?: boolean
    usuarioId?: boolean
    descripcion?: boolean
    fechaRegistro?: boolean
    ticket?: boolean | TicketSoporteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seguimientoTicket"]>

  export type SeguimientoTicketSelectScalar = {
    id?: boolean
    ticketId?: boolean
    usuarioId?: boolean
    descripcion?: boolean
    fechaRegistro?: boolean
  }

  export type SeguimientoTicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketSoporteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type SeguimientoTicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketSoporteDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $SeguimientoTicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeguimientoTicket"
    objects: {
      ticket: Prisma.$TicketSoportePayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ticketId: number
      usuarioId: number
      descripcion: string
      fechaRegistro: Date
    }, ExtArgs["result"]["seguimientoTicket"]>
    composites: {}
  }

  type SeguimientoTicketGetPayload<S extends boolean | null | undefined | SeguimientoTicketDefaultArgs> = $Result.GetResult<Prisma.$SeguimientoTicketPayload, S>

  type SeguimientoTicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeguimientoTicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeguimientoTicketCountAggregateInputType | true
    }

  export interface SeguimientoTicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeguimientoTicket'], meta: { name: 'SeguimientoTicket' } }
    /**
     * Find zero or one SeguimientoTicket that matches the filter.
     * @param {SeguimientoTicketFindUniqueArgs} args - Arguments to find a SeguimientoTicket
     * @example
     * // Get one SeguimientoTicket
     * const seguimientoTicket = await prisma.seguimientoTicket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeguimientoTicketFindUniqueArgs>(args: SelectSubset<T, SeguimientoTicketFindUniqueArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeguimientoTicket that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeguimientoTicketFindUniqueOrThrowArgs} args - Arguments to find a SeguimientoTicket
     * @example
     * // Get one SeguimientoTicket
     * const seguimientoTicket = await prisma.seguimientoTicket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeguimientoTicketFindUniqueOrThrowArgs>(args: SelectSubset<T, SeguimientoTicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeguimientoTicket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketFindFirstArgs} args - Arguments to find a SeguimientoTicket
     * @example
     * // Get one SeguimientoTicket
     * const seguimientoTicket = await prisma.seguimientoTicket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeguimientoTicketFindFirstArgs>(args?: SelectSubset<T, SeguimientoTicketFindFirstArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeguimientoTicket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketFindFirstOrThrowArgs} args - Arguments to find a SeguimientoTicket
     * @example
     * // Get one SeguimientoTicket
     * const seguimientoTicket = await prisma.seguimientoTicket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeguimientoTicketFindFirstOrThrowArgs>(args?: SelectSubset<T, SeguimientoTicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeguimientoTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeguimientoTickets
     * const seguimientoTickets = await prisma.seguimientoTicket.findMany()
     * 
     * // Get first 10 SeguimientoTickets
     * const seguimientoTickets = await prisma.seguimientoTicket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seguimientoTicketWithIdOnly = await prisma.seguimientoTicket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeguimientoTicketFindManyArgs>(args?: SelectSubset<T, SeguimientoTicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeguimientoTicket.
     * @param {SeguimientoTicketCreateArgs} args - Arguments to create a SeguimientoTicket.
     * @example
     * // Create one SeguimientoTicket
     * const SeguimientoTicket = await prisma.seguimientoTicket.create({
     *   data: {
     *     // ... data to create a SeguimientoTicket
     *   }
     * })
     * 
     */
    create<T extends SeguimientoTicketCreateArgs>(args: SelectSubset<T, SeguimientoTicketCreateArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeguimientoTickets.
     * @param {SeguimientoTicketCreateManyArgs} args - Arguments to create many SeguimientoTickets.
     * @example
     * // Create many SeguimientoTickets
     * const seguimientoTicket = await prisma.seguimientoTicket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeguimientoTicketCreateManyArgs>(args?: SelectSubset<T, SeguimientoTicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeguimientoTickets and returns the data saved in the database.
     * @param {SeguimientoTicketCreateManyAndReturnArgs} args - Arguments to create many SeguimientoTickets.
     * @example
     * // Create many SeguimientoTickets
     * const seguimientoTicket = await prisma.seguimientoTicket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeguimientoTickets and only return the `id`
     * const seguimientoTicketWithIdOnly = await prisma.seguimientoTicket.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeguimientoTicketCreateManyAndReturnArgs>(args?: SelectSubset<T, SeguimientoTicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeguimientoTicket.
     * @param {SeguimientoTicketDeleteArgs} args - Arguments to delete one SeguimientoTicket.
     * @example
     * // Delete one SeguimientoTicket
     * const SeguimientoTicket = await prisma.seguimientoTicket.delete({
     *   where: {
     *     // ... filter to delete one SeguimientoTicket
     *   }
     * })
     * 
     */
    delete<T extends SeguimientoTicketDeleteArgs>(args: SelectSubset<T, SeguimientoTicketDeleteArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeguimientoTicket.
     * @param {SeguimientoTicketUpdateArgs} args - Arguments to update one SeguimientoTicket.
     * @example
     * // Update one SeguimientoTicket
     * const seguimientoTicket = await prisma.seguimientoTicket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeguimientoTicketUpdateArgs>(args: SelectSubset<T, SeguimientoTicketUpdateArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeguimientoTickets.
     * @param {SeguimientoTicketDeleteManyArgs} args - Arguments to filter SeguimientoTickets to delete.
     * @example
     * // Delete a few SeguimientoTickets
     * const { count } = await prisma.seguimientoTicket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeguimientoTicketDeleteManyArgs>(args?: SelectSubset<T, SeguimientoTicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeguimientoTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeguimientoTickets
     * const seguimientoTicket = await prisma.seguimientoTicket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeguimientoTicketUpdateManyArgs>(args: SelectSubset<T, SeguimientoTicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeguimientoTicket.
     * @param {SeguimientoTicketUpsertArgs} args - Arguments to update or create a SeguimientoTicket.
     * @example
     * // Update or create a SeguimientoTicket
     * const seguimientoTicket = await prisma.seguimientoTicket.upsert({
     *   create: {
     *     // ... data to create a SeguimientoTicket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeguimientoTicket we want to update
     *   }
     * })
     */
    upsert<T extends SeguimientoTicketUpsertArgs>(args: SelectSubset<T, SeguimientoTicketUpsertArgs<ExtArgs>>): Prisma__SeguimientoTicketClient<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeguimientoTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketCountArgs} args - Arguments to filter SeguimientoTickets to count.
     * @example
     * // Count the number of SeguimientoTickets
     * const count = await prisma.seguimientoTicket.count({
     *   where: {
     *     // ... the filter for the SeguimientoTickets we want to count
     *   }
     * })
    **/
    count<T extends SeguimientoTicketCountArgs>(
      args?: Subset<T, SeguimientoTicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeguimientoTicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeguimientoTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeguimientoTicketAggregateArgs>(args: Subset<T, SeguimientoTicketAggregateArgs>): Prisma.PrismaPromise<GetSeguimientoTicketAggregateType<T>>

    /**
     * Group by SeguimientoTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguimientoTicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeguimientoTicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeguimientoTicketGroupByArgs['orderBy'] }
        : { orderBy?: SeguimientoTicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeguimientoTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeguimientoTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeguimientoTicket model
   */
  readonly fields: SeguimientoTicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeguimientoTicket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeguimientoTicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketSoporteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketSoporteDefaultArgs<ExtArgs>>): Prisma__TicketSoporteClient<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeguimientoTicket model
   */ 
  interface SeguimientoTicketFieldRefs {
    readonly id: FieldRef<"SeguimientoTicket", 'Int'>
    readonly ticketId: FieldRef<"SeguimientoTicket", 'Int'>
    readonly usuarioId: FieldRef<"SeguimientoTicket", 'Int'>
    readonly descripcion: FieldRef<"SeguimientoTicket", 'String'>
    readonly fechaRegistro: FieldRef<"SeguimientoTicket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeguimientoTicket findUnique
   */
  export type SeguimientoTicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * Filter, which SeguimientoTicket to fetch.
     */
    where: SeguimientoTicketWhereUniqueInput
  }

  /**
   * SeguimientoTicket findUniqueOrThrow
   */
  export type SeguimientoTicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * Filter, which SeguimientoTicket to fetch.
     */
    where: SeguimientoTicketWhereUniqueInput
  }

  /**
   * SeguimientoTicket findFirst
   */
  export type SeguimientoTicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * Filter, which SeguimientoTicket to fetch.
     */
    where?: SeguimientoTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeguimientoTickets to fetch.
     */
    orderBy?: SeguimientoTicketOrderByWithRelationInput | SeguimientoTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeguimientoTickets.
     */
    cursor?: SeguimientoTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeguimientoTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeguimientoTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeguimientoTickets.
     */
    distinct?: SeguimientoTicketScalarFieldEnum | SeguimientoTicketScalarFieldEnum[]
  }

  /**
   * SeguimientoTicket findFirstOrThrow
   */
  export type SeguimientoTicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * Filter, which SeguimientoTicket to fetch.
     */
    where?: SeguimientoTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeguimientoTickets to fetch.
     */
    orderBy?: SeguimientoTicketOrderByWithRelationInput | SeguimientoTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeguimientoTickets.
     */
    cursor?: SeguimientoTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeguimientoTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeguimientoTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeguimientoTickets.
     */
    distinct?: SeguimientoTicketScalarFieldEnum | SeguimientoTicketScalarFieldEnum[]
  }

  /**
   * SeguimientoTicket findMany
   */
  export type SeguimientoTicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * Filter, which SeguimientoTickets to fetch.
     */
    where?: SeguimientoTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeguimientoTickets to fetch.
     */
    orderBy?: SeguimientoTicketOrderByWithRelationInput | SeguimientoTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeguimientoTickets.
     */
    cursor?: SeguimientoTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeguimientoTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeguimientoTickets.
     */
    skip?: number
    distinct?: SeguimientoTicketScalarFieldEnum | SeguimientoTicketScalarFieldEnum[]
  }

  /**
   * SeguimientoTicket create
   */
  export type SeguimientoTicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * The data needed to create a SeguimientoTicket.
     */
    data: XOR<SeguimientoTicketCreateInput, SeguimientoTicketUncheckedCreateInput>
  }

  /**
   * SeguimientoTicket createMany
   */
  export type SeguimientoTicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeguimientoTickets.
     */
    data: SeguimientoTicketCreateManyInput | SeguimientoTicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeguimientoTicket createManyAndReturn
   */
  export type SeguimientoTicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeguimientoTickets.
     */
    data: SeguimientoTicketCreateManyInput | SeguimientoTicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeguimientoTicket update
   */
  export type SeguimientoTicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * The data needed to update a SeguimientoTicket.
     */
    data: XOR<SeguimientoTicketUpdateInput, SeguimientoTicketUncheckedUpdateInput>
    /**
     * Choose, which SeguimientoTicket to update.
     */
    where: SeguimientoTicketWhereUniqueInput
  }

  /**
   * SeguimientoTicket updateMany
   */
  export type SeguimientoTicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeguimientoTickets.
     */
    data: XOR<SeguimientoTicketUpdateManyMutationInput, SeguimientoTicketUncheckedUpdateManyInput>
    /**
     * Filter which SeguimientoTickets to update
     */
    where?: SeguimientoTicketWhereInput
  }

  /**
   * SeguimientoTicket upsert
   */
  export type SeguimientoTicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * The filter to search for the SeguimientoTicket to update in case it exists.
     */
    where: SeguimientoTicketWhereUniqueInput
    /**
     * In case the SeguimientoTicket found by the `where` argument doesn't exist, create a new SeguimientoTicket with this data.
     */
    create: XOR<SeguimientoTicketCreateInput, SeguimientoTicketUncheckedCreateInput>
    /**
     * In case the SeguimientoTicket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeguimientoTicketUpdateInput, SeguimientoTicketUncheckedUpdateInput>
  }

  /**
   * SeguimientoTicket delete
   */
  export type SeguimientoTicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    /**
     * Filter which SeguimientoTicket to delete.
     */
    where: SeguimientoTicketWhereUniqueInput
  }

  /**
   * SeguimientoTicket deleteMany
   */
  export type SeguimientoTicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeguimientoTickets to delete
     */
    where?: SeguimientoTicketWhereInput
  }

  /**
   * SeguimientoTicket without action
   */
  export type SeguimientoTicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    empresaId: number | null
    sucursalId: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    empresaId: number | null
    sucursalId: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    empresaId: number | null
    sucursalId: number | null
    nombre: string | null
    correo: string | null
    telefono: string | null
    rol: $Enums.RolUsuario | null
    activo: boolean | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    empresaId: number | null
    sucursalId: number | null
    nombre: string | null
    correo: string | null
    telefono: string | null
    rol: $Enums.RolUsuario | null
    activo: boolean | null
    creadoEn: Date | null
    actualizadoEn: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    empresaId: number
    sucursalId: number
    nombre: number
    correo: number
    telefono: number
    rol: number
    activo: number
    creadoEn: number
    actualizadoEn: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    empresaId?: true
    sucursalId?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    empresaId?: true
    sucursalId?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    empresaId?: true
    sucursalId?: true
    nombre?: true
    correo?: true
    telefono?: true
    rol?: true
    activo?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    empresaId?: true
    sucursalId?: true
    nombre?: true
    correo?: true
    telefono?: true
    rol?: true
    activo?: true
    creadoEn?: true
    actualizadoEn?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    empresaId?: true
    sucursalId?: true
    nombre?: true
    correo?: true
    telefono?: true
    rol?: true
    activo?: true
    creadoEn?: true
    actualizadoEn?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    empresaId: number
    sucursalId: number | null
    nombre: string
    correo: string
    telefono: string | null
    rol: $Enums.RolUsuario
    activo: boolean
    creadoEn: Date
    actualizadoEn: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    empresaId?: boolean
    sucursalId?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    rol?: boolean
    activo?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    Ruta?: boolean | Usuario$RutaArgs<ExtArgs>
    ticketsAsignados?: boolean | Usuario$ticketsAsignadosArgs<ExtArgs>
    ticketsCreados?: boolean | Usuario$ticketsCreadosArgs<ExtArgs>
    SeguimientoTicket?: boolean | Usuario$SeguimientoTicketArgs<ExtArgs>
    clientesAsesorados?: boolean | Usuario$clientesAsesoradosArgs<ExtArgs>
    RegistroCaja?: boolean | Usuario$RegistroCajaArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    empresaId?: boolean
    sucursalId?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    rol?: boolean
    activo?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    empresaId?: boolean
    sucursalId?: boolean
    nombre?: boolean
    correo?: boolean
    telefono?: boolean
    rol?: boolean
    activo?: boolean
    creadoEn?: boolean
    actualizadoEn?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    Ruta?: boolean | Usuario$RutaArgs<ExtArgs>
    ticketsAsignados?: boolean | Usuario$ticketsAsignadosArgs<ExtArgs>
    ticketsCreados?: boolean | Usuario$ticketsCreadosArgs<ExtArgs>
    SeguimientoTicket?: boolean | Usuario$SeguimientoTicketArgs<ExtArgs>
    clientesAsesorados?: boolean | Usuario$clientesAsesoradosArgs<ExtArgs>
    RegistroCaja?: boolean | Usuario$RegistroCajaArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      Ruta: Prisma.$RutaPayload<ExtArgs>[]
      ticketsAsignados: Prisma.$TicketSoportePayload<ExtArgs>[]
      ticketsCreados: Prisma.$TicketSoportePayload<ExtArgs>[]
      SeguimientoTicket: Prisma.$SeguimientoTicketPayload<ExtArgs>[]
      clientesAsesorados: Prisma.$ClienteInternetPayload<ExtArgs>[]
      RegistroCaja: Prisma.$RegistroCajaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      empresaId: number
      sucursalId: number | null
      nombre: string
      correo: string
      telefono: string | null
      rol: $Enums.RolUsuario
      activo: boolean
      creadoEn: Date
      actualizadoEn: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Ruta<T extends Usuario$RutaArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$RutaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutaPayload<ExtArgs>, T, "findMany"> | Null>
    ticketsAsignados<T extends Usuario$ticketsAsignadosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$ticketsAsignadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findMany"> | Null>
    ticketsCreados<T extends Usuario$ticketsCreadosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$ticketsCreadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketSoportePayload<ExtArgs>, T, "findMany"> | Null>
    SeguimientoTicket<T extends Usuario$SeguimientoTicketArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$SeguimientoTicketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguimientoTicketPayload<ExtArgs>, T, "findMany"> | Null>
    clientesAsesorados<T extends Usuario$clientesAsesoradosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$clientesAsesoradosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteInternetPayload<ExtArgs>, T, "findMany"> | Null>
    RegistroCaja<T extends Usuario$RegistroCajaArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$RegistroCajaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroCajaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly empresaId: FieldRef<"Usuario", 'Int'>
    readonly sucursalId: FieldRef<"Usuario", 'Int'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly correo: FieldRef<"Usuario", 'String'>
    readonly telefono: FieldRef<"Usuario", 'String'>
    readonly rol: FieldRef<"Usuario", 'RolUsuario'>
    readonly activo: FieldRef<"Usuario", 'Boolean'>
    readonly creadoEn: FieldRef<"Usuario", 'DateTime'>
    readonly actualizadoEn: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.Ruta
   */
  export type Usuario$RutaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ruta
     */
    select?: RutaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutaInclude<ExtArgs> | null
    where?: RutaWhereInput
    orderBy?: RutaOrderByWithRelationInput | RutaOrderByWithRelationInput[]
    cursor?: RutaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RutaScalarFieldEnum | RutaScalarFieldEnum[]
  }

  /**
   * Usuario.ticketsAsignados
   */
  export type Usuario$ticketsAsignadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    where?: TicketSoporteWhereInput
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    cursor?: TicketSoporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * Usuario.ticketsCreados
   */
  export type Usuario$ticketsCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketSoporte
     */
    select?: TicketSoporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketSoporteInclude<ExtArgs> | null
    where?: TicketSoporteWhereInput
    orderBy?: TicketSoporteOrderByWithRelationInput | TicketSoporteOrderByWithRelationInput[]
    cursor?: TicketSoporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketSoporteScalarFieldEnum | TicketSoporteScalarFieldEnum[]
  }

  /**
   * Usuario.SeguimientoTicket
   */
  export type Usuario$SeguimientoTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeguimientoTicket
     */
    select?: SeguimientoTicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguimientoTicketInclude<ExtArgs> | null
    where?: SeguimientoTicketWhereInput
    orderBy?: SeguimientoTicketOrderByWithRelationInput | SeguimientoTicketOrderByWithRelationInput[]
    cursor?: SeguimientoTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeguimientoTicketScalarFieldEnum | SeguimientoTicketScalarFieldEnum[]
  }

  /**
   * Usuario.clientesAsesorados
   */
  export type Usuario$clientesAsesoradosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInternet
     */
    select?: ClienteInternetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInternetInclude<ExtArgs> | null
    where?: ClienteInternetWhereInput
    orderBy?: ClienteInternetOrderByWithRelationInput | ClienteInternetOrderByWithRelationInput[]
    cursor?: ClienteInternetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteInternetScalarFieldEnum | ClienteInternetScalarFieldEnum[]
  }

  /**
   * Usuario.RegistroCaja
   */
  export type Usuario$RegistroCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroCaja
     */
    select?: RegistroCajaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroCajaInclude<ExtArgs> | null
    where?: RegistroCajaWhereInput
    orderBy?: RegistroCajaOrderByWithRelationInput | RegistroCajaOrderByWithRelationInput[]
    cursor?: RegistroCajaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroCajaScalarFieldEnum | RegistroCajaScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmpresaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    telefono: 'telefono',
    pbx: 'pbx',
    correo: 'correo',
    sitioWeb: 'sitioWeb',
    nit: 'nit',
    logo1: 'logo1',
    logo2: 'logo2',
    logo3: 'logo3',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type EmpresaScalarFieldEnum = (typeof EmpresaScalarFieldEnum)[keyof typeof EmpresaScalarFieldEnum]


  export const TipoServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    estado: 'estado',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type TipoServicioScalarFieldEnum = (typeof TipoServicioScalarFieldEnum)[keyof typeof TipoServicioScalarFieldEnum]


  export const ServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    precio: 'precio',
    estado: 'estado',
    tipoServicioId: 'tipoServicioId',
    empresaId: 'empresaId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type ServicioScalarFieldEnum = (typeof ServicioScalarFieldEnum)[keyof typeof ServicioScalarFieldEnum]


  export const ProveedorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    correo: 'correo',
    telefono: 'telefono',
    direccion: 'direccion',
    empresaId: 'empresaId'
  };

  export type ProveedorScalarFieldEnum = (typeof ProveedorScalarFieldEnum)[keyof typeof ProveedorScalarFieldEnum]


  export const ServicioInternetScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    velocidad: 'velocidad',
    precio: 'precio',
    estado: 'estado',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn',
    empresaId: 'empresaId'
  };

  export type ServicioInternetScalarFieldEnum = (typeof ServicioInternetScalarFieldEnum)[keyof typeof ServicioInternetScalarFieldEnum]


  export const SaldoEmpresaScalarFieldEnum: {
    id: 'id',
    saldo: 'saldo',
    egresos: 'egresos',
    totalIngresos: 'totalIngresos',
    empresaId: 'empresaId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type SaldoEmpresaScalarFieldEnum = (typeof SaldoEmpresaScalarFieldEnum)[keyof typeof SaldoEmpresaScalarFieldEnum]


  export const SaldoCajaScalarFieldEnum: {
    id: 'id',
    saldo: 'saldo',
    egreso: 'egreso',
    totalIngresos: 'totalIngresos',
    totalEgresos: 'totalEgresos',
    empresaId: 'empresaId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type SaldoCajaScalarFieldEnum = (typeof SaldoCajaScalarFieldEnum)[keyof typeof SaldoCajaScalarFieldEnum]


  export const RegistroCajaScalarFieldEnum: {
    id: 'id',
    saldoInicial: 'saldoInicial',
    saldoFinal: 'saldoFinal',
    usuarioId: 'usuarioId',
    cajaId: 'cajaId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type RegistroCajaScalarFieldEnum = (typeof RegistroCajaScalarFieldEnum)[keyof typeof RegistroCajaScalarFieldEnum]


  export const ClienteServicioScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    servicioId: 'servicioId',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin',
    estado: 'estado',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type ClienteServicioScalarFieldEnum = (typeof ClienteServicioScalarFieldEnum)[keyof typeof ClienteServicioScalarFieldEnum]


  export const FacturaScalarFieldEnum: {
    id: 'id',
    empresaId: 'empresaId',
    clienteId: 'clienteId',
    tipoFactura: 'tipoFactura',
    montoTotal: 'montoTotal',
    saldoPendiente: 'saldoPendiente',
    fechaEmision: 'fechaEmision',
    fechaVencimiento: 'fechaVencimiento',
    estado: 'estado',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type FacturaScalarFieldEnum = (typeof FacturaScalarFieldEnum)[keyof typeof FacturaScalarFieldEnum]


  export const PagoFacturaScalarFieldEnum: {
    id: 'id',
    facturaId: 'facturaId',
    clienteId: 'clienteId',
    montoPagado: 'montoPagado',
    metodoPago: 'metodoPago',
    fechaPago: 'fechaPago',
    creadoEn: 'creadoEn'
  };

  export type PagoFacturaScalarFieldEnum = (typeof PagoFacturaScalarFieldEnum)[keyof typeof PagoFacturaScalarFieldEnum]


  export const FacturaInternetScalarFieldEnum: {
    id: 'id',
    fechaPagoEsperada: 'fechaPagoEsperada',
    fechaPagada: 'fechaPagada',
    montoPago: 'montoPago',
    saldoPendiente: 'saldoPendiente',
    empresaId: 'empresaId',
    metodoPago: 'metodoPago',
    clienteId: 'clienteId',
    estadoFacturaInternet: 'estadoFacturaInternet',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type FacturaInternetScalarFieldEnum = (typeof FacturaInternetScalarFieldEnum)[keyof typeof FacturaInternetScalarFieldEnum]


  export const PagoFacturaInternetScalarFieldEnum: {
    id: 'id',
    facturaInternetId: 'facturaInternetId',
    clienteId: 'clienteId',
    montoPagado: 'montoPagado',
    metodoPago: 'metodoPago',
    fechaPago: 'fechaPago',
    creadoEn: 'creadoEn'
  };

  export type PagoFacturaInternetScalarFieldEnum = (typeof PagoFacturaInternetScalarFieldEnum)[keyof typeof PagoFacturaInternetScalarFieldEnum]


  export const FacturaServicioScalarFieldEnum: {
    id: 'id',
    facturaId: 'facturaId',
    servicioId: 'servicioId',
    cantidad: 'cantidad',
    precioUnitario: 'precioUnitario',
    total: 'total',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type FacturaServicioScalarFieldEnum = (typeof FacturaServicioScalarFieldEnum)[keyof typeof FacturaServicioScalarFieldEnum]


  export const IPScalarFieldEnum: {
    id: 'id',
    direccionIp: 'direccionIp',
    clienteId: 'clienteId'
  };

  export type IPScalarFieldEnum = (typeof IPScalarFieldEnum)[keyof typeof IPScalarFieldEnum]


  export const FotosScalarFieldEnum: {
    id: 'id',
    nombreFoto: 'nombreFoto',
    url: 'url',
    clienteId: 'clienteId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type FotosScalarFieldEnum = (typeof FotosScalarFieldEnum)[keyof typeof FotosScalarFieldEnum]


  export const ClienteInternetScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    telefono: 'telefono',
    direccion: 'direccion',
    dpi: 'dpi',
    observaciones: 'observaciones',
    contactoReferenciaNombre: 'contactoReferenciaNombre',
    contactoReferenciaTelefono: 'contactoReferenciaTelefono',
    estadoCliente: 'estadoCliente',
    contrasenaWifi: 'contrasenaWifi',
    ssidRouter: 'ssidRouter',
    fechaInstalacion: 'fechaInstalacion',
    asesorId: 'asesorId',
    servicioId: 'servicioId',
    municipioId: 'municipioId',
    departamentoId: 'departamentoId',
    empresaId: 'empresaId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type ClienteInternetScalarFieldEnum = (typeof ClienteInternetScalarFieldEnum)[keyof typeof ClienteInternetScalarFieldEnum]


  export const SaldoClienteScalarFieldEnum: {
    id: 'id',
    saldoPendiente: 'saldoPendiente',
    saldoFavor: 'saldoFavor',
    totalPagos: 'totalPagos',
    clienteId: 'clienteId',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type SaldoClienteScalarFieldEnum = (typeof SaldoClienteScalarFieldEnum)[keyof typeof SaldoClienteScalarFieldEnum]


  export const UbicacionScalarFieldEnum: {
    id: 'id',
    creadoEn: 'creadoEn',
    latitud: 'latitud',
    longitud: 'longitud',
    clienteId: 'clienteId',
    empresaId: 'empresaId'
  };

  export type UbicacionScalarFieldEnum = (typeof UbicacionScalarFieldEnum)[keyof typeof UbicacionScalarFieldEnum]


  export const DepartamentoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type DepartamentoScalarFieldEnum = (typeof DepartamentoScalarFieldEnum)[keyof typeof DepartamentoScalarFieldEnum]


  export const MunicipioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    departamentoId: 'departamentoId'
  };

  export type MunicipioScalarFieldEnum = (typeof MunicipioScalarFieldEnum)[keyof typeof MunicipioScalarFieldEnum]


  export const RutaScalarFieldEnum: {
    id: 'id',
    nombreRuta: 'nombreRuta',
    cobradorId: 'cobradorId',
    cobrados: 'cobrados',
    montoCobrado: 'montoCobrado',
    estadoRuta: 'estadoRuta',
    EmpresaId: 'EmpresaId'
  };

  export type RutaScalarFieldEnum = (typeof RutaScalarFieldEnum)[keyof typeof RutaScalarFieldEnum]


  export const TicketSoporteScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    empresaId: 'empresaId',
    tecnicoId: 'tecnicoId',
    creadoPorId: 'creadoPorId',
    estado: 'estado',
    prioridad: 'prioridad',
    descripcion: 'descripcion',
    comentarios: 'comentarios',
    fechaCreacion: 'fechaCreacion',
    fechaCierre: 'fechaCierre'
  };

  export type TicketSoporteScalarFieldEnum = (typeof TicketSoporteScalarFieldEnum)[keyof typeof TicketSoporteScalarFieldEnum]


  export const SeguimientoTicketScalarFieldEnum: {
    id: 'id',
    ticketId: 'ticketId',
    usuarioId: 'usuarioId',
    descripcion: 'descripcion',
    fechaRegistro: 'fechaRegistro'
  };

  export type SeguimientoTicketScalarFieldEnum = (typeof SeguimientoTicketScalarFieldEnum)[keyof typeof SeguimientoTicketScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    empresaId: 'empresaId',
    sucursalId: 'sucursalId',
    nombre: 'nombre',
    correo: 'correo',
    telefono: 'telefono',
    rol: 'rol',
    activo: 'activo',
    creadoEn: 'creadoEn',
    actualizadoEn: 'actualizadoEn'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'EstadoServicio'
   */
  export type EnumEstadoServicioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoServicio'>
    


  /**
   * Reference to a field of type 'EstadoServicio[]'
   */
  export type ListEnumEstadoServicioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoServicio[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'EstadoClienteServicio'
   */
  export type EnumEstadoClienteServicioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoClienteServicio'>
    


  /**
   * Reference to a field of type 'EstadoClienteServicio[]'
   */
  export type ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoClienteServicio[]'>
    


  /**
   * Reference to a field of type 'TipoFactura'
   */
  export type EnumTipoFacturaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoFactura'>
    


  /**
   * Reference to a field of type 'TipoFactura[]'
   */
  export type ListEnumTipoFacturaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoFactura[]'>
    


  /**
   * Reference to a field of type 'EstadoFactura'
   */
  export type EnumEstadoFacturaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoFactura'>
    


  /**
   * Reference to a field of type 'EstadoFactura[]'
   */
  export type ListEnumEstadoFacturaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoFactura[]'>
    


  /**
   * Reference to a field of type 'MetodoPago'
   */
  export type EnumMetodoPagoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPago'>
    


  /**
   * Reference to a field of type 'MetodoPago[]'
   */
  export type ListEnumMetodoPagoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPago[]'>
    


  /**
   * Reference to a field of type 'MetodoPagoFacturaInternet'
   */
  export type EnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPagoFacturaInternet'>
    


  /**
   * Reference to a field of type 'MetodoPagoFacturaInternet[]'
   */
  export type ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPagoFacturaInternet[]'>
    


  /**
   * Reference to a field of type 'EstadoFacturaInternet'
   */
  export type EnumEstadoFacturaInternetFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoFacturaInternet'>
    


  /**
   * Reference to a field of type 'EstadoFacturaInternet[]'
   */
  export type ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoFacturaInternet[]'>
    


  /**
   * Reference to a field of type 'EstadoCliente'
   */
  export type EnumEstadoClienteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCliente'>
    


  /**
   * Reference to a field of type 'EstadoCliente[]'
   */
  export type ListEnumEstadoClienteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoCliente[]'>
    


  /**
   * Reference to a field of type 'EstadoRuta'
   */
  export type EnumEstadoRutaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoRuta'>
    


  /**
   * Reference to a field of type 'EstadoRuta[]'
   */
  export type ListEnumEstadoRutaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoRuta[]'>
    


  /**
   * Reference to a field of type 'EstadoTicketSoporte'
   */
  export type EnumEstadoTicketSoporteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoTicketSoporte'>
    


  /**
   * Reference to a field of type 'EstadoTicketSoporte[]'
   */
  export type ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoTicketSoporte[]'>
    


  /**
   * Reference to a field of type 'PrioridadTicketSoporte'
   */
  export type EnumPrioridadTicketSoporteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PrioridadTicketSoporte'>
    


  /**
   * Reference to a field of type 'PrioridadTicketSoporte[]'
   */
  export type ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PrioridadTicketSoporte[]'>
    


  /**
   * Reference to a field of type 'RolUsuario'
   */
  export type EnumRolUsuarioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RolUsuario'>
    


  /**
   * Reference to a field of type 'RolUsuario[]'
   */
  export type ListEnumRolUsuarioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RolUsuario[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type EmpresaWhereInput = {
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    id?: IntFilter<"Empresa"> | number
    nombre?: StringFilter<"Empresa"> | string
    direccion?: StringNullableFilter<"Empresa"> | string | null
    telefono?: StringNullableFilter<"Empresa"> | string | null
    pbx?: StringNullableFilter<"Empresa"> | string | null
    correo?: StringNullableFilter<"Empresa"> | string | null
    sitioWeb?: StringNullableFilter<"Empresa"> | string | null
    nit?: StringNullableFilter<"Empresa"> | string | null
    logo1?: StringNullableFilter<"Empresa"> | string | null
    logo2?: StringNullableFilter<"Empresa"> | string | null
    logo3?: StringNullableFilter<"Empresa"> | string | null
    creadoEn?: DateTimeFilter<"Empresa"> | Date | string
    actualizadoEn?: DateTimeFilter<"Empresa"> | Date | string
    empleados?: UsuarioListRelationFilter
    rutas?: RutaListRelationFilter
    clientesInternet?: ClienteInternetListRelationFilter
    facturas?: FacturaInternetListRelationFilter
    TicketSoporte?: TicketSoporteListRelationFilter
    saldoEmpresa?: XOR<SaldoEmpresaNullableRelationFilter, SaldoEmpresaWhereInput> | null
    saldoCaja?: XOR<SaldoCajaNullableRelationFilter, SaldoCajaWhereInput> | null
    ServicioInternet?: ServicioInternetListRelationFilter
    Ubicacion?: UbicacionListRelationFilter
    Proveedor?: ProveedorListRelationFilter
    Servicio?: ServicioListRelationFilter
    Factura?: FacturaListRelationFilter
  }

  export type EmpresaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    pbx?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    sitioWeb?: SortOrderInput | SortOrder
    nit?: SortOrderInput | SortOrder
    logo1?: SortOrderInput | SortOrder
    logo2?: SortOrderInput | SortOrder
    logo3?: SortOrderInput | SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empleados?: UsuarioOrderByRelationAggregateInput
    rutas?: RutaOrderByRelationAggregateInput
    clientesInternet?: ClienteInternetOrderByRelationAggregateInput
    facturas?: FacturaInternetOrderByRelationAggregateInput
    TicketSoporte?: TicketSoporteOrderByRelationAggregateInput
    saldoEmpresa?: SaldoEmpresaOrderByWithRelationInput
    saldoCaja?: SaldoCajaOrderByWithRelationInput
    ServicioInternet?: ServicioInternetOrderByRelationAggregateInput
    Ubicacion?: UbicacionOrderByRelationAggregateInput
    Proveedor?: ProveedorOrderByRelationAggregateInput
    Servicio?: ServicioOrderByRelationAggregateInput
    Factura?: FacturaOrderByRelationAggregateInput
  }

  export type EmpresaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    direccion?: StringNullableFilter<"Empresa"> | string | null
    telefono?: StringNullableFilter<"Empresa"> | string | null
    pbx?: StringNullableFilter<"Empresa"> | string | null
    correo?: StringNullableFilter<"Empresa"> | string | null
    sitioWeb?: StringNullableFilter<"Empresa"> | string | null
    nit?: StringNullableFilter<"Empresa"> | string | null
    logo1?: StringNullableFilter<"Empresa"> | string | null
    logo2?: StringNullableFilter<"Empresa"> | string | null
    logo3?: StringNullableFilter<"Empresa"> | string | null
    creadoEn?: DateTimeFilter<"Empresa"> | Date | string
    actualizadoEn?: DateTimeFilter<"Empresa"> | Date | string
    empleados?: UsuarioListRelationFilter
    rutas?: RutaListRelationFilter
    clientesInternet?: ClienteInternetListRelationFilter
    facturas?: FacturaInternetListRelationFilter
    TicketSoporte?: TicketSoporteListRelationFilter
    saldoEmpresa?: XOR<SaldoEmpresaNullableRelationFilter, SaldoEmpresaWhereInput> | null
    saldoCaja?: XOR<SaldoCajaNullableRelationFilter, SaldoCajaWhereInput> | null
    ServicioInternet?: ServicioInternetListRelationFilter
    Ubicacion?: UbicacionListRelationFilter
    Proveedor?: ProveedorListRelationFilter
    Servicio?: ServicioListRelationFilter
    Factura?: FacturaListRelationFilter
  }, "id" | "nombre">

  export type EmpresaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    pbx?: SortOrderInput | SortOrder
    correo?: SortOrderInput | SortOrder
    sitioWeb?: SortOrderInput | SortOrder
    nit?: SortOrderInput | SortOrder
    logo1?: SortOrderInput | SortOrder
    logo2?: SortOrderInput | SortOrder
    logo3?: SortOrderInput | SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: EmpresaCountOrderByAggregateInput
    _avg?: EmpresaAvgOrderByAggregateInput
    _max?: EmpresaMaxOrderByAggregateInput
    _min?: EmpresaMinOrderByAggregateInput
    _sum?: EmpresaSumOrderByAggregateInput
  }

  export type EmpresaScalarWhereWithAggregatesInput = {
    AND?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    OR?: EmpresaScalarWhereWithAggregatesInput[]
    NOT?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Empresa"> | number
    nombre?: StringWithAggregatesFilter<"Empresa"> | string
    direccion?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    telefono?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    pbx?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    correo?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    sitioWeb?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    nit?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    logo1?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    logo2?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    logo3?: StringNullableWithAggregatesFilter<"Empresa"> | string | null
    creadoEn?: DateTimeWithAggregatesFilter<"Empresa"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"Empresa"> | Date | string
  }

  export type TipoServicioWhereInput = {
    AND?: TipoServicioWhereInput | TipoServicioWhereInput[]
    OR?: TipoServicioWhereInput[]
    NOT?: TipoServicioWhereInput | TipoServicioWhereInput[]
    id?: IntFilter<"TipoServicio"> | number
    nombre?: StringFilter<"TipoServicio"> | string
    descripcion?: StringNullableFilter<"TipoServicio"> | string | null
    estado?: EnumEstadoServicioFilter<"TipoServicio"> | $Enums.EstadoServicio
    creadoEn?: DateTimeFilter<"TipoServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"TipoServicio"> | Date | string
    servicios?: ServicioListRelationFilter
  }

  export type TipoServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    servicios?: ServicioOrderByRelationAggregateInput
  }

  export type TipoServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: TipoServicioWhereInput | TipoServicioWhereInput[]
    OR?: TipoServicioWhereInput[]
    NOT?: TipoServicioWhereInput | TipoServicioWhereInput[]
    descripcion?: StringNullableFilter<"TipoServicio"> | string | null
    estado?: EnumEstadoServicioFilter<"TipoServicio"> | $Enums.EstadoServicio
    creadoEn?: DateTimeFilter<"TipoServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"TipoServicio"> | Date | string
    servicios?: ServicioListRelationFilter
  }, "id" | "nombre">

  export type TipoServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: TipoServicioCountOrderByAggregateInput
    _avg?: TipoServicioAvgOrderByAggregateInput
    _max?: TipoServicioMaxOrderByAggregateInput
    _min?: TipoServicioMinOrderByAggregateInput
    _sum?: TipoServicioSumOrderByAggregateInput
  }

  export type TipoServicioScalarWhereWithAggregatesInput = {
    AND?: TipoServicioScalarWhereWithAggregatesInput | TipoServicioScalarWhereWithAggregatesInput[]
    OR?: TipoServicioScalarWhereWithAggregatesInput[]
    NOT?: TipoServicioScalarWhereWithAggregatesInput | TipoServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TipoServicio"> | number
    nombre?: StringWithAggregatesFilter<"TipoServicio"> | string
    descripcion?: StringNullableWithAggregatesFilter<"TipoServicio"> | string | null
    estado?: EnumEstadoServicioWithAggregatesFilter<"TipoServicio"> | $Enums.EstadoServicio
    creadoEn?: DateTimeWithAggregatesFilter<"TipoServicio"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"TipoServicio"> | Date | string
  }

  export type ServicioWhereInput = {
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    id?: IntFilter<"Servicio"> | number
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio?: FloatFilter<"Servicio"> | number
    estado?: EnumEstadoServicioFilter<"Servicio"> | $Enums.EstadoServicio
    tipoServicioId?: IntFilter<"Servicio"> | number
    empresaId?: IntFilter<"Servicio"> | number
    creadoEn?: DateTimeFilter<"Servicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"Servicio"> | Date | string
    tipoServicio?: XOR<TipoServicioRelationFilter, TipoServicioWhereInput>
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    clientes?: ClienteServicioListRelationFilter
    FacturaServicio?: FacturaServicioListRelationFilter
  }

  export type ServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    precio?: SortOrder
    estado?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    tipoServicio?: TipoServicioOrderByWithRelationInput
    empresa?: EmpresaOrderByWithRelationInput
    clientes?: ClienteServicioOrderByRelationAggregateInput
    FacturaServicio?: FacturaServicioOrderByRelationAggregateInput
  }

  export type ServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServicioWhereInput | ServicioWhereInput[]
    OR?: ServicioWhereInput[]
    NOT?: ServicioWhereInput | ServicioWhereInput[]
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio?: FloatFilter<"Servicio"> | number
    estado?: EnumEstadoServicioFilter<"Servicio"> | $Enums.EstadoServicio
    tipoServicioId?: IntFilter<"Servicio"> | number
    empresaId?: IntFilter<"Servicio"> | number
    creadoEn?: DateTimeFilter<"Servicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"Servicio"> | Date | string
    tipoServicio?: XOR<TipoServicioRelationFilter, TipoServicioWhereInput>
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    clientes?: ClienteServicioListRelationFilter
    FacturaServicio?: FacturaServicioListRelationFilter
  }, "id">

  export type ServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    precio?: SortOrder
    estado?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: ServicioCountOrderByAggregateInput
    _avg?: ServicioAvgOrderByAggregateInput
    _max?: ServicioMaxOrderByAggregateInput
    _min?: ServicioMinOrderByAggregateInput
    _sum?: ServicioSumOrderByAggregateInput
  }

  export type ServicioScalarWhereWithAggregatesInput = {
    AND?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    OR?: ServicioScalarWhereWithAggregatesInput[]
    NOT?: ServicioScalarWhereWithAggregatesInput | ServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Servicio"> | number
    nombre?: StringWithAggregatesFilter<"Servicio"> | string
    descripcion?: StringNullableWithAggregatesFilter<"Servicio"> | string | null
    precio?: FloatWithAggregatesFilter<"Servicio"> | number
    estado?: EnumEstadoServicioWithAggregatesFilter<"Servicio"> | $Enums.EstadoServicio
    tipoServicioId?: IntWithAggregatesFilter<"Servicio"> | number
    empresaId?: IntWithAggregatesFilter<"Servicio"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"Servicio"> | Date | string
  }

  export type ProveedorWhereInput = {
    AND?: ProveedorWhereInput | ProveedorWhereInput[]
    OR?: ProveedorWhereInput[]
    NOT?: ProveedorWhereInput | ProveedorWhereInput[]
    id?: IntFilter<"Proveedor"> | number
    nombre?: StringFilter<"Proveedor"> | string
    correo?: StringNullableFilter<"Proveedor"> | string | null
    telefono?: StringNullableFilter<"Proveedor"> | string | null
    direccion?: StringNullableFilter<"Proveedor"> | string | null
    empresaId?: IntFilter<"Proveedor"> | number
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }

  export type ProveedorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    empresaId?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
  }

  export type ProveedorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProveedorWhereInput | ProveedorWhereInput[]
    OR?: ProveedorWhereInput[]
    NOT?: ProveedorWhereInput | ProveedorWhereInput[]
    nombre?: StringFilter<"Proveedor"> | string
    correo?: StringNullableFilter<"Proveedor"> | string | null
    telefono?: StringNullableFilter<"Proveedor"> | string | null
    direccion?: StringNullableFilter<"Proveedor"> | string | null
    empresaId?: IntFilter<"Proveedor"> | number
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }, "id">

  export type ProveedorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    empresaId?: SortOrder
    _count?: ProveedorCountOrderByAggregateInput
    _avg?: ProveedorAvgOrderByAggregateInput
    _max?: ProveedorMaxOrderByAggregateInput
    _min?: ProveedorMinOrderByAggregateInput
    _sum?: ProveedorSumOrderByAggregateInput
  }

  export type ProveedorScalarWhereWithAggregatesInput = {
    AND?: ProveedorScalarWhereWithAggregatesInput | ProveedorScalarWhereWithAggregatesInput[]
    OR?: ProveedorScalarWhereWithAggregatesInput[]
    NOT?: ProveedorScalarWhereWithAggregatesInput | ProveedorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Proveedor"> | number
    nombre?: StringWithAggregatesFilter<"Proveedor"> | string
    correo?: StringNullableWithAggregatesFilter<"Proveedor"> | string | null
    telefono?: StringNullableWithAggregatesFilter<"Proveedor"> | string | null
    direccion?: StringNullableWithAggregatesFilter<"Proveedor"> | string | null
    empresaId?: IntWithAggregatesFilter<"Proveedor"> | number
  }

  export type ServicioInternetWhereInput = {
    AND?: ServicioInternetWhereInput | ServicioInternetWhereInput[]
    OR?: ServicioInternetWhereInput[]
    NOT?: ServicioInternetWhereInput | ServicioInternetWhereInput[]
    id?: IntFilter<"ServicioInternet"> | number
    nombre?: StringFilter<"ServicioInternet"> | string
    velocidad?: StringNullableFilter<"ServicioInternet"> | string | null
    precio?: FloatFilter<"ServicioInternet"> | number
    estado?: EnumEstadoServicioFilter<"ServicioInternet"> | $Enums.EstadoServicio
    creadoEn?: DateTimeFilter<"ServicioInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"ServicioInternet"> | Date | string
    empresaId?: IntFilter<"ServicioInternet"> | number
    clientes?: ClienteInternetListRelationFilter
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }

  export type ServicioInternetOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    velocidad?: SortOrderInput | SortOrder
    precio?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresaId?: SortOrder
    clientes?: ClienteInternetOrderByRelationAggregateInput
    empresa?: EmpresaOrderByWithRelationInput
  }

  export type ServicioInternetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServicioInternetWhereInput | ServicioInternetWhereInput[]
    OR?: ServicioInternetWhereInput[]
    NOT?: ServicioInternetWhereInput | ServicioInternetWhereInput[]
    nombre?: StringFilter<"ServicioInternet"> | string
    velocidad?: StringNullableFilter<"ServicioInternet"> | string | null
    precio?: FloatFilter<"ServicioInternet"> | number
    estado?: EnumEstadoServicioFilter<"ServicioInternet"> | $Enums.EstadoServicio
    creadoEn?: DateTimeFilter<"ServicioInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"ServicioInternet"> | Date | string
    empresaId?: IntFilter<"ServicioInternet"> | number
    clientes?: ClienteInternetListRelationFilter
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }, "id">

  export type ServicioInternetOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    velocidad?: SortOrderInput | SortOrder
    precio?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresaId?: SortOrder
    _count?: ServicioInternetCountOrderByAggregateInput
    _avg?: ServicioInternetAvgOrderByAggregateInput
    _max?: ServicioInternetMaxOrderByAggregateInput
    _min?: ServicioInternetMinOrderByAggregateInput
    _sum?: ServicioInternetSumOrderByAggregateInput
  }

  export type ServicioInternetScalarWhereWithAggregatesInput = {
    AND?: ServicioInternetScalarWhereWithAggregatesInput | ServicioInternetScalarWhereWithAggregatesInput[]
    OR?: ServicioInternetScalarWhereWithAggregatesInput[]
    NOT?: ServicioInternetScalarWhereWithAggregatesInput | ServicioInternetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServicioInternet"> | number
    nombre?: StringWithAggregatesFilter<"ServicioInternet"> | string
    velocidad?: StringNullableWithAggregatesFilter<"ServicioInternet"> | string | null
    precio?: FloatWithAggregatesFilter<"ServicioInternet"> | number
    estado?: EnumEstadoServicioWithAggregatesFilter<"ServicioInternet"> | $Enums.EstadoServicio
    creadoEn?: DateTimeWithAggregatesFilter<"ServicioInternet"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"ServicioInternet"> | Date | string
    empresaId?: IntWithAggregatesFilter<"ServicioInternet"> | number
  }

  export type SaldoEmpresaWhereInput = {
    AND?: SaldoEmpresaWhereInput | SaldoEmpresaWhereInput[]
    OR?: SaldoEmpresaWhereInput[]
    NOT?: SaldoEmpresaWhereInput | SaldoEmpresaWhereInput[]
    id?: IntFilter<"SaldoEmpresa"> | number
    saldo?: FloatFilter<"SaldoEmpresa"> | number
    egresos?: FloatFilter<"SaldoEmpresa"> | number
    totalIngresos?: FloatFilter<"SaldoEmpresa"> | number
    empresaId?: IntFilter<"SaldoEmpresa"> | number
    creadoEn?: DateTimeFilter<"SaldoEmpresa"> | Date | string
    actualizadoEn?: DateTimeFilter<"SaldoEmpresa"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }

  export type SaldoEmpresaOrderByWithRelationInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
  }

  export type SaldoEmpresaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    empresaId?: number
    AND?: SaldoEmpresaWhereInput | SaldoEmpresaWhereInput[]
    OR?: SaldoEmpresaWhereInput[]
    NOT?: SaldoEmpresaWhereInput | SaldoEmpresaWhereInput[]
    saldo?: FloatFilter<"SaldoEmpresa"> | number
    egresos?: FloatFilter<"SaldoEmpresa"> | number
    totalIngresos?: FloatFilter<"SaldoEmpresa"> | number
    creadoEn?: DateTimeFilter<"SaldoEmpresa"> | Date | string
    actualizadoEn?: DateTimeFilter<"SaldoEmpresa"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }, "id" | "empresaId">

  export type SaldoEmpresaOrderByWithAggregationInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: SaldoEmpresaCountOrderByAggregateInput
    _avg?: SaldoEmpresaAvgOrderByAggregateInput
    _max?: SaldoEmpresaMaxOrderByAggregateInput
    _min?: SaldoEmpresaMinOrderByAggregateInput
    _sum?: SaldoEmpresaSumOrderByAggregateInput
  }

  export type SaldoEmpresaScalarWhereWithAggregatesInput = {
    AND?: SaldoEmpresaScalarWhereWithAggregatesInput | SaldoEmpresaScalarWhereWithAggregatesInput[]
    OR?: SaldoEmpresaScalarWhereWithAggregatesInput[]
    NOT?: SaldoEmpresaScalarWhereWithAggregatesInput | SaldoEmpresaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SaldoEmpresa"> | number
    saldo?: FloatWithAggregatesFilter<"SaldoEmpresa"> | number
    egresos?: FloatWithAggregatesFilter<"SaldoEmpresa"> | number
    totalIngresos?: FloatWithAggregatesFilter<"SaldoEmpresa"> | number
    empresaId?: IntWithAggregatesFilter<"SaldoEmpresa"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"SaldoEmpresa"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"SaldoEmpresa"> | Date | string
  }

  export type SaldoCajaWhereInput = {
    AND?: SaldoCajaWhereInput | SaldoCajaWhereInput[]
    OR?: SaldoCajaWhereInput[]
    NOT?: SaldoCajaWhereInput | SaldoCajaWhereInput[]
    id?: IntFilter<"SaldoCaja"> | number
    saldo?: FloatFilter<"SaldoCaja"> | number
    egreso?: FloatFilter<"SaldoCaja"> | number
    totalIngresos?: FloatFilter<"SaldoCaja"> | number
    totalEgresos?: FloatFilter<"SaldoCaja"> | number
    empresaId?: IntFilter<"SaldoCaja"> | number
    creadoEn?: DateTimeFilter<"SaldoCaja"> | Date | string
    actualizadoEn?: DateTimeFilter<"SaldoCaja"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    registrosCaja?: RegistroCajaListRelationFilter
  }

  export type SaldoCajaOrderByWithRelationInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
    registrosCaja?: RegistroCajaOrderByRelationAggregateInput
  }

  export type SaldoCajaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    empresaId?: number
    AND?: SaldoCajaWhereInput | SaldoCajaWhereInput[]
    OR?: SaldoCajaWhereInput[]
    NOT?: SaldoCajaWhereInput | SaldoCajaWhereInput[]
    saldo?: FloatFilter<"SaldoCaja"> | number
    egreso?: FloatFilter<"SaldoCaja"> | number
    totalIngresos?: FloatFilter<"SaldoCaja"> | number
    totalEgresos?: FloatFilter<"SaldoCaja"> | number
    creadoEn?: DateTimeFilter<"SaldoCaja"> | Date | string
    actualizadoEn?: DateTimeFilter<"SaldoCaja"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    registrosCaja?: RegistroCajaListRelationFilter
  }, "id" | "empresaId">

  export type SaldoCajaOrderByWithAggregationInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: SaldoCajaCountOrderByAggregateInput
    _avg?: SaldoCajaAvgOrderByAggregateInput
    _max?: SaldoCajaMaxOrderByAggregateInput
    _min?: SaldoCajaMinOrderByAggregateInput
    _sum?: SaldoCajaSumOrderByAggregateInput
  }

  export type SaldoCajaScalarWhereWithAggregatesInput = {
    AND?: SaldoCajaScalarWhereWithAggregatesInput | SaldoCajaScalarWhereWithAggregatesInput[]
    OR?: SaldoCajaScalarWhereWithAggregatesInput[]
    NOT?: SaldoCajaScalarWhereWithAggregatesInput | SaldoCajaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SaldoCaja"> | number
    saldo?: FloatWithAggregatesFilter<"SaldoCaja"> | number
    egreso?: FloatWithAggregatesFilter<"SaldoCaja"> | number
    totalIngresos?: FloatWithAggregatesFilter<"SaldoCaja"> | number
    totalEgresos?: FloatWithAggregatesFilter<"SaldoCaja"> | number
    empresaId?: IntWithAggregatesFilter<"SaldoCaja"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"SaldoCaja"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"SaldoCaja"> | Date | string
  }

  export type RegistroCajaWhereInput = {
    AND?: RegistroCajaWhereInput | RegistroCajaWhereInput[]
    OR?: RegistroCajaWhereInput[]
    NOT?: RegistroCajaWhereInput | RegistroCajaWhereInput[]
    id?: IntFilter<"RegistroCaja"> | number
    saldoInicial?: FloatFilter<"RegistroCaja"> | number
    saldoFinal?: FloatFilter<"RegistroCaja"> | number
    usuarioId?: IntNullableFilter<"RegistroCaja"> | number | null
    cajaId?: IntNullableFilter<"RegistroCaja"> | number | null
    creadoEn?: DateTimeFilter<"RegistroCaja"> | Date | string
    actualizadoEn?: DateTimeFilter<"RegistroCaja"> | Date | string
    usuario?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    caja?: XOR<SaldoCajaNullableRelationFilter, SaldoCajaWhereInput> | null
  }

  export type RegistroCajaOrderByWithRelationInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    cajaId?: SortOrderInput | SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    caja?: SaldoCajaOrderByWithRelationInput
  }

  export type RegistroCajaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RegistroCajaWhereInput | RegistroCajaWhereInput[]
    OR?: RegistroCajaWhereInput[]
    NOT?: RegistroCajaWhereInput | RegistroCajaWhereInput[]
    saldoInicial?: FloatFilter<"RegistroCaja"> | number
    saldoFinal?: FloatFilter<"RegistroCaja"> | number
    usuarioId?: IntNullableFilter<"RegistroCaja"> | number | null
    cajaId?: IntNullableFilter<"RegistroCaja"> | number | null
    creadoEn?: DateTimeFilter<"RegistroCaja"> | Date | string
    actualizadoEn?: DateTimeFilter<"RegistroCaja"> | Date | string
    usuario?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    caja?: XOR<SaldoCajaNullableRelationFilter, SaldoCajaWhereInput> | null
  }, "id">

  export type RegistroCajaOrderByWithAggregationInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    cajaId?: SortOrderInput | SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: RegistroCajaCountOrderByAggregateInput
    _avg?: RegistroCajaAvgOrderByAggregateInput
    _max?: RegistroCajaMaxOrderByAggregateInput
    _min?: RegistroCajaMinOrderByAggregateInput
    _sum?: RegistroCajaSumOrderByAggregateInput
  }

  export type RegistroCajaScalarWhereWithAggregatesInput = {
    AND?: RegistroCajaScalarWhereWithAggregatesInput | RegistroCajaScalarWhereWithAggregatesInput[]
    OR?: RegistroCajaScalarWhereWithAggregatesInput[]
    NOT?: RegistroCajaScalarWhereWithAggregatesInput | RegistroCajaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RegistroCaja"> | number
    saldoInicial?: FloatWithAggregatesFilter<"RegistroCaja"> | number
    saldoFinal?: FloatWithAggregatesFilter<"RegistroCaja"> | number
    usuarioId?: IntNullableWithAggregatesFilter<"RegistroCaja"> | number | null
    cajaId?: IntNullableWithAggregatesFilter<"RegistroCaja"> | number | null
    creadoEn?: DateTimeWithAggregatesFilter<"RegistroCaja"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"RegistroCaja"> | Date | string
  }

  export type ClienteServicioWhereInput = {
    AND?: ClienteServicioWhereInput | ClienteServicioWhereInput[]
    OR?: ClienteServicioWhereInput[]
    NOT?: ClienteServicioWhereInput | ClienteServicioWhereInput[]
    id?: IntFilter<"ClienteServicio"> | number
    clienteId?: IntFilter<"ClienteServicio"> | number
    servicioId?: IntFilter<"ClienteServicio"> | number
    fechaInicio?: DateTimeFilter<"ClienteServicio"> | Date | string
    fechaFin?: DateTimeNullableFilter<"ClienteServicio"> | Date | string | null
    estado?: EnumEstadoClienteServicioFilter<"ClienteServicio"> | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFilter<"ClienteServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"ClienteServicio"> | Date | string
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    servicio?: XOR<ServicioRelationFilter, ServicioWhereInput>
  }

  export type ClienteServicioOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrderInput | SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    cliente?: ClienteInternetOrderByWithRelationInput
    servicio?: ServicioOrderByWithRelationInput
  }

  export type ClienteServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteServicioWhereInput | ClienteServicioWhereInput[]
    OR?: ClienteServicioWhereInput[]
    NOT?: ClienteServicioWhereInput | ClienteServicioWhereInput[]
    clienteId?: IntFilter<"ClienteServicio"> | number
    servicioId?: IntFilter<"ClienteServicio"> | number
    fechaInicio?: DateTimeFilter<"ClienteServicio"> | Date | string
    fechaFin?: DateTimeNullableFilter<"ClienteServicio"> | Date | string | null
    estado?: EnumEstadoClienteServicioFilter<"ClienteServicio"> | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFilter<"ClienteServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"ClienteServicio"> | Date | string
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    servicio?: XOR<ServicioRelationFilter, ServicioWhereInput>
  }, "id">

  export type ClienteServicioOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrderInput | SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: ClienteServicioCountOrderByAggregateInput
    _avg?: ClienteServicioAvgOrderByAggregateInput
    _max?: ClienteServicioMaxOrderByAggregateInput
    _min?: ClienteServicioMinOrderByAggregateInput
    _sum?: ClienteServicioSumOrderByAggregateInput
  }

  export type ClienteServicioScalarWhereWithAggregatesInput = {
    AND?: ClienteServicioScalarWhereWithAggregatesInput | ClienteServicioScalarWhereWithAggregatesInput[]
    OR?: ClienteServicioScalarWhereWithAggregatesInput[]
    NOT?: ClienteServicioScalarWhereWithAggregatesInput | ClienteServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteServicio"> | number
    clienteId?: IntWithAggregatesFilter<"ClienteServicio"> | number
    servicioId?: IntWithAggregatesFilter<"ClienteServicio"> | number
    fechaInicio?: DateTimeWithAggregatesFilter<"ClienteServicio"> | Date | string
    fechaFin?: DateTimeNullableWithAggregatesFilter<"ClienteServicio"> | Date | string | null
    estado?: EnumEstadoClienteServicioWithAggregatesFilter<"ClienteServicio"> | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeWithAggregatesFilter<"ClienteServicio"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"ClienteServicio"> | Date | string
  }

  export type FacturaWhereInput = {
    AND?: FacturaWhereInput | FacturaWhereInput[]
    OR?: FacturaWhereInput[]
    NOT?: FacturaWhereInput | FacturaWhereInput[]
    id?: IntFilter<"Factura"> | number
    empresaId?: IntFilter<"Factura"> | number
    clienteId?: IntFilter<"Factura"> | number
    tipoFactura?: EnumTipoFacturaFilter<"Factura"> | $Enums.TipoFactura
    montoTotal?: FloatFilter<"Factura"> | number
    saldoPendiente?: FloatFilter<"Factura"> | number
    fechaEmision?: DateTimeFilter<"Factura"> | Date | string
    fechaVencimiento?: DateTimeNullableFilter<"Factura"> | Date | string | null
    estado?: EnumEstadoFacturaFilter<"Factura"> | $Enums.EstadoFactura
    creadoEn?: DateTimeFilter<"Factura"> | Date | string
    actualizadoEn?: DateTimeFilter<"Factura"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    servicios?: FacturaServicioListRelationFilter
    pagos?: PagoFacturaListRelationFilter
  }

  export type FacturaOrderByWithRelationInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    tipoFactura?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
    fechaEmision?: SortOrder
    fechaVencimiento?: SortOrderInput | SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
    cliente?: ClienteInternetOrderByWithRelationInput
    servicios?: FacturaServicioOrderByRelationAggregateInput
    pagos?: PagoFacturaOrderByRelationAggregateInput
  }

  export type FacturaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FacturaWhereInput | FacturaWhereInput[]
    OR?: FacturaWhereInput[]
    NOT?: FacturaWhereInput | FacturaWhereInput[]
    empresaId?: IntFilter<"Factura"> | number
    clienteId?: IntFilter<"Factura"> | number
    tipoFactura?: EnumTipoFacturaFilter<"Factura"> | $Enums.TipoFactura
    montoTotal?: FloatFilter<"Factura"> | number
    saldoPendiente?: FloatFilter<"Factura"> | number
    fechaEmision?: DateTimeFilter<"Factura"> | Date | string
    fechaVencimiento?: DateTimeNullableFilter<"Factura"> | Date | string | null
    estado?: EnumEstadoFacturaFilter<"Factura"> | $Enums.EstadoFactura
    creadoEn?: DateTimeFilter<"Factura"> | Date | string
    actualizadoEn?: DateTimeFilter<"Factura"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    servicios?: FacturaServicioListRelationFilter
    pagos?: PagoFacturaListRelationFilter
  }, "id">

  export type FacturaOrderByWithAggregationInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    tipoFactura?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
    fechaEmision?: SortOrder
    fechaVencimiento?: SortOrderInput | SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: FacturaCountOrderByAggregateInput
    _avg?: FacturaAvgOrderByAggregateInput
    _max?: FacturaMaxOrderByAggregateInput
    _min?: FacturaMinOrderByAggregateInput
    _sum?: FacturaSumOrderByAggregateInput
  }

  export type FacturaScalarWhereWithAggregatesInput = {
    AND?: FacturaScalarWhereWithAggregatesInput | FacturaScalarWhereWithAggregatesInput[]
    OR?: FacturaScalarWhereWithAggregatesInput[]
    NOT?: FacturaScalarWhereWithAggregatesInput | FacturaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Factura"> | number
    empresaId?: IntWithAggregatesFilter<"Factura"> | number
    clienteId?: IntWithAggregatesFilter<"Factura"> | number
    tipoFactura?: EnumTipoFacturaWithAggregatesFilter<"Factura"> | $Enums.TipoFactura
    montoTotal?: FloatWithAggregatesFilter<"Factura"> | number
    saldoPendiente?: FloatWithAggregatesFilter<"Factura"> | number
    fechaEmision?: DateTimeWithAggregatesFilter<"Factura"> | Date | string
    fechaVencimiento?: DateTimeNullableWithAggregatesFilter<"Factura"> | Date | string | null
    estado?: EnumEstadoFacturaWithAggregatesFilter<"Factura"> | $Enums.EstadoFactura
    creadoEn?: DateTimeWithAggregatesFilter<"Factura"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"Factura"> | Date | string
  }

  export type PagoFacturaWhereInput = {
    AND?: PagoFacturaWhereInput | PagoFacturaWhereInput[]
    OR?: PagoFacturaWhereInput[]
    NOT?: PagoFacturaWhereInput | PagoFacturaWhereInput[]
    id?: IntFilter<"PagoFactura"> | number
    facturaId?: IntFilter<"PagoFactura"> | number
    clienteId?: IntFilter<"PagoFactura"> | number
    montoPagado?: FloatFilter<"PagoFactura"> | number
    metodoPago?: EnumMetodoPagoFilter<"PagoFactura"> | $Enums.MetodoPago
    fechaPago?: DateTimeFilter<"PagoFactura"> | Date | string
    creadoEn?: DateTimeFilter<"PagoFactura"> | Date | string
    factura?: XOR<FacturaRelationFilter, FacturaWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }

  export type PagoFacturaOrderByWithRelationInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
    factura?: FacturaOrderByWithRelationInput
    cliente?: ClienteInternetOrderByWithRelationInput
  }

  export type PagoFacturaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PagoFacturaWhereInput | PagoFacturaWhereInput[]
    OR?: PagoFacturaWhereInput[]
    NOT?: PagoFacturaWhereInput | PagoFacturaWhereInput[]
    facturaId?: IntFilter<"PagoFactura"> | number
    clienteId?: IntFilter<"PagoFactura"> | number
    montoPagado?: FloatFilter<"PagoFactura"> | number
    metodoPago?: EnumMetodoPagoFilter<"PagoFactura"> | $Enums.MetodoPago
    fechaPago?: DateTimeFilter<"PagoFactura"> | Date | string
    creadoEn?: DateTimeFilter<"PagoFactura"> | Date | string
    factura?: XOR<FacturaRelationFilter, FacturaWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }, "id">

  export type PagoFacturaOrderByWithAggregationInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
    _count?: PagoFacturaCountOrderByAggregateInput
    _avg?: PagoFacturaAvgOrderByAggregateInput
    _max?: PagoFacturaMaxOrderByAggregateInput
    _min?: PagoFacturaMinOrderByAggregateInput
    _sum?: PagoFacturaSumOrderByAggregateInput
  }

  export type PagoFacturaScalarWhereWithAggregatesInput = {
    AND?: PagoFacturaScalarWhereWithAggregatesInput | PagoFacturaScalarWhereWithAggregatesInput[]
    OR?: PagoFacturaScalarWhereWithAggregatesInput[]
    NOT?: PagoFacturaScalarWhereWithAggregatesInput | PagoFacturaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PagoFactura"> | number
    facturaId?: IntWithAggregatesFilter<"PagoFactura"> | number
    clienteId?: IntWithAggregatesFilter<"PagoFactura"> | number
    montoPagado?: FloatWithAggregatesFilter<"PagoFactura"> | number
    metodoPago?: EnumMetodoPagoWithAggregatesFilter<"PagoFactura"> | $Enums.MetodoPago
    fechaPago?: DateTimeWithAggregatesFilter<"PagoFactura"> | Date | string
    creadoEn?: DateTimeWithAggregatesFilter<"PagoFactura"> | Date | string
  }

  export type FacturaInternetWhereInput = {
    AND?: FacturaInternetWhereInput | FacturaInternetWhereInput[]
    OR?: FacturaInternetWhereInput[]
    NOT?: FacturaInternetWhereInput | FacturaInternetWhereInput[]
    id?: IntFilter<"FacturaInternet"> | number
    fechaPagoEsperada?: DateTimeNullableFilter<"FacturaInternet"> | Date | string | null
    fechaPagada?: DateTimeNullableFilter<"FacturaInternet"> | Date | string | null
    montoPago?: FloatNullableFilter<"FacturaInternet"> | number | null
    saldoPendiente?: FloatNullableFilter<"FacturaInternet"> | number | null
    empresaId?: IntFilter<"FacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetFilter<"FacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFilter<"FacturaInternet"> | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFilter<"FacturaInternet"> | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFilter<"FacturaInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"FacturaInternet"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    pagos?: PagoFacturaInternetListRelationFilter
  }

  export type FacturaInternetOrderByWithRelationInput = {
    id?: SortOrder
    fechaPagoEsperada?: SortOrderInput | SortOrder
    fechaPagada?: SortOrderInput | SortOrder
    montoPago?: SortOrderInput | SortOrder
    saldoPendiente?: SortOrderInput | SortOrder
    empresaId?: SortOrder
    metodoPago?: SortOrder
    clienteId?: SortOrder
    estadoFacturaInternet?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
    cliente?: ClienteInternetOrderByWithRelationInput
    pagos?: PagoFacturaInternetOrderByRelationAggregateInput
  }

  export type FacturaInternetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FacturaInternetWhereInput | FacturaInternetWhereInput[]
    OR?: FacturaInternetWhereInput[]
    NOT?: FacturaInternetWhereInput | FacturaInternetWhereInput[]
    fechaPagoEsperada?: DateTimeNullableFilter<"FacturaInternet"> | Date | string | null
    fechaPagada?: DateTimeNullableFilter<"FacturaInternet"> | Date | string | null
    montoPago?: FloatNullableFilter<"FacturaInternet"> | number | null
    saldoPendiente?: FloatNullableFilter<"FacturaInternet"> | number | null
    empresaId?: IntFilter<"FacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetFilter<"FacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFilter<"FacturaInternet"> | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFilter<"FacturaInternet"> | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFilter<"FacturaInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"FacturaInternet"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    pagos?: PagoFacturaInternetListRelationFilter
  }, "id">

  export type FacturaInternetOrderByWithAggregationInput = {
    id?: SortOrder
    fechaPagoEsperada?: SortOrderInput | SortOrder
    fechaPagada?: SortOrderInput | SortOrder
    montoPago?: SortOrderInput | SortOrder
    saldoPendiente?: SortOrderInput | SortOrder
    empresaId?: SortOrder
    metodoPago?: SortOrder
    clienteId?: SortOrder
    estadoFacturaInternet?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: FacturaInternetCountOrderByAggregateInput
    _avg?: FacturaInternetAvgOrderByAggregateInput
    _max?: FacturaInternetMaxOrderByAggregateInput
    _min?: FacturaInternetMinOrderByAggregateInput
    _sum?: FacturaInternetSumOrderByAggregateInput
  }

  export type FacturaInternetScalarWhereWithAggregatesInput = {
    AND?: FacturaInternetScalarWhereWithAggregatesInput | FacturaInternetScalarWhereWithAggregatesInput[]
    OR?: FacturaInternetScalarWhereWithAggregatesInput[]
    NOT?: FacturaInternetScalarWhereWithAggregatesInput | FacturaInternetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FacturaInternet"> | number
    fechaPagoEsperada?: DateTimeNullableWithAggregatesFilter<"FacturaInternet"> | Date | string | null
    fechaPagada?: DateTimeNullableWithAggregatesFilter<"FacturaInternet"> | Date | string | null
    montoPago?: FloatNullableWithAggregatesFilter<"FacturaInternet"> | number | null
    saldoPendiente?: FloatNullableWithAggregatesFilter<"FacturaInternet"> | number | null
    empresaId?: IntWithAggregatesFilter<"FacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetWithAggregatesFilter<"FacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntWithAggregatesFilter<"FacturaInternet"> | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetWithAggregatesFilter<"FacturaInternet"> | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeWithAggregatesFilter<"FacturaInternet"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"FacturaInternet"> | Date | string
  }

  export type PagoFacturaInternetWhereInput = {
    AND?: PagoFacturaInternetWhereInput | PagoFacturaInternetWhereInput[]
    OR?: PagoFacturaInternetWhereInput[]
    NOT?: PagoFacturaInternetWhereInput | PagoFacturaInternetWhereInput[]
    id?: IntFilter<"PagoFacturaInternet"> | number
    facturaInternetId?: IntFilter<"PagoFacturaInternet"> | number
    clienteId?: IntFilter<"PagoFacturaInternet"> | number
    montoPagado?: FloatFilter<"PagoFacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetFilter<"PagoFacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFilter<"PagoFacturaInternet"> | Date | string
    creadoEn?: DateTimeFilter<"PagoFacturaInternet"> | Date | string
    facturaInternet?: XOR<FacturaInternetRelationFilter, FacturaInternetWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }

  export type PagoFacturaInternetOrderByWithRelationInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
    facturaInternet?: FacturaInternetOrderByWithRelationInput
    cliente?: ClienteInternetOrderByWithRelationInput
  }

  export type PagoFacturaInternetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PagoFacturaInternetWhereInput | PagoFacturaInternetWhereInput[]
    OR?: PagoFacturaInternetWhereInput[]
    NOT?: PagoFacturaInternetWhereInput | PagoFacturaInternetWhereInput[]
    facturaInternetId?: IntFilter<"PagoFacturaInternet"> | number
    clienteId?: IntFilter<"PagoFacturaInternet"> | number
    montoPagado?: FloatFilter<"PagoFacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetFilter<"PagoFacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFilter<"PagoFacturaInternet"> | Date | string
    creadoEn?: DateTimeFilter<"PagoFacturaInternet"> | Date | string
    facturaInternet?: XOR<FacturaInternetRelationFilter, FacturaInternetWhereInput>
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }, "id">

  export type PagoFacturaInternetOrderByWithAggregationInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
    _count?: PagoFacturaInternetCountOrderByAggregateInput
    _avg?: PagoFacturaInternetAvgOrderByAggregateInput
    _max?: PagoFacturaInternetMaxOrderByAggregateInput
    _min?: PagoFacturaInternetMinOrderByAggregateInput
    _sum?: PagoFacturaInternetSumOrderByAggregateInput
  }

  export type PagoFacturaInternetScalarWhereWithAggregatesInput = {
    AND?: PagoFacturaInternetScalarWhereWithAggregatesInput | PagoFacturaInternetScalarWhereWithAggregatesInput[]
    OR?: PagoFacturaInternetScalarWhereWithAggregatesInput[]
    NOT?: PagoFacturaInternetScalarWhereWithAggregatesInput | PagoFacturaInternetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PagoFacturaInternet"> | number
    facturaInternetId?: IntWithAggregatesFilter<"PagoFacturaInternet"> | number
    clienteId?: IntWithAggregatesFilter<"PagoFacturaInternet"> | number
    montoPagado?: FloatWithAggregatesFilter<"PagoFacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetWithAggregatesFilter<"PagoFacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeWithAggregatesFilter<"PagoFacturaInternet"> | Date | string
    creadoEn?: DateTimeWithAggregatesFilter<"PagoFacturaInternet"> | Date | string
  }

  export type FacturaServicioWhereInput = {
    AND?: FacturaServicioWhereInput | FacturaServicioWhereInput[]
    OR?: FacturaServicioWhereInput[]
    NOT?: FacturaServicioWhereInput | FacturaServicioWhereInput[]
    id?: IntFilter<"FacturaServicio"> | number
    facturaId?: IntFilter<"FacturaServicio"> | number
    servicioId?: IntFilter<"FacturaServicio"> | number
    cantidad?: IntFilter<"FacturaServicio"> | number
    precioUnitario?: FloatFilter<"FacturaServicio"> | number
    total?: FloatFilter<"FacturaServicio"> | number
    creadoEn?: DateTimeFilter<"FacturaServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"FacturaServicio"> | Date | string
    factura?: XOR<FacturaRelationFilter, FacturaWhereInput>
    servicio?: XOR<ServicioRelationFilter, ServicioWhereInput>
  }

  export type FacturaServicioOrderByWithRelationInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    factura?: FacturaOrderByWithRelationInput
    servicio?: ServicioOrderByWithRelationInput
  }

  export type FacturaServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FacturaServicioWhereInput | FacturaServicioWhereInput[]
    OR?: FacturaServicioWhereInput[]
    NOT?: FacturaServicioWhereInput | FacturaServicioWhereInput[]
    facturaId?: IntFilter<"FacturaServicio"> | number
    servicioId?: IntFilter<"FacturaServicio"> | number
    cantidad?: IntFilter<"FacturaServicio"> | number
    precioUnitario?: FloatFilter<"FacturaServicio"> | number
    total?: FloatFilter<"FacturaServicio"> | number
    creadoEn?: DateTimeFilter<"FacturaServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"FacturaServicio"> | Date | string
    factura?: XOR<FacturaRelationFilter, FacturaWhereInput>
    servicio?: XOR<ServicioRelationFilter, ServicioWhereInput>
  }, "id">

  export type FacturaServicioOrderByWithAggregationInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: FacturaServicioCountOrderByAggregateInput
    _avg?: FacturaServicioAvgOrderByAggregateInput
    _max?: FacturaServicioMaxOrderByAggregateInput
    _min?: FacturaServicioMinOrderByAggregateInput
    _sum?: FacturaServicioSumOrderByAggregateInput
  }

  export type FacturaServicioScalarWhereWithAggregatesInput = {
    AND?: FacturaServicioScalarWhereWithAggregatesInput | FacturaServicioScalarWhereWithAggregatesInput[]
    OR?: FacturaServicioScalarWhereWithAggregatesInput[]
    NOT?: FacturaServicioScalarWhereWithAggregatesInput | FacturaServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FacturaServicio"> | number
    facturaId?: IntWithAggregatesFilter<"FacturaServicio"> | number
    servicioId?: IntWithAggregatesFilter<"FacturaServicio"> | number
    cantidad?: IntWithAggregatesFilter<"FacturaServicio"> | number
    precioUnitario?: FloatWithAggregatesFilter<"FacturaServicio"> | number
    total?: FloatWithAggregatesFilter<"FacturaServicio"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"FacturaServicio"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"FacturaServicio"> | Date | string
  }

  export type IPWhereInput = {
    AND?: IPWhereInput | IPWhereInput[]
    OR?: IPWhereInput[]
    NOT?: IPWhereInput | IPWhereInput[]
    id?: IntFilter<"IP"> | number
    direccionIp?: StringNullableFilter<"IP"> | string | null
    clienteId?: IntNullableFilter<"IP"> | number | null
    cliente?: XOR<ClienteInternetNullableRelationFilter, ClienteInternetWhereInput> | null
  }

  export type IPOrderByWithRelationInput = {
    id?: SortOrder
    direccionIp?: SortOrderInput | SortOrder
    clienteId?: SortOrderInput | SortOrder
    cliente?: ClienteInternetOrderByWithRelationInput
  }

  export type IPWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    clienteId?: number
    AND?: IPWhereInput | IPWhereInput[]
    OR?: IPWhereInput[]
    NOT?: IPWhereInput | IPWhereInput[]
    direccionIp?: StringNullableFilter<"IP"> | string | null
    cliente?: XOR<ClienteInternetNullableRelationFilter, ClienteInternetWhereInput> | null
  }, "id" | "clienteId">

  export type IPOrderByWithAggregationInput = {
    id?: SortOrder
    direccionIp?: SortOrderInput | SortOrder
    clienteId?: SortOrderInput | SortOrder
    _count?: IPCountOrderByAggregateInput
    _avg?: IPAvgOrderByAggregateInput
    _max?: IPMaxOrderByAggregateInput
    _min?: IPMinOrderByAggregateInput
    _sum?: IPSumOrderByAggregateInput
  }

  export type IPScalarWhereWithAggregatesInput = {
    AND?: IPScalarWhereWithAggregatesInput | IPScalarWhereWithAggregatesInput[]
    OR?: IPScalarWhereWithAggregatesInput[]
    NOT?: IPScalarWhereWithAggregatesInput | IPScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IP"> | number
    direccionIp?: StringNullableWithAggregatesFilter<"IP"> | string | null
    clienteId?: IntNullableWithAggregatesFilter<"IP"> | number | null
  }

  export type FotosWhereInput = {
    AND?: FotosWhereInput | FotosWhereInput[]
    OR?: FotosWhereInput[]
    NOT?: FotosWhereInput | FotosWhereInput[]
    id?: IntFilter<"Fotos"> | number
    nombreFoto?: StringFilter<"Fotos"> | string
    url?: StringNullableFilter<"Fotos"> | string | null
    clienteId?: IntFilter<"Fotos"> | number
    creadoEn?: DateTimeFilter<"Fotos"> | Date | string
    actualizadoEn?: DateTimeFilter<"Fotos"> | Date | string
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }

  export type FotosOrderByWithRelationInput = {
    id?: SortOrder
    nombreFoto?: SortOrder
    url?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    cliente?: ClienteInternetOrderByWithRelationInput
  }

  export type FotosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FotosWhereInput | FotosWhereInput[]
    OR?: FotosWhereInput[]
    NOT?: FotosWhereInput | FotosWhereInput[]
    nombreFoto?: StringFilter<"Fotos"> | string
    url?: StringNullableFilter<"Fotos"> | string | null
    clienteId?: IntFilter<"Fotos"> | number
    creadoEn?: DateTimeFilter<"Fotos"> | Date | string
    actualizadoEn?: DateTimeFilter<"Fotos"> | Date | string
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }, "id">

  export type FotosOrderByWithAggregationInput = {
    id?: SortOrder
    nombreFoto?: SortOrder
    url?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: FotosCountOrderByAggregateInput
    _avg?: FotosAvgOrderByAggregateInput
    _max?: FotosMaxOrderByAggregateInput
    _min?: FotosMinOrderByAggregateInput
    _sum?: FotosSumOrderByAggregateInput
  }

  export type FotosScalarWhereWithAggregatesInput = {
    AND?: FotosScalarWhereWithAggregatesInput | FotosScalarWhereWithAggregatesInput[]
    OR?: FotosScalarWhereWithAggregatesInput[]
    NOT?: FotosScalarWhereWithAggregatesInput | FotosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Fotos"> | number
    nombreFoto?: StringWithAggregatesFilter<"Fotos"> | string
    url?: StringNullableWithAggregatesFilter<"Fotos"> | string | null
    clienteId?: IntWithAggregatesFilter<"Fotos"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"Fotos"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"Fotos"> | Date | string
  }

  export type ClienteInternetWhereInput = {
    AND?: ClienteInternetWhereInput | ClienteInternetWhereInput[]
    OR?: ClienteInternetWhereInput[]
    NOT?: ClienteInternetWhereInput | ClienteInternetWhereInput[]
    id?: IntFilter<"ClienteInternet"> | number
    nombre?: StringFilter<"ClienteInternet"> | string
    telefono?: StringNullableFilter<"ClienteInternet"> | string | null
    direccion?: StringNullableFilter<"ClienteInternet"> | string | null
    dpi?: StringNullableFilter<"ClienteInternet"> | string | null
    observaciones?: StringNullableFilter<"ClienteInternet"> | string | null
    contactoReferenciaNombre?: StringNullableFilter<"ClienteInternet"> | string | null
    contactoReferenciaTelefono?: StringNullableFilter<"ClienteInternet"> | string | null
    estadoCliente?: EnumEstadoClienteFilter<"ClienteInternet"> | $Enums.EstadoCliente
    contrasenaWifi?: StringFilter<"ClienteInternet"> | string
    ssidRouter?: StringNullableFilter<"ClienteInternet"> | string | null
    fechaInstalacion?: DateTimeNullableFilter<"ClienteInternet"> | Date | string | null
    asesorId?: IntNullableFilter<"ClienteInternet"> | number | null
    servicioId?: IntFilter<"ClienteInternet"> | number
    municipioId?: IntNullableFilter<"ClienteInternet"> | number | null
    departamentoId?: IntNullableFilter<"ClienteInternet"> | number | null
    empresaId?: IntFilter<"ClienteInternet"> | number
    creadoEn?: DateTimeFilter<"ClienteInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"ClienteInternet"> | Date | string
    asesor?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    servicio?: XOR<ServicioInternetRelationFilter, ServicioInternetWhereInput>
    municipio?: XOR<MunicipioNullableRelationFilter, MunicipioWhereInput> | null
    departamento?: XOR<DepartamentoNullableRelationFilter, DepartamentoWhereInput> | null
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    ruta?: RutaListRelationFilter
    IP?: XOR<IPNullableRelationFilter, IPWhereInput> | null
    ubicacion?: XOR<UbicacionNullableRelationFilter, UbicacionWhereInput> | null
    ticketSoporte?: TicketSoporteListRelationFilter
    saldoCliente?: XOR<SaldoClienteNullableRelationFilter, saldoClienteWhereInput> | null
    fotos?: FotosListRelationFilter
    clienteServicio?: ClienteServicioListRelationFilter
    facturaInternet?: FacturaInternetListRelationFilter
    PagoFacturaInternet?: PagoFacturaInternetListRelationFilter
    factura?: FacturaListRelationFilter
    pagoFactura?: PagoFacturaListRelationFilter
  }

  export type ClienteInternetOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    dpi?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    contactoReferenciaNombre?: SortOrderInput | SortOrder
    contactoReferenciaTelefono?: SortOrderInput | SortOrder
    estadoCliente?: SortOrder
    contrasenaWifi?: SortOrder
    ssidRouter?: SortOrderInput | SortOrder
    fechaInstalacion?: SortOrderInput | SortOrder
    asesorId?: SortOrderInput | SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrderInput | SortOrder
    departamentoId?: SortOrderInput | SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    asesor?: UsuarioOrderByWithRelationInput
    servicio?: ServicioInternetOrderByWithRelationInput
    municipio?: MunicipioOrderByWithRelationInput
    departamento?: DepartamentoOrderByWithRelationInput
    empresa?: EmpresaOrderByWithRelationInput
    ruta?: RutaOrderByRelationAggregateInput
    IP?: IPOrderByWithRelationInput
    ubicacion?: UbicacionOrderByWithRelationInput
    ticketSoporte?: TicketSoporteOrderByRelationAggregateInput
    saldoCliente?: saldoClienteOrderByWithRelationInput
    fotos?: FotosOrderByRelationAggregateInput
    clienteServicio?: ClienteServicioOrderByRelationAggregateInput
    facturaInternet?: FacturaInternetOrderByRelationAggregateInput
    PagoFacturaInternet?: PagoFacturaInternetOrderByRelationAggregateInput
    factura?: FacturaOrderByRelationAggregateInput
    pagoFactura?: PagoFacturaOrderByRelationAggregateInput
  }

  export type ClienteInternetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteInternetWhereInput | ClienteInternetWhereInput[]
    OR?: ClienteInternetWhereInput[]
    NOT?: ClienteInternetWhereInput | ClienteInternetWhereInput[]
    nombre?: StringFilter<"ClienteInternet"> | string
    telefono?: StringNullableFilter<"ClienteInternet"> | string | null
    direccion?: StringNullableFilter<"ClienteInternet"> | string | null
    dpi?: StringNullableFilter<"ClienteInternet"> | string | null
    observaciones?: StringNullableFilter<"ClienteInternet"> | string | null
    contactoReferenciaNombre?: StringNullableFilter<"ClienteInternet"> | string | null
    contactoReferenciaTelefono?: StringNullableFilter<"ClienteInternet"> | string | null
    estadoCliente?: EnumEstadoClienteFilter<"ClienteInternet"> | $Enums.EstadoCliente
    contrasenaWifi?: StringFilter<"ClienteInternet"> | string
    ssidRouter?: StringNullableFilter<"ClienteInternet"> | string | null
    fechaInstalacion?: DateTimeNullableFilter<"ClienteInternet"> | Date | string | null
    asesorId?: IntNullableFilter<"ClienteInternet"> | number | null
    servicioId?: IntFilter<"ClienteInternet"> | number
    municipioId?: IntNullableFilter<"ClienteInternet"> | number | null
    departamentoId?: IntNullableFilter<"ClienteInternet"> | number | null
    empresaId?: IntFilter<"ClienteInternet"> | number
    creadoEn?: DateTimeFilter<"ClienteInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"ClienteInternet"> | Date | string
    asesor?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    servicio?: XOR<ServicioInternetRelationFilter, ServicioInternetWhereInput>
    municipio?: XOR<MunicipioNullableRelationFilter, MunicipioWhereInput> | null
    departamento?: XOR<DepartamentoNullableRelationFilter, DepartamentoWhereInput> | null
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    ruta?: RutaListRelationFilter
    IP?: XOR<IPNullableRelationFilter, IPWhereInput> | null
    ubicacion?: XOR<UbicacionNullableRelationFilter, UbicacionWhereInput> | null
    ticketSoporte?: TicketSoporteListRelationFilter
    saldoCliente?: XOR<SaldoClienteNullableRelationFilter, saldoClienteWhereInput> | null
    fotos?: FotosListRelationFilter
    clienteServicio?: ClienteServicioListRelationFilter
    facturaInternet?: FacturaInternetListRelationFilter
    PagoFacturaInternet?: PagoFacturaInternetListRelationFilter
    factura?: FacturaListRelationFilter
    pagoFactura?: PagoFacturaListRelationFilter
  }, "id">

  export type ClienteInternetOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrderInput | SortOrder
    direccion?: SortOrderInput | SortOrder
    dpi?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    contactoReferenciaNombre?: SortOrderInput | SortOrder
    contactoReferenciaTelefono?: SortOrderInput | SortOrder
    estadoCliente?: SortOrder
    contrasenaWifi?: SortOrder
    ssidRouter?: SortOrderInput | SortOrder
    fechaInstalacion?: SortOrderInput | SortOrder
    asesorId?: SortOrderInput | SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrderInput | SortOrder
    departamentoId?: SortOrderInput | SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: ClienteInternetCountOrderByAggregateInput
    _avg?: ClienteInternetAvgOrderByAggregateInput
    _max?: ClienteInternetMaxOrderByAggregateInput
    _min?: ClienteInternetMinOrderByAggregateInput
    _sum?: ClienteInternetSumOrderByAggregateInput
  }

  export type ClienteInternetScalarWhereWithAggregatesInput = {
    AND?: ClienteInternetScalarWhereWithAggregatesInput | ClienteInternetScalarWhereWithAggregatesInput[]
    OR?: ClienteInternetScalarWhereWithAggregatesInput[]
    NOT?: ClienteInternetScalarWhereWithAggregatesInput | ClienteInternetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteInternet"> | number
    nombre?: StringWithAggregatesFilter<"ClienteInternet"> | string
    telefono?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    direccion?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    dpi?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    observaciones?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    contactoReferenciaNombre?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    contactoReferenciaTelefono?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    estadoCliente?: EnumEstadoClienteWithAggregatesFilter<"ClienteInternet"> | $Enums.EstadoCliente
    contrasenaWifi?: StringWithAggregatesFilter<"ClienteInternet"> | string
    ssidRouter?: StringNullableWithAggregatesFilter<"ClienteInternet"> | string | null
    fechaInstalacion?: DateTimeNullableWithAggregatesFilter<"ClienteInternet"> | Date | string | null
    asesorId?: IntNullableWithAggregatesFilter<"ClienteInternet"> | number | null
    servicioId?: IntWithAggregatesFilter<"ClienteInternet"> | number
    municipioId?: IntNullableWithAggregatesFilter<"ClienteInternet"> | number | null
    departamentoId?: IntNullableWithAggregatesFilter<"ClienteInternet"> | number | null
    empresaId?: IntWithAggregatesFilter<"ClienteInternet"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"ClienteInternet"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"ClienteInternet"> | Date | string
  }

  export type saldoClienteWhereInput = {
    AND?: saldoClienteWhereInput | saldoClienteWhereInput[]
    OR?: saldoClienteWhereInput[]
    NOT?: saldoClienteWhereInput | saldoClienteWhereInput[]
    id?: IntFilter<"saldoCliente"> | number
    saldoPendiente?: FloatNullableFilter<"saldoCliente"> | number | null
    saldoFavor?: FloatNullableFilter<"saldoCliente"> | number | null
    totalPagos?: FloatNullableFilter<"saldoCliente"> | number | null
    clienteId?: IntFilter<"saldoCliente"> | number
    creadoEn?: DateTimeFilter<"saldoCliente"> | Date | string
    actualizadoEn?: DateTimeFilter<"saldoCliente"> | Date | string
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }

  export type saldoClienteOrderByWithRelationInput = {
    id?: SortOrder
    saldoPendiente?: SortOrderInput | SortOrder
    saldoFavor?: SortOrderInput | SortOrder
    totalPagos?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    cliente?: ClienteInternetOrderByWithRelationInput
  }

  export type saldoClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    clienteId?: number
    AND?: saldoClienteWhereInput | saldoClienteWhereInput[]
    OR?: saldoClienteWhereInput[]
    NOT?: saldoClienteWhereInput | saldoClienteWhereInput[]
    saldoPendiente?: FloatNullableFilter<"saldoCliente"> | number | null
    saldoFavor?: FloatNullableFilter<"saldoCliente"> | number | null
    totalPagos?: FloatNullableFilter<"saldoCliente"> | number | null
    creadoEn?: DateTimeFilter<"saldoCliente"> | Date | string
    actualizadoEn?: DateTimeFilter<"saldoCliente"> | Date | string
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
  }, "id" | "clienteId">

  export type saldoClienteOrderByWithAggregationInput = {
    id?: SortOrder
    saldoPendiente?: SortOrderInput | SortOrder
    saldoFavor?: SortOrderInput | SortOrder
    totalPagos?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: saldoClienteCountOrderByAggregateInput
    _avg?: saldoClienteAvgOrderByAggregateInput
    _max?: saldoClienteMaxOrderByAggregateInput
    _min?: saldoClienteMinOrderByAggregateInput
    _sum?: saldoClienteSumOrderByAggregateInput
  }

  export type saldoClienteScalarWhereWithAggregatesInput = {
    AND?: saldoClienteScalarWhereWithAggregatesInput | saldoClienteScalarWhereWithAggregatesInput[]
    OR?: saldoClienteScalarWhereWithAggregatesInput[]
    NOT?: saldoClienteScalarWhereWithAggregatesInput | saldoClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"saldoCliente"> | number
    saldoPendiente?: FloatNullableWithAggregatesFilter<"saldoCliente"> | number | null
    saldoFavor?: FloatNullableWithAggregatesFilter<"saldoCliente"> | number | null
    totalPagos?: FloatNullableWithAggregatesFilter<"saldoCliente"> | number | null
    clienteId?: IntWithAggregatesFilter<"saldoCliente"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"saldoCliente"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"saldoCliente"> | Date | string
  }

  export type UbicacionWhereInput = {
    AND?: UbicacionWhereInput | UbicacionWhereInput[]
    OR?: UbicacionWhereInput[]
    NOT?: UbicacionWhereInput | UbicacionWhereInput[]
    id?: IntFilter<"Ubicacion"> | number
    creadoEn?: DateTimeFilter<"Ubicacion"> | Date | string
    latitud?: FloatNullableFilter<"Ubicacion"> | number | null
    longitud?: FloatNullableFilter<"Ubicacion"> | number | null
    clienteId?: IntFilter<"Ubicacion"> | number
    empresaId?: IntFilter<"Ubicacion"> | number
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }

  export type UbicacionOrderByWithRelationInput = {
    id?: SortOrder
    creadoEn?: SortOrder
    latitud?: SortOrderInput | SortOrder
    longitud?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    cliente?: ClienteInternetOrderByWithRelationInput
    empresa?: EmpresaOrderByWithRelationInput
  }

  export type UbicacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    clienteId?: number
    AND?: UbicacionWhereInput | UbicacionWhereInput[]
    OR?: UbicacionWhereInput[]
    NOT?: UbicacionWhereInput | UbicacionWhereInput[]
    creadoEn?: DateTimeFilter<"Ubicacion"> | Date | string
    latitud?: FloatNullableFilter<"Ubicacion"> | number | null
    longitud?: FloatNullableFilter<"Ubicacion"> | number | null
    empresaId?: IntFilter<"Ubicacion"> | number
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }, "id" | "clienteId">

  export type UbicacionOrderByWithAggregationInput = {
    id?: SortOrder
    creadoEn?: SortOrder
    latitud?: SortOrderInput | SortOrder
    longitud?: SortOrderInput | SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    _count?: UbicacionCountOrderByAggregateInput
    _avg?: UbicacionAvgOrderByAggregateInput
    _max?: UbicacionMaxOrderByAggregateInput
    _min?: UbicacionMinOrderByAggregateInput
    _sum?: UbicacionSumOrderByAggregateInput
  }

  export type UbicacionScalarWhereWithAggregatesInput = {
    AND?: UbicacionScalarWhereWithAggregatesInput | UbicacionScalarWhereWithAggregatesInput[]
    OR?: UbicacionScalarWhereWithAggregatesInput[]
    NOT?: UbicacionScalarWhereWithAggregatesInput | UbicacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ubicacion"> | number
    creadoEn?: DateTimeWithAggregatesFilter<"Ubicacion"> | Date | string
    latitud?: FloatNullableWithAggregatesFilter<"Ubicacion"> | number | null
    longitud?: FloatNullableWithAggregatesFilter<"Ubicacion"> | number | null
    clienteId?: IntWithAggregatesFilter<"Ubicacion"> | number
    empresaId?: IntWithAggregatesFilter<"Ubicacion"> | number
  }

  export type DepartamentoWhereInput = {
    AND?: DepartamentoWhereInput | DepartamentoWhereInput[]
    OR?: DepartamentoWhereInput[]
    NOT?: DepartamentoWhereInput | DepartamentoWhereInput[]
    id?: IntFilter<"Departamento"> | number
    nombre?: StringFilter<"Departamento"> | string
    municipios?: MunicipioListRelationFilter
    clientes?: ClienteInternetListRelationFilter
  }

  export type DepartamentoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    municipios?: MunicipioOrderByRelationAggregateInput
    clientes?: ClienteInternetOrderByRelationAggregateInput
  }

  export type DepartamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: DepartamentoWhereInput | DepartamentoWhereInput[]
    OR?: DepartamentoWhereInput[]
    NOT?: DepartamentoWhereInput | DepartamentoWhereInput[]
    municipios?: MunicipioListRelationFilter
    clientes?: ClienteInternetListRelationFilter
  }, "id" | "nombre">

  export type DepartamentoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: DepartamentoCountOrderByAggregateInput
    _avg?: DepartamentoAvgOrderByAggregateInput
    _max?: DepartamentoMaxOrderByAggregateInput
    _min?: DepartamentoMinOrderByAggregateInput
    _sum?: DepartamentoSumOrderByAggregateInput
  }

  export type DepartamentoScalarWhereWithAggregatesInput = {
    AND?: DepartamentoScalarWhereWithAggregatesInput | DepartamentoScalarWhereWithAggregatesInput[]
    OR?: DepartamentoScalarWhereWithAggregatesInput[]
    NOT?: DepartamentoScalarWhereWithAggregatesInput | DepartamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Departamento"> | number
    nombre?: StringWithAggregatesFilter<"Departamento"> | string
  }

  export type MunicipioWhereInput = {
    AND?: MunicipioWhereInput | MunicipioWhereInput[]
    OR?: MunicipioWhereInput[]
    NOT?: MunicipioWhereInput | MunicipioWhereInput[]
    id?: IntFilter<"Municipio"> | number
    nombre?: StringFilter<"Municipio"> | string
    departamentoId?: IntFilter<"Municipio"> | number
    departamento?: XOR<DepartamentoRelationFilter, DepartamentoWhereInput>
    clientes?: ClienteInternetListRelationFilter
  }

  export type MunicipioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamentoId?: SortOrder
    departamento?: DepartamentoOrderByWithRelationInput
    clientes?: ClienteInternetOrderByRelationAggregateInput
  }

  export type MunicipioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: MunicipioWhereInput | MunicipioWhereInput[]
    OR?: MunicipioWhereInput[]
    NOT?: MunicipioWhereInput | MunicipioWhereInput[]
    departamentoId?: IntFilter<"Municipio"> | number
    departamento?: XOR<DepartamentoRelationFilter, DepartamentoWhereInput>
    clientes?: ClienteInternetListRelationFilter
  }, "id" | "nombre">

  export type MunicipioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamentoId?: SortOrder
    _count?: MunicipioCountOrderByAggregateInput
    _avg?: MunicipioAvgOrderByAggregateInput
    _max?: MunicipioMaxOrderByAggregateInput
    _min?: MunicipioMinOrderByAggregateInput
    _sum?: MunicipioSumOrderByAggregateInput
  }

  export type MunicipioScalarWhereWithAggregatesInput = {
    AND?: MunicipioScalarWhereWithAggregatesInput | MunicipioScalarWhereWithAggregatesInput[]
    OR?: MunicipioScalarWhereWithAggregatesInput[]
    NOT?: MunicipioScalarWhereWithAggregatesInput | MunicipioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Municipio"> | number
    nombre?: StringWithAggregatesFilter<"Municipio"> | string
    departamentoId?: IntWithAggregatesFilter<"Municipio"> | number
  }

  export type RutaWhereInput = {
    AND?: RutaWhereInput | RutaWhereInput[]
    OR?: RutaWhereInput[]
    NOT?: RutaWhereInput | RutaWhereInput[]
    id?: IntFilter<"Ruta"> | number
    nombreRuta?: StringFilter<"Ruta"> | string
    cobradorId?: IntFilter<"Ruta"> | number
    cobrados?: IntFilter<"Ruta"> | number
    montoCobrado?: IntFilter<"Ruta"> | number
    estadoRuta?: EnumEstadoRutaFilter<"Ruta"> | $Enums.EstadoRuta
    EmpresaId?: IntFilter<"Ruta"> | number
    cobrador?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Clientes?: ClienteInternetListRelationFilter
    Empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }

  export type RutaOrderByWithRelationInput = {
    id?: SortOrder
    nombreRuta?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    estadoRuta?: SortOrder
    EmpresaId?: SortOrder
    cobrador?: UsuarioOrderByWithRelationInput
    Clientes?: ClienteInternetOrderByRelationAggregateInput
    Empresa?: EmpresaOrderByWithRelationInput
  }

  export type RutaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RutaWhereInput | RutaWhereInput[]
    OR?: RutaWhereInput[]
    NOT?: RutaWhereInput | RutaWhereInput[]
    nombreRuta?: StringFilter<"Ruta"> | string
    cobradorId?: IntFilter<"Ruta"> | number
    cobrados?: IntFilter<"Ruta"> | number
    montoCobrado?: IntFilter<"Ruta"> | number
    estadoRuta?: EnumEstadoRutaFilter<"Ruta"> | $Enums.EstadoRuta
    EmpresaId?: IntFilter<"Ruta"> | number
    cobrador?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Clientes?: ClienteInternetListRelationFilter
    Empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
  }, "id">

  export type RutaOrderByWithAggregationInput = {
    id?: SortOrder
    nombreRuta?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    estadoRuta?: SortOrder
    EmpresaId?: SortOrder
    _count?: RutaCountOrderByAggregateInput
    _avg?: RutaAvgOrderByAggregateInput
    _max?: RutaMaxOrderByAggregateInput
    _min?: RutaMinOrderByAggregateInput
    _sum?: RutaSumOrderByAggregateInput
  }

  export type RutaScalarWhereWithAggregatesInput = {
    AND?: RutaScalarWhereWithAggregatesInput | RutaScalarWhereWithAggregatesInput[]
    OR?: RutaScalarWhereWithAggregatesInput[]
    NOT?: RutaScalarWhereWithAggregatesInput | RutaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ruta"> | number
    nombreRuta?: StringWithAggregatesFilter<"Ruta"> | string
    cobradorId?: IntWithAggregatesFilter<"Ruta"> | number
    cobrados?: IntWithAggregatesFilter<"Ruta"> | number
    montoCobrado?: IntWithAggregatesFilter<"Ruta"> | number
    estadoRuta?: EnumEstadoRutaWithAggregatesFilter<"Ruta"> | $Enums.EstadoRuta
    EmpresaId?: IntWithAggregatesFilter<"Ruta"> | number
  }

  export type TicketSoporteWhereInput = {
    AND?: TicketSoporteWhereInput | TicketSoporteWhereInput[]
    OR?: TicketSoporteWhereInput[]
    NOT?: TicketSoporteWhereInput | TicketSoporteWhereInput[]
    id?: IntFilter<"TicketSoporte"> | number
    clienteId?: IntFilter<"TicketSoporte"> | number
    empresaId?: IntFilter<"TicketSoporte"> | number
    tecnicoId?: IntNullableFilter<"TicketSoporte"> | number | null
    creadoPorId?: IntNullableFilter<"TicketSoporte"> | number | null
    estado?: EnumEstadoTicketSoporteFilter<"TicketSoporte"> | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFilter<"TicketSoporte"> | $Enums.PrioridadTicketSoporte
    descripcion?: StringFilter<"TicketSoporte"> | string
    comentarios?: StringNullableFilter<"TicketSoporte"> | string | null
    fechaCreacion?: DateTimeFilter<"TicketSoporte"> | Date | string
    fechaCierre?: DateTimeNullableFilter<"TicketSoporte"> | Date | string | null
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    tecnico?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    creadoPor?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    SeguimientoTicket?: SeguimientoTicketListRelationFilter
  }

  export type TicketSoporteOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrderInput | SortOrder
    creadoPorId?: SortOrderInput | SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    descripcion?: SortOrder
    comentarios?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaCierre?: SortOrderInput | SortOrder
    cliente?: ClienteInternetOrderByWithRelationInput
    empresa?: EmpresaOrderByWithRelationInput
    tecnico?: UsuarioOrderByWithRelationInput
    creadoPor?: UsuarioOrderByWithRelationInput
    SeguimientoTicket?: SeguimientoTicketOrderByRelationAggregateInput
  }

  export type TicketSoporteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketSoporteWhereInput | TicketSoporteWhereInput[]
    OR?: TicketSoporteWhereInput[]
    NOT?: TicketSoporteWhereInput | TicketSoporteWhereInput[]
    clienteId?: IntFilter<"TicketSoporte"> | number
    empresaId?: IntFilter<"TicketSoporte"> | number
    tecnicoId?: IntNullableFilter<"TicketSoporte"> | number | null
    creadoPorId?: IntNullableFilter<"TicketSoporte"> | number | null
    estado?: EnumEstadoTicketSoporteFilter<"TicketSoporte"> | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFilter<"TicketSoporte"> | $Enums.PrioridadTicketSoporte
    descripcion?: StringFilter<"TicketSoporte"> | string
    comentarios?: StringNullableFilter<"TicketSoporte"> | string | null
    fechaCreacion?: DateTimeFilter<"TicketSoporte"> | Date | string
    fechaCierre?: DateTimeNullableFilter<"TicketSoporte"> | Date | string | null
    cliente?: XOR<ClienteInternetRelationFilter, ClienteInternetWhereInput>
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    tecnico?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    creadoPor?: XOR<UsuarioNullableRelationFilter, UsuarioWhereInput> | null
    SeguimientoTicket?: SeguimientoTicketListRelationFilter
  }, "id">

  export type TicketSoporteOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrderInput | SortOrder
    creadoPorId?: SortOrderInput | SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    descripcion?: SortOrder
    comentarios?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaCierre?: SortOrderInput | SortOrder
    _count?: TicketSoporteCountOrderByAggregateInput
    _avg?: TicketSoporteAvgOrderByAggregateInput
    _max?: TicketSoporteMaxOrderByAggregateInput
    _min?: TicketSoporteMinOrderByAggregateInput
    _sum?: TicketSoporteSumOrderByAggregateInput
  }

  export type TicketSoporteScalarWhereWithAggregatesInput = {
    AND?: TicketSoporteScalarWhereWithAggregatesInput | TicketSoporteScalarWhereWithAggregatesInput[]
    OR?: TicketSoporteScalarWhereWithAggregatesInput[]
    NOT?: TicketSoporteScalarWhereWithAggregatesInput | TicketSoporteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TicketSoporte"> | number
    clienteId?: IntWithAggregatesFilter<"TicketSoporte"> | number
    empresaId?: IntWithAggregatesFilter<"TicketSoporte"> | number
    tecnicoId?: IntNullableWithAggregatesFilter<"TicketSoporte"> | number | null
    creadoPorId?: IntNullableWithAggregatesFilter<"TicketSoporte"> | number | null
    estado?: EnumEstadoTicketSoporteWithAggregatesFilter<"TicketSoporte"> | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteWithAggregatesFilter<"TicketSoporte"> | $Enums.PrioridadTicketSoporte
    descripcion?: StringWithAggregatesFilter<"TicketSoporte"> | string
    comentarios?: StringNullableWithAggregatesFilter<"TicketSoporte"> | string | null
    fechaCreacion?: DateTimeWithAggregatesFilter<"TicketSoporte"> | Date | string
    fechaCierre?: DateTimeNullableWithAggregatesFilter<"TicketSoporte"> | Date | string | null
  }

  export type SeguimientoTicketWhereInput = {
    AND?: SeguimientoTicketWhereInput | SeguimientoTicketWhereInput[]
    OR?: SeguimientoTicketWhereInput[]
    NOT?: SeguimientoTicketWhereInput | SeguimientoTicketWhereInput[]
    id?: IntFilter<"SeguimientoTicket"> | number
    ticketId?: IntFilter<"SeguimientoTicket"> | number
    usuarioId?: IntFilter<"SeguimientoTicket"> | number
    descripcion?: StringFilter<"SeguimientoTicket"> | string
    fechaRegistro?: DateTimeFilter<"SeguimientoTicket"> | Date | string
    ticket?: XOR<TicketSoporteRelationFilter, TicketSoporteWhereInput>
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type SeguimientoTicketOrderByWithRelationInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
    descripcion?: SortOrder
    fechaRegistro?: SortOrder
    ticket?: TicketSoporteOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type SeguimientoTicketWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SeguimientoTicketWhereInput | SeguimientoTicketWhereInput[]
    OR?: SeguimientoTicketWhereInput[]
    NOT?: SeguimientoTicketWhereInput | SeguimientoTicketWhereInput[]
    ticketId?: IntFilter<"SeguimientoTicket"> | number
    usuarioId?: IntFilter<"SeguimientoTicket"> | number
    descripcion?: StringFilter<"SeguimientoTicket"> | string
    fechaRegistro?: DateTimeFilter<"SeguimientoTicket"> | Date | string
    ticket?: XOR<TicketSoporteRelationFilter, TicketSoporteWhereInput>
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type SeguimientoTicketOrderByWithAggregationInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
    descripcion?: SortOrder
    fechaRegistro?: SortOrder
    _count?: SeguimientoTicketCountOrderByAggregateInput
    _avg?: SeguimientoTicketAvgOrderByAggregateInput
    _max?: SeguimientoTicketMaxOrderByAggregateInput
    _min?: SeguimientoTicketMinOrderByAggregateInput
    _sum?: SeguimientoTicketSumOrderByAggregateInput
  }

  export type SeguimientoTicketScalarWhereWithAggregatesInput = {
    AND?: SeguimientoTicketScalarWhereWithAggregatesInput | SeguimientoTicketScalarWhereWithAggregatesInput[]
    OR?: SeguimientoTicketScalarWhereWithAggregatesInput[]
    NOT?: SeguimientoTicketScalarWhereWithAggregatesInput | SeguimientoTicketScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SeguimientoTicket"> | number
    ticketId?: IntWithAggregatesFilter<"SeguimientoTicket"> | number
    usuarioId?: IntWithAggregatesFilter<"SeguimientoTicket"> | number
    descripcion?: StringWithAggregatesFilter<"SeguimientoTicket"> | string
    fechaRegistro?: DateTimeWithAggregatesFilter<"SeguimientoTicket"> | Date | string
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    empresaId?: IntFilter<"Usuario"> | number
    sucursalId?: IntNullableFilter<"Usuario"> | number | null
    nombre?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    telefono?: StringNullableFilter<"Usuario"> | string | null
    rol?: EnumRolUsuarioFilter<"Usuario"> | $Enums.RolUsuario
    activo?: BoolFilter<"Usuario"> | boolean
    creadoEn?: DateTimeFilter<"Usuario"> | Date | string
    actualizadoEn?: DateTimeFilter<"Usuario"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    Ruta?: RutaListRelationFilter
    ticketsAsignados?: TicketSoporteListRelationFilter
    ticketsCreados?: TicketSoporteListRelationFilter
    SeguimientoTicket?: SeguimientoTicketListRelationFilter
    clientesAsesorados?: ClienteInternetListRelationFilter
    RegistroCaja?: RegistroCajaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrderInput | SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrderInput | SortOrder
    rol?: SortOrder
    activo?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
    Ruta?: RutaOrderByRelationAggregateInput
    ticketsAsignados?: TicketSoporteOrderByRelationAggregateInput
    ticketsCreados?: TicketSoporteOrderByRelationAggregateInput
    SeguimientoTicket?: SeguimientoTicketOrderByRelationAggregateInput
    clientesAsesorados?: ClienteInternetOrderByRelationAggregateInput
    RegistroCaja?: RegistroCajaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    empresaId?: IntFilter<"Usuario"> | number
    sucursalId?: IntNullableFilter<"Usuario"> | number | null
    nombre?: StringFilter<"Usuario"> | string
    telefono?: StringNullableFilter<"Usuario"> | string | null
    rol?: EnumRolUsuarioFilter<"Usuario"> | $Enums.RolUsuario
    activo?: BoolFilter<"Usuario"> | boolean
    creadoEn?: DateTimeFilter<"Usuario"> | Date | string
    actualizadoEn?: DateTimeFilter<"Usuario"> | Date | string
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    Ruta?: RutaListRelationFilter
    ticketsAsignados?: TicketSoporteListRelationFilter
    ticketsCreados?: TicketSoporteListRelationFilter
    SeguimientoTicket?: SeguimientoTicketListRelationFilter
    clientesAsesorados?: ClienteInternetListRelationFilter
    RegistroCaja?: RegistroCajaListRelationFilter
  }, "id" | "correo">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrderInput | SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrderInput | SortOrder
    rol?: SortOrder
    activo?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    empresaId?: IntWithAggregatesFilter<"Usuario"> | number
    sucursalId?: IntNullableWithAggregatesFilter<"Usuario"> | number | null
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    correo?: StringWithAggregatesFilter<"Usuario"> | string
    telefono?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    rol?: EnumRolUsuarioWithAggregatesFilter<"Usuario"> | $Enums.RolUsuario
    activo?: BoolWithAggregatesFilter<"Usuario"> | boolean
    creadoEn?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    actualizadoEn?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type EmpresaCreateInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaCreateManyInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type EmpresaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoServicioCreateInput = {
    nombre: string
    descripcion?: string | null
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicios?: ServicioCreateNestedManyWithoutTipoServicioInput
  }

  export type TipoServicioUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicios?: ServicioUncheckedCreateNestedManyWithoutTipoServicioInput
  }

  export type TipoServicioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: ServicioUpdateManyWithoutTipoServicioNestedInput
  }

  export type TipoServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: ServicioUncheckedUpdateManyWithoutTipoServicioNestedInput
  }

  export type TipoServicioCreateManyInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type TipoServicioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioCreateInput = {
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
    empresa: EmpresaCreateNestedOneWithoutServicioInput
    clientes?: ClienteServicioCreateNestedManyWithoutServicioInput
    FacturaServicio?: FacturaServicioCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    tipoServicioId: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteServicioUncheckedCreateNestedManyWithoutServicioInput
    FacturaServicio?: FacturaServicioUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutServicioNestedInput
    clientes?: ClienteServicioUpdateManyWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteServicioUncheckedUpdateManyWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioCreateManyInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    tipoServicioId: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ServicioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProveedorCreateInput = {
    nombre: string
    correo?: string | null
    telefono?: string | null
    direccion?: string | null
    empresa: EmpresaCreateNestedOneWithoutProveedorInput
  }

  export type ProveedorUncheckedCreateInput = {
    id?: number
    nombre: string
    correo?: string | null
    telefono?: string | null
    direccion?: string | null
    empresaId: number
  }

  export type ProveedorUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    empresa?: EmpresaUpdateOneRequiredWithoutProveedorNestedInput
  }

  export type ProveedorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type ProveedorCreateManyInput = {
    id?: number
    nombre: string
    correo?: string | null
    telefono?: string | null
    direccion?: string | null
    empresaId: number
  }

  export type ProveedorUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProveedorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type ServicioInternetCreateInput = {
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteInternetCreateNestedManyWithoutServicioInput
    empresa: EmpresaCreateNestedOneWithoutServicioInternetInput
  }

  export type ServicioInternetUncheckedCreateInput = {
    id?: number
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresaId: number
    clientes?: ClienteInternetUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioInternetUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteInternetUpdateManyWithoutServicioNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutServicioInternetNestedInput
  }

  export type ServicioInternetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaId?: IntFieldUpdateOperationsInput | number
    clientes?: ClienteInternetUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioInternetCreateManyInput = {
    id?: number
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresaId: number
  }

  export type ServicioInternetUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioInternetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type SaldoEmpresaCreateInput = {
    saldo?: number
    egresos?: number
    totalIngresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutSaldoEmpresaInput
  }

  export type SaldoEmpresaUncheckedCreateInput = {
    id?: number
    saldo?: number
    egresos?: number
    totalIngresos: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type SaldoEmpresaUpdateInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egresos?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutSaldoEmpresaNestedInput
  }

  export type SaldoEmpresaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egresos?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaldoEmpresaCreateManyInput = {
    id?: number
    saldo?: number
    egresos?: number
    totalIngresos: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type SaldoEmpresaUpdateManyMutationInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egresos?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaldoEmpresaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egresos?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaldoCajaCreateInput = {
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutSaldoCajaInput
    registrosCaja?: RegistroCajaCreateNestedManyWithoutCajaInput
  }

  export type SaldoCajaUncheckedCreateInput = {
    id?: number
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    registrosCaja?: RegistroCajaUncheckedCreateNestedManyWithoutCajaInput
  }

  export type SaldoCajaUpdateInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutSaldoCajaNestedInput
    registrosCaja?: RegistroCajaUpdateManyWithoutCajaNestedInput
  }

  export type SaldoCajaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    registrosCaja?: RegistroCajaUncheckedUpdateManyWithoutCajaNestedInput
  }

  export type SaldoCajaCreateManyInput = {
    id?: number
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type SaldoCajaUpdateManyMutationInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaldoCajaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaCreateInput = {
    saldoInicial: number
    saldoFinal: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    usuario?: UsuarioCreateNestedOneWithoutRegistroCajaInput
    caja?: SaldoCajaCreateNestedOneWithoutRegistrosCajaInput
  }

  export type RegistroCajaUncheckedCreateInput = {
    id?: number
    saldoInicial: number
    saldoFinal: number
    usuarioId?: number | null
    cajaId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RegistroCajaUpdateInput = {
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneWithoutRegistroCajaNestedInput
    caja?: SaldoCajaUpdateOneWithoutRegistrosCajaNestedInput
  }

  export type RegistroCajaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    cajaId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaCreateManyInput = {
    id?: number
    saldoInicial: number
    saldoFinal: number
    usuarioId?: number | null
    cajaId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RegistroCajaUpdateManyMutationInput = {
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    cajaId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioCreateInput = {
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutClienteServicioInput
    servicio: ServicioCreateNestedOneWithoutClientesInput
  }

  export type ClienteServicioUncheckedCreateInput = {
    id?: number
    clienteId: number
    servicioId: number
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteServicioUpdateInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutClienteServicioNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioCreateManyInput = {
    id?: number
    clienteId: number
    servicioId: number
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteServicioUpdateManyMutationInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaCreateInput = {
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturaInput
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInput
    servicios?: FacturaServicioCreateNestedManyWithoutFacturaInput
    pagos?: PagoFacturaCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUncheckedCreateInput = {
    id?: number
    empresaId: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicios?: FacturaServicioUncheckedCreateNestedManyWithoutFacturaInput
    pagos?: PagoFacturaUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUpdateInput = {
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturaNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaNestedInput
    servicios?: FacturaServicioUpdateManyWithoutFacturaNestedInput
    pagos?: PagoFacturaUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: FacturaServicioUncheckedUpdateManyWithoutFacturaNestedInput
    pagos?: PagoFacturaUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaCreateManyInput = {
    id?: number
    empresaId: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaUpdateManyMutationInput = {
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaCreateInput = {
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
    factura: FacturaCreateNestedOneWithoutPagosInput
    cliente: ClienteInternetCreateNestedOneWithoutPagoFacturaInput
  }

  export type PagoFacturaUncheckedCreateInput = {
    id?: number
    facturaId: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaUpdateInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    factura?: FacturaUpdateOneRequiredWithoutPagosNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutPagoFacturaNestedInput
  }

  export type PagoFacturaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaCreateManyInput = {
    id?: number
    facturaId: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaUpdateManyMutationInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaInternetCreateInput = {
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturasInput
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInternetInput
    pagos?: PagoFacturaInternetCreateNestedManyWithoutFacturaInternetInput
  }

  export type FacturaInternetUncheckedCreateInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    empresaId: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    clienteId: number
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    pagos?: PagoFacturaInternetUncheckedCreateNestedManyWithoutFacturaInternetInput
  }

  export type FacturaInternetUpdateInput = {
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturasNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaInternetNestedInput
    pagos?: PagoFacturaInternetUpdateManyWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFieldUpdateOperationsInput | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    pagos?: PagoFacturaInternetUncheckedUpdateManyWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetCreateManyInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    empresaId: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    clienteId: number
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaInternetUpdateManyMutationInput = {
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaInternetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFieldUpdateOperationsInput | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetCreateInput = {
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
    facturaInternet: FacturaInternetCreateNestedOneWithoutPagosInput
    cliente: ClienteInternetCreateNestedOneWithoutPagoFacturaInternetInput
  }

  export type PagoFacturaInternetUncheckedCreateInput = {
    id?: number
    facturaInternetId: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaInternetUpdateInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    facturaInternet?: FacturaInternetUpdateOneRequiredWithoutPagosNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutPagoFacturaInternetNestedInput
  }

  export type PagoFacturaInternetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaInternetId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetCreateManyInput = {
    id?: number
    facturaInternetId: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaInternetUpdateManyMutationInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaInternetId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioCreateInput = {
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    factura: FacturaCreateNestedOneWithoutServiciosInput
    servicio: ServicioCreateNestedOneWithoutFacturaServicioInput
  }

  export type FacturaServicioUncheckedCreateInput = {
    id?: number
    facturaId: number
    servicioId: number
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaServicioUpdateInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    factura?: FacturaUpdateOneRequiredWithoutServiciosNestedInput
    servicio?: ServicioUpdateOneRequiredWithoutFacturaServicioNestedInput
  }

  export type FacturaServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioCreateManyInput = {
    id?: number
    facturaId: number
    servicioId: number
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaServicioUpdateManyMutationInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IPCreateInput = {
    direccionIp?: string | null
    cliente?: ClienteInternetCreateNestedOneWithoutIPInput
  }

  export type IPUncheckedCreateInput = {
    id?: number
    direccionIp?: string | null
    clienteId?: number | null
  }

  export type IPUpdateInput = {
    direccionIp?: NullableStringFieldUpdateOperationsInput | string | null
    cliente?: ClienteInternetUpdateOneWithoutIPNestedInput
  }

  export type IPUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    direccionIp?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IPCreateManyInput = {
    id?: number
    direccionIp?: string | null
    clienteId?: number | null
  }

  export type IPUpdateManyMutationInput = {
    direccionIp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IPUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    direccionIp?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FotosCreateInput = {
    nombreFoto: string
    url?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutFotosInput
  }

  export type FotosUncheckedCreateInput = {
    id?: number
    nombreFoto: string
    url?: string | null
    clienteId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FotosUpdateInput = {
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutFotosNestedInput
  }

  export type FotosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FotosCreateManyInput = {
    id?: number
    nombreFoto: string
    url?: string | null
    clienteId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FotosUpdateManyMutationInput = {
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FotosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetCreateInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetCreateManyInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteInternetUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type saldoClienteCreateInput = {
    saldoPendiente?: number | null
    saldoFavor?: number | null
    totalPagos?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutSaldoClienteInput
  }

  export type saldoClienteUncheckedCreateInput = {
    id?: number
    saldoPendiente?: number | null
    saldoFavor?: number | null
    totalPagos?: number | null
    clienteId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type saldoClienteUpdateInput = {
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoFavor?: NullableFloatFieldUpdateOperationsInput | number | null
    totalPagos?: NullableFloatFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutSaldoClienteNestedInput
  }

  export type saldoClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoFavor?: NullableFloatFieldUpdateOperationsInput | number | null
    totalPagos?: NullableFloatFieldUpdateOperationsInput | number | null
    clienteId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type saldoClienteCreateManyInput = {
    id?: number
    saldoPendiente?: number | null
    saldoFavor?: number | null
    totalPagos?: number | null
    clienteId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type saldoClienteUpdateManyMutationInput = {
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoFavor?: NullableFloatFieldUpdateOperationsInput | number | null
    totalPagos?: NullableFloatFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type saldoClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoFavor?: NullableFloatFieldUpdateOperationsInput | number | null
    totalPagos?: NullableFloatFieldUpdateOperationsInput | number | null
    clienteId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UbicacionCreateInput = {
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    cliente: ClienteInternetCreateNestedOneWithoutUbicacionInput
    empresa: EmpresaCreateNestedOneWithoutUbicacionInput
  }

  export type UbicacionUncheckedCreateInput = {
    id?: number
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    clienteId: number
    empresaId: number
  }

  export type UbicacionUpdateInput = {
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutUbicacionNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutUbicacionNestedInput
  }

  export type UbicacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type UbicacionCreateManyInput = {
    id?: number
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    clienteId: number
    empresaId: number
  }

  export type UbicacionUpdateManyMutationInput = {
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UbicacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartamentoCreateInput = {
    nombre: string
    municipios?: MunicipioCreateNestedManyWithoutDepartamentoInput
    clientes?: ClienteInternetCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUncheckedCreateInput = {
    id?: number
    nombre: string
    municipios?: MunicipioUncheckedCreateNestedManyWithoutDepartamentoInput
    clientes?: ClienteInternetUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    municipios?: MunicipioUpdateManyWithoutDepartamentoNestedInput
    clientes?: ClienteInternetUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    municipios?: MunicipioUncheckedUpdateManyWithoutDepartamentoNestedInput
    clientes?: ClienteInternetUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoCreateManyInput = {
    id?: number
    nombre: string
  }

  export type DepartamentoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type DepartamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type MunicipioCreateInput = {
    nombre: string
    departamento: DepartamentoCreateNestedOneWithoutMunicipiosInput
    clientes?: ClienteInternetCreateNestedManyWithoutMunicipioInput
  }

  export type MunicipioUncheckedCreateInput = {
    id?: number
    nombre: string
    departamentoId: number
    clientes?: ClienteInternetUncheckedCreateNestedManyWithoutMunicipioInput
  }

  export type MunicipioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: DepartamentoUpdateOneRequiredWithoutMunicipiosNestedInput
    clientes?: ClienteInternetUpdateManyWithoutMunicipioNestedInput
  }

  export type MunicipioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamentoId?: IntFieldUpdateOperationsInput | number
    clientes?: ClienteInternetUncheckedUpdateManyWithoutMunicipioNestedInput
  }

  export type MunicipioCreateManyInput = {
    id?: number
    nombre: string
    departamentoId: number
  }

  export type MunicipioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type MunicipioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamentoId?: IntFieldUpdateOperationsInput | number
  }

  export type RutaCreateInput = {
    nombreRuta: string
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    cobrador: UsuarioCreateNestedOneWithoutRutaInput
    Clientes?: ClienteInternetCreateNestedManyWithoutRutaInput
    Empresa: EmpresaCreateNestedOneWithoutRutasInput
  }

  export type RutaUncheckedCreateInput = {
    id?: number
    nombreRuta: string
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    EmpresaId: number
    Clientes?: ClienteInternetUncheckedCreateNestedManyWithoutRutaInput
  }

  export type RutaUpdateInput = {
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    cobrador?: UsuarioUpdateOneRequiredWithoutRutaNestedInput
    Clientes?: ClienteInternetUpdateManyWithoutRutaNestedInput
    Empresa?: EmpresaUpdateOneRequiredWithoutRutasNestedInput
  }

  export type RutaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobradorId?: IntFieldUpdateOperationsInput | number
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    EmpresaId?: IntFieldUpdateOperationsInput | number
    Clientes?: ClienteInternetUncheckedUpdateManyWithoutRutaNestedInput
  }

  export type RutaCreateManyInput = {
    id?: number
    nombreRuta: string
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    EmpresaId: number
  }

  export type RutaUpdateManyMutationInput = {
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
  }

  export type RutaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobradorId?: IntFieldUpdateOperationsInput | number
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    EmpresaId?: IntFieldUpdateOperationsInput | number
  }

  export type TicketSoporteCreateInput = {
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    cliente: ClienteInternetCreateNestedOneWithoutTicketSoporteInput
    empresa: EmpresaCreateNestedOneWithoutTicketSoporteInput
    tecnico?: UsuarioCreateNestedOneWithoutTicketsAsignadosInput
    creadoPor?: UsuarioCreateNestedOneWithoutTicketsCreadosInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteUncheckedCreateInput = {
    id?: number
    clienteId: number
    empresaId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteUpdateInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutTicketSoporteNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutTicketSoporteNestedInput
    tecnico?: UsuarioUpdateOneWithoutTicketsAsignadosNestedInput
    creadoPor?: UsuarioUpdateOneWithoutTicketsCreadosNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteCreateManyInput = {
    id?: number
    clienteId: number
    empresaId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
  }

  export type TicketSoporteUpdateManyMutationInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketSoporteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeguimientoTicketCreateInput = {
    descripcion: string
    fechaRegistro?: Date | string
    ticket: TicketSoporteCreateNestedOneWithoutSeguimientoTicketInput
    usuario: UsuarioCreateNestedOneWithoutSeguimientoTicketInput
  }

  export type SeguimientoTicketUncheckedCreateInput = {
    id?: number
    ticketId: number
    usuarioId: number
    descripcion: string
    fechaRegistro?: Date | string
  }

  export type SeguimientoTicketUpdateInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketSoporteUpdateOneRequiredWithoutSeguimientoTicketNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutSeguimientoTicketNestedInput
  }

  export type SeguimientoTicketUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguimientoTicketCreateManyInput = {
    id?: number
    ticketId: number
    usuarioId: number
    descripcion: string
    fechaRegistro?: Date | string
  }

  export type SeguimientoTicketUpdateManyMutationInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguimientoTicketUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioListRelationFilter = {
    every?: UsuarioWhereInput
    some?: UsuarioWhereInput
    none?: UsuarioWhereInput
  }

  export type RutaListRelationFilter = {
    every?: RutaWhereInput
    some?: RutaWhereInput
    none?: RutaWhereInput
  }

  export type ClienteInternetListRelationFilter = {
    every?: ClienteInternetWhereInput
    some?: ClienteInternetWhereInput
    none?: ClienteInternetWhereInput
  }

  export type FacturaInternetListRelationFilter = {
    every?: FacturaInternetWhereInput
    some?: FacturaInternetWhereInput
    none?: FacturaInternetWhereInput
  }

  export type TicketSoporteListRelationFilter = {
    every?: TicketSoporteWhereInput
    some?: TicketSoporteWhereInput
    none?: TicketSoporteWhereInput
  }

  export type SaldoEmpresaNullableRelationFilter = {
    is?: SaldoEmpresaWhereInput | null
    isNot?: SaldoEmpresaWhereInput | null
  }

  export type SaldoCajaNullableRelationFilter = {
    is?: SaldoCajaWhereInput | null
    isNot?: SaldoCajaWhereInput | null
  }

  export type ServicioInternetListRelationFilter = {
    every?: ServicioInternetWhereInput
    some?: ServicioInternetWhereInput
    none?: ServicioInternetWhereInput
  }

  export type UbicacionListRelationFilter = {
    every?: UbicacionWhereInput
    some?: UbicacionWhereInput
    none?: UbicacionWhereInput
  }

  export type ProveedorListRelationFilter = {
    every?: ProveedorWhereInput
    some?: ProveedorWhereInput
    none?: ProveedorWhereInput
  }

  export type ServicioListRelationFilter = {
    every?: ServicioWhereInput
    some?: ServicioWhereInput
    none?: ServicioWhereInput
  }

  export type FacturaListRelationFilter = {
    every?: FacturaWhereInput
    some?: FacturaWhereInput
    none?: FacturaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RutaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteInternetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacturaInternetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketSoporteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServicioInternetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UbicacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProveedorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmpresaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    pbx?: SortOrder
    correo?: SortOrder
    sitioWeb?: SortOrder
    nit?: SortOrder
    logo1?: SortOrder
    logo2?: SortOrder
    logo3?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type EmpresaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmpresaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    pbx?: SortOrder
    correo?: SortOrder
    sitioWeb?: SortOrder
    nit?: SortOrder
    logo1?: SortOrder
    logo2?: SortOrder
    logo3?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type EmpresaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    pbx?: SortOrder
    correo?: SortOrder
    sitioWeb?: SortOrder
    nit?: SortOrder
    logo1?: SortOrder
    logo2?: SortOrder
    logo3?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type EmpresaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumEstadoServicioFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoServicio | EnumEstadoServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoServicioFilter<$PrismaModel> | $Enums.EstadoServicio
  }

  export type TipoServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type TipoServicioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type TipoServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type TipoServicioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumEstadoServicioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoServicio | EnumEstadoServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoServicioWithAggregatesFilter<$PrismaModel> | $Enums.EstadoServicio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoServicioFilter<$PrismaModel>
    _max?: NestedEnumEstadoServicioFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TipoServicioRelationFilter = {
    is?: TipoServicioWhereInput
    isNot?: TipoServicioWhereInput
  }

  export type EmpresaRelationFilter = {
    is?: EmpresaWhereInput
    isNot?: EmpresaWhereInput
  }

  export type ClienteServicioListRelationFilter = {
    every?: ClienteServicioWhereInput
    some?: ClienteServicioWhereInput
    none?: ClienteServicioWhereInput
  }

  export type FacturaServicioListRelationFilter = {
    every?: FacturaServicioWhereInput
    some?: FacturaServicioWhereInput
    none?: FacturaServicioWhereInput
  }

  export type ClienteServicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacturaServicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    estado?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ServicioAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
  }

  export type ServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    estado?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    estado?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ServicioSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    tipoServicioId?: SortOrder
    empresaId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProveedorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    empresaId?: SortOrder
  }

  export type ProveedorAvgOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
  }

  export type ProveedorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    empresaId?: SortOrder
  }

  export type ProveedorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    empresaId?: SortOrder
  }

  export type ProveedorSumOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
  }

  export type ServicioInternetCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    velocidad?: SortOrder
    precio?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresaId?: SortOrder
  }

  export type ServicioInternetAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    empresaId?: SortOrder
  }

  export type ServicioInternetMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    velocidad?: SortOrder
    precio?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresaId?: SortOrder
  }

  export type ServicioInternetMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    velocidad?: SortOrder
    precio?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
    empresaId?: SortOrder
  }

  export type ServicioInternetSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    empresaId?: SortOrder
  }

  export type SaldoEmpresaCountOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type SaldoEmpresaAvgOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
  }

  export type SaldoEmpresaMaxOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type SaldoEmpresaMinOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type SaldoEmpresaSumOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egresos?: SortOrder
    totalIngresos?: SortOrder
    empresaId?: SortOrder
  }

  export type RegistroCajaListRelationFilter = {
    every?: RegistroCajaWhereInput
    some?: RegistroCajaWhereInput
    none?: RegistroCajaWhereInput
  }

  export type RegistroCajaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaldoCajaCountOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type SaldoCajaAvgOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
  }

  export type SaldoCajaMaxOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type SaldoCajaMinOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type SaldoCajaSumOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
    egreso?: SortOrder
    totalIngresos?: SortOrder
    totalEgresos?: SortOrder
    empresaId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UsuarioNullableRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type RegistroCajaCountOrderByAggregateInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrder
    cajaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type RegistroCajaAvgOrderByAggregateInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrder
    cajaId?: SortOrder
  }

  export type RegistroCajaMaxOrderByAggregateInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrder
    cajaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type RegistroCajaMinOrderByAggregateInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrder
    cajaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type RegistroCajaSumOrderByAggregateInput = {
    id?: SortOrder
    saldoInicial?: SortOrder
    saldoFinal?: SortOrder
    usuarioId?: SortOrder
    cajaId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumEstadoClienteServicioFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoClienteServicio | EnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteServicioFilter<$PrismaModel> | $Enums.EstadoClienteServicio
  }

  export type ClienteInternetRelationFilter = {
    is?: ClienteInternetWhereInput
    isNot?: ClienteInternetWhereInput
  }

  export type ServicioRelationFilter = {
    is?: ServicioWhereInput
    isNot?: ServicioWhereInput
  }

  export type ClienteServicioCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ClienteServicioAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
  }

  export type ClienteServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ClienteServicioMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ClienteServicioSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicioId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumEstadoClienteServicioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoClienteServicio | EnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteServicioWithAggregatesFilter<$PrismaModel> | $Enums.EstadoClienteServicio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoClienteServicioFilter<$PrismaModel>
    _max?: NestedEnumEstadoClienteServicioFilter<$PrismaModel>
  }

  export type EnumTipoFacturaFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoFactura | EnumTipoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFacturaFilter<$PrismaModel> | $Enums.TipoFactura
  }

  export type EnumEstadoFacturaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaFilter<$PrismaModel> | $Enums.EstadoFactura
  }

  export type PagoFacturaListRelationFilter = {
    every?: PagoFacturaWhereInput
    some?: PagoFacturaWhereInput
    none?: PagoFacturaWhereInput
  }

  export type PagoFacturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacturaCountOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    tipoFactura?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
    fechaEmision?: SortOrder
    fechaVencimiento?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaAvgOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
  }

  export type FacturaMaxOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    tipoFactura?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
    fechaEmision?: SortOrder
    fechaVencimiento?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaMinOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    tipoFactura?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
    fechaEmision?: SortOrder
    fechaVencimiento?: SortOrder
    estado?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaSumOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
    montoTotal?: SortOrder
    saldoPendiente?: SortOrder
  }

  export type EnumTipoFacturaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoFactura | EnumTipoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFacturaWithAggregatesFilter<$PrismaModel> | $Enums.TipoFactura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoFacturaFilter<$PrismaModel>
    _max?: NestedEnumTipoFacturaFilter<$PrismaModel>
  }

  export type EnumEstadoFacturaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoFactura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFacturaFilter<$PrismaModel>
    _max?: NestedEnumEstadoFacturaFilter<$PrismaModel>
  }

  export type EnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type FacturaRelationFilter = {
    is?: FacturaWhereInput
    isNot?: FacturaWhereInput
  }

  export type PagoFacturaCountOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
  }

  export type PagoFacturaAvgOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
  }

  export type PagoFacturaMaxOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
  }

  export type PagoFacturaMinOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
  }

  export type PagoFacturaSumOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
  }

  export type EnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumMetodoPagoFacturaInternetFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPagoFacturaInternet | EnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel> | $Enums.MetodoPagoFacturaInternet
  }

  export type EnumEstadoFacturaInternetFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFacturaInternet | EnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaInternetFilter<$PrismaModel> | $Enums.EstadoFacturaInternet
  }

  export type PagoFacturaInternetListRelationFilter = {
    every?: PagoFacturaInternetWhereInput
    some?: PagoFacturaInternetWhereInput
    none?: PagoFacturaInternetWhereInput
  }

  export type PagoFacturaInternetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacturaInternetCountOrderByAggregateInput = {
    id?: SortOrder
    fechaPagoEsperada?: SortOrder
    fechaPagada?: SortOrder
    montoPago?: SortOrder
    saldoPendiente?: SortOrder
    empresaId?: SortOrder
    metodoPago?: SortOrder
    clienteId?: SortOrder
    estadoFacturaInternet?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaInternetAvgOrderByAggregateInput = {
    id?: SortOrder
    montoPago?: SortOrder
    saldoPendiente?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
  }

  export type FacturaInternetMaxOrderByAggregateInput = {
    id?: SortOrder
    fechaPagoEsperada?: SortOrder
    fechaPagada?: SortOrder
    montoPago?: SortOrder
    saldoPendiente?: SortOrder
    empresaId?: SortOrder
    metodoPago?: SortOrder
    clienteId?: SortOrder
    estadoFacturaInternet?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaInternetMinOrderByAggregateInput = {
    id?: SortOrder
    fechaPagoEsperada?: SortOrder
    fechaPagada?: SortOrder
    montoPago?: SortOrder
    saldoPendiente?: SortOrder
    empresaId?: SortOrder
    metodoPago?: SortOrder
    clienteId?: SortOrder
    estadoFacturaInternet?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaInternetSumOrderByAggregateInput = {
    id?: SortOrder
    montoPago?: SortOrder
    saldoPendiente?: SortOrder
    empresaId?: SortOrder
    clienteId?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumMetodoPagoFacturaInternetWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPagoFacturaInternet | EnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFacturaInternetWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPagoFacturaInternet
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel>
  }

  export type EnumEstadoFacturaInternetWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFacturaInternet | EnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaInternetWithAggregatesFilter<$PrismaModel> | $Enums.EstadoFacturaInternet
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFacturaInternetFilter<$PrismaModel>
    _max?: NestedEnumEstadoFacturaInternetFilter<$PrismaModel>
  }

  export type FacturaInternetRelationFilter = {
    is?: FacturaInternetWhereInput
    isNot?: FacturaInternetWhereInput
  }

  export type PagoFacturaInternetCountOrderByAggregateInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
  }

  export type PagoFacturaInternetAvgOrderByAggregateInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
  }

  export type PagoFacturaInternetMaxOrderByAggregateInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
  }

  export type PagoFacturaInternetMinOrderByAggregateInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
    metodoPago?: SortOrder
    fechaPago?: SortOrder
    creadoEn?: SortOrder
  }

  export type PagoFacturaInternetSumOrderByAggregateInput = {
    id?: SortOrder
    facturaInternetId?: SortOrder
    clienteId?: SortOrder
    montoPagado?: SortOrder
  }

  export type FacturaServicioCountOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaServicioAvgOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
  }

  export type FacturaServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaServicioMinOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FacturaServicioSumOrderByAggregateInput = {
    id?: SortOrder
    facturaId?: SortOrder
    servicioId?: SortOrder
    cantidad?: SortOrder
    precioUnitario?: SortOrder
    total?: SortOrder
  }

  export type ClienteInternetNullableRelationFilter = {
    is?: ClienteInternetWhereInput | null
    isNot?: ClienteInternetWhereInput | null
  }

  export type IPCountOrderByAggregateInput = {
    id?: SortOrder
    direccionIp?: SortOrder
    clienteId?: SortOrder
  }

  export type IPAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type IPMaxOrderByAggregateInput = {
    id?: SortOrder
    direccionIp?: SortOrder
    clienteId?: SortOrder
  }

  export type IPMinOrderByAggregateInput = {
    id?: SortOrder
    direccionIp?: SortOrder
    clienteId?: SortOrder
  }

  export type IPSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type FotosCountOrderByAggregateInput = {
    id?: SortOrder
    nombreFoto?: SortOrder
    url?: SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FotosAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type FotosMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreFoto?: SortOrder
    url?: SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FotosMinOrderByAggregateInput = {
    id?: SortOrder
    nombreFoto?: SortOrder
    url?: SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type FotosSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type EnumEstadoClienteFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCliente | EnumEstadoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteFilter<$PrismaModel> | $Enums.EstadoCliente
  }

  export type ServicioInternetRelationFilter = {
    is?: ServicioInternetWhereInput
    isNot?: ServicioInternetWhereInput
  }

  export type MunicipioNullableRelationFilter = {
    is?: MunicipioWhereInput | null
    isNot?: MunicipioWhereInput | null
  }

  export type DepartamentoNullableRelationFilter = {
    is?: DepartamentoWhereInput | null
    isNot?: DepartamentoWhereInput | null
  }

  export type IPNullableRelationFilter = {
    is?: IPWhereInput | null
    isNot?: IPWhereInput | null
  }

  export type UbicacionNullableRelationFilter = {
    is?: UbicacionWhereInput | null
    isNot?: UbicacionWhereInput | null
  }

  export type SaldoClienteNullableRelationFilter = {
    is?: saldoClienteWhereInput | null
    isNot?: saldoClienteWhereInput | null
  }

  export type FotosListRelationFilter = {
    every?: FotosWhereInput
    some?: FotosWhereInput
    none?: FotosWhereInput
  }

  export type FotosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteInternetCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    dpi?: SortOrder
    observaciones?: SortOrder
    contactoReferenciaNombre?: SortOrder
    contactoReferenciaTelefono?: SortOrder
    estadoCliente?: SortOrder
    contrasenaWifi?: SortOrder
    ssidRouter?: SortOrder
    fechaInstalacion?: SortOrder
    asesorId?: SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrder
    departamentoId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ClienteInternetAvgOrderByAggregateInput = {
    id?: SortOrder
    asesorId?: SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrder
    departamentoId?: SortOrder
    empresaId?: SortOrder
  }

  export type ClienteInternetMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    dpi?: SortOrder
    observaciones?: SortOrder
    contactoReferenciaNombre?: SortOrder
    contactoReferenciaTelefono?: SortOrder
    estadoCliente?: SortOrder
    contrasenaWifi?: SortOrder
    ssidRouter?: SortOrder
    fechaInstalacion?: SortOrder
    asesorId?: SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrder
    departamentoId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ClienteInternetMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    telefono?: SortOrder
    direccion?: SortOrder
    dpi?: SortOrder
    observaciones?: SortOrder
    contactoReferenciaNombre?: SortOrder
    contactoReferenciaTelefono?: SortOrder
    estadoCliente?: SortOrder
    contrasenaWifi?: SortOrder
    ssidRouter?: SortOrder
    fechaInstalacion?: SortOrder
    asesorId?: SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrder
    departamentoId?: SortOrder
    empresaId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type ClienteInternetSumOrderByAggregateInput = {
    id?: SortOrder
    asesorId?: SortOrder
    servicioId?: SortOrder
    municipioId?: SortOrder
    departamentoId?: SortOrder
    empresaId?: SortOrder
  }

  export type EnumEstadoClienteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCliente | EnumEstadoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCliente
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoClienteFilter<$PrismaModel>
    _max?: NestedEnumEstadoClienteFilter<$PrismaModel>
  }

  export type saldoClienteCountOrderByAggregateInput = {
    id?: SortOrder
    saldoPendiente?: SortOrder
    saldoFavor?: SortOrder
    totalPagos?: SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type saldoClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    saldoPendiente?: SortOrder
    saldoFavor?: SortOrder
    totalPagos?: SortOrder
    clienteId?: SortOrder
  }

  export type saldoClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    saldoPendiente?: SortOrder
    saldoFavor?: SortOrder
    totalPagos?: SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type saldoClienteMinOrderByAggregateInput = {
    id?: SortOrder
    saldoPendiente?: SortOrder
    saldoFavor?: SortOrder
    totalPagos?: SortOrder
    clienteId?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type saldoClienteSumOrderByAggregateInput = {
    id?: SortOrder
    saldoPendiente?: SortOrder
    saldoFavor?: SortOrder
    totalPagos?: SortOrder
    clienteId?: SortOrder
  }

  export type UbicacionCountOrderByAggregateInput = {
    id?: SortOrder
    creadoEn?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
  }

  export type UbicacionAvgOrderByAggregateInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
  }

  export type UbicacionMaxOrderByAggregateInput = {
    id?: SortOrder
    creadoEn?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
  }

  export type UbicacionMinOrderByAggregateInput = {
    id?: SortOrder
    creadoEn?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
  }

  export type UbicacionSumOrderByAggregateInput = {
    id?: SortOrder
    latitud?: SortOrder
    longitud?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
  }

  export type MunicipioListRelationFilter = {
    every?: MunicipioWhereInput
    some?: MunicipioWhereInput
    none?: MunicipioWhereInput
  }

  export type MunicipioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartamentoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type DepartamentoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type DepartamentoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type DepartamentoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartamentoRelationFilter = {
    is?: DepartamentoWhereInput
    isNot?: DepartamentoWhereInput
  }

  export type MunicipioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamentoId?: SortOrder
  }

  export type MunicipioAvgOrderByAggregateInput = {
    id?: SortOrder
    departamentoId?: SortOrder
  }

  export type MunicipioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamentoId?: SortOrder
  }

  export type MunicipioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    departamentoId?: SortOrder
  }

  export type MunicipioSumOrderByAggregateInput = {
    id?: SortOrder
    departamentoId?: SortOrder
  }

  export type EnumEstadoRutaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRuta | EnumEstadoRutaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRutaFilter<$PrismaModel> | $Enums.EstadoRuta
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type RutaCountOrderByAggregateInput = {
    id?: SortOrder
    nombreRuta?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    estadoRuta?: SortOrder
    EmpresaId?: SortOrder
  }

  export type RutaAvgOrderByAggregateInput = {
    id?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    EmpresaId?: SortOrder
  }

  export type RutaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreRuta?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    estadoRuta?: SortOrder
    EmpresaId?: SortOrder
  }

  export type RutaMinOrderByAggregateInput = {
    id?: SortOrder
    nombreRuta?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    estadoRuta?: SortOrder
    EmpresaId?: SortOrder
  }

  export type RutaSumOrderByAggregateInput = {
    id?: SortOrder
    cobradorId?: SortOrder
    cobrados?: SortOrder
    montoCobrado?: SortOrder
    EmpresaId?: SortOrder
  }

  export type EnumEstadoRutaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRuta | EnumEstadoRutaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRutaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoRuta
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoRutaFilter<$PrismaModel>
    _max?: NestedEnumEstadoRutaFilter<$PrismaModel>
  }

  export type EnumEstadoTicketSoporteFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTicketSoporte | EnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTicketSoporteFilter<$PrismaModel> | $Enums.EstadoTicketSoporte
  }

  export type EnumPrioridadTicketSoporteFilter<$PrismaModel = never> = {
    equals?: $Enums.PrioridadTicketSoporte | EnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumPrioridadTicketSoporteFilter<$PrismaModel> | $Enums.PrioridadTicketSoporte
  }

  export type SeguimientoTicketListRelationFilter = {
    every?: SeguimientoTicketWhereInput
    some?: SeguimientoTicketWhereInput
    none?: SeguimientoTicketWhereInput
  }

  export type SeguimientoTicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketSoporteCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrder
    creadoPorId?: SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    descripcion?: SortOrder
    comentarios?: SortOrder
    fechaCreacion?: SortOrder
    fechaCierre?: SortOrder
  }

  export type TicketSoporteAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrder
    creadoPorId?: SortOrder
  }

  export type TicketSoporteMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrder
    creadoPorId?: SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    descripcion?: SortOrder
    comentarios?: SortOrder
    fechaCreacion?: SortOrder
    fechaCierre?: SortOrder
  }

  export type TicketSoporteMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrder
    creadoPorId?: SortOrder
    estado?: SortOrder
    prioridad?: SortOrder
    descripcion?: SortOrder
    comentarios?: SortOrder
    fechaCreacion?: SortOrder
    fechaCierre?: SortOrder
  }

  export type TicketSoporteSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    empresaId?: SortOrder
    tecnicoId?: SortOrder
    creadoPorId?: SortOrder
  }

  export type EnumEstadoTicketSoporteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTicketSoporte | EnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTicketSoporteWithAggregatesFilter<$PrismaModel> | $Enums.EstadoTicketSoporte
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoTicketSoporteFilter<$PrismaModel>
    _max?: NestedEnumEstadoTicketSoporteFilter<$PrismaModel>
  }

  export type EnumPrioridadTicketSoporteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PrioridadTicketSoporte | EnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumPrioridadTicketSoporteWithAggregatesFilter<$PrismaModel> | $Enums.PrioridadTicketSoporte
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPrioridadTicketSoporteFilter<$PrismaModel>
    _max?: NestedEnumPrioridadTicketSoporteFilter<$PrismaModel>
  }

  export type TicketSoporteRelationFilter = {
    is?: TicketSoporteWhereInput
    isNot?: TicketSoporteWhereInput
  }

  export type SeguimientoTicketCountOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
    descripcion?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type SeguimientoTicketAvgOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
  }

  export type SeguimientoTicketMaxOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
    descripcion?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type SeguimientoTicketMinOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
    descripcion?: SortOrder
    fechaRegistro?: SortOrder
  }

  export type SeguimientoTicketSumOrderByAggregateInput = {
    id?: SortOrder
    ticketId?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnumRolUsuarioFilter<$PrismaModel = never> = {
    equals?: $Enums.RolUsuario | EnumRolUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumRolUsuarioFilter<$PrismaModel> | $Enums.RolUsuario
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    telefono?: SortOrder
    rol?: SortOrder
    activo?: SortOrder
    creadoEn?: SortOrder
    actualizadoEn?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    empresaId?: SortOrder
    sucursalId?: SortOrder
  }

  export type EnumRolUsuarioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RolUsuario | EnumRolUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumRolUsuarioWithAggregatesFilter<$PrismaModel> | $Enums.RolUsuario
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolUsuarioFilter<$PrismaModel>
    _max?: NestedEnumRolUsuarioFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UsuarioCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<UsuarioCreateWithoutEmpresaInput, UsuarioUncheckedCreateWithoutEmpresaInput> | UsuarioCreateWithoutEmpresaInput[] | UsuarioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutEmpresaInput | UsuarioCreateOrConnectWithoutEmpresaInput[]
    createMany?: UsuarioCreateManyEmpresaInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type RutaCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<RutaCreateWithoutEmpresaInput, RutaUncheckedCreateWithoutEmpresaInput> | RutaCreateWithoutEmpresaInput[] | RutaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutEmpresaInput | RutaCreateOrConnectWithoutEmpresaInput[]
    createMany?: RutaCreateManyEmpresaInputEnvelope
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
  }

  export type ClienteInternetCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ClienteInternetCreateWithoutEmpresaInput, ClienteInternetUncheckedCreateWithoutEmpresaInput> | ClienteInternetCreateWithoutEmpresaInput[] | ClienteInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutEmpresaInput | ClienteInternetCreateOrConnectWithoutEmpresaInput[]
    createMany?: ClienteInternetCreateManyEmpresaInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type FacturaInternetCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<FacturaInternetCreateWithoutEmpresaInput, FacturaInternetUncheckedCreateWithoutEmpresaInput> | FacturaInternetCreateWithoutEmpresaInput[] | FacturaInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutEmpresaInput | FacturaInternetCreateOrConnectWithoutEmpresaInput[]
    createMany?: FacturaInternetCreateManyEmpresaInputEnvelope
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
  }

  export type TicketSoporteCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<TicketSoporteCreateWithoutEmpresaInput, TicketSoporteUncheckedCreateWithoutEmpresaInput> | TicketSoporteCreateWithoutEmpresaInput[] | TicketSoporteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutEmpresaInput | TicketSoporteCreateOrConnectWithoutEmpresaInput[]
    createMany?: TicketSoporteCreateManyEmpresaInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type SaldoEmpresaCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<SaldoEmpresaCreateWithoutEmpresaInput, SaldoEmpresaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoEmpresaCreateOrConnectWithoutEmpresaInput
    connect?: SaldoEmpresaWhereUniqueInput
  }

  export type SaldoCajaCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<SaldoCajaCreateWithoutEmpresaInput, SaldoCajaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoCajaCreateOrConnectWithoutEmpresaInput
    connect?: SaldoCajaWhereUniqueInput
  }

  export type ServicioInternetCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ServicioInternetCreateWithoutEmpresaInput, ServicioInternetUncheckedCreateWithoutEmpresaInput> | ServicioInternetCreateWithoutEmpresaInput[] | ServicioInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioInternetCreateOrConnectWithoutEmpresaInput | ServicioInternetCreateOrConnectWithoutEmpresaInput[]
    createMany?: ServicioInternetCreateManyEmpresaInputEnvelope
    connect?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
  }

  export type UbicacionCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<UbicacionCreateWithoutEmpresaInput, UbicacionUncheckedCreateWithoutEmpresaInput> | UbicacionCreateWithoutEmpresaInput[] | UbicacionUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UbicacionCreateOrConnectWithoutEmpresaInput | UbicacionCreateOrConnectWithoutEmpresaInput[]
    createMany?: UbicacionCreateManyEmpresaInputEnvelope
    connect?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
  }

  export type ProveedorCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ProveedorCreateWithoutEmpresaInput, ProveedorUncheckedCreateWithoutEmpresaInput> | ProveedorCreateWithoutEmpresaInput[] | ProveedorUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutEmpresaInput | ProveedorCreateOrConnectWithoutEmpresaInput[]
    createMany?: ProveedorCreateManyEmpresaInputEnvelope
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
  }

  export type ServicioCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ServicioCreateWithoutEmpresaInput, ServicioUncheckedCreateWithoutEmpresaInput> | ServicioCreateWithoutEmpresaInput[] | ServicioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutEmpresaInput | ServicioCreateOrConnectWithoutEmpresaInput[]
    createMany?: ServicioCreateManyEmpresaInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type FacturaCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<FacturaCreateWithoutEmpresaInput, FacturaUncheckedCreateWithoutEmpresaInput> | FacturaCreateWithoutEmpresaInput[] | FacturaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutEmpresaInput | FacturaCreateOrConnectWithoutEmpresaInput[]
    createMany?: FacturaCreateManyEmpresaInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type UsuarioUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<UsuarioCreateWithoutEmpresaInput, UsuarioUncheckedCreateWithoutEmpresaInput> | UsuarioCreateWithoutEmpresaInput[] | UsuarioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutEmpresaInput | UsuarioCreateOrConnectWithoutEmpresaInput[]
    createMany?: UsuarioCreateManyEmpresaInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type RutaUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<RutaCreateWithoutEmpresaInput, RutaUncheckedCreateWithoutEmpresaInput> | RutaCreateWithoutEmpresaInput[] | RutaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutEmpresaInput | RutaCreateOrConnectWithoutEmpresaInput[]
    createMany?: RutaCreateManyEmpresaInputEnvelope
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
  }

  export type ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ClienteInternetCreateWithoutEmpresaInput, ClienteInternetUncheckedCreateWithoutEmpresaInput> | ClienteInternetCreateWithoutEmpresaInput[] | ClienteInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutEmpresaInput | ClienteInternetCreateOrConnectWithoutEmpresaInput[]
    createMany?: ClienteInternetCreateManyEmpresaInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<FacturaInternetCreateWithoutEmpresaInput, FacturaInternetUncheckedCreateWithoutEmpresaInput> | FacturaInternetCreateWithoutEmpresaInput[] | FacturaInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutEmpresaInput | FacturaInternetCreateOrConnectWithoutEmpresaInput[]
    createMany?: FacturaInternetCreateManyEmpresaInputEnvelope
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
  }

  export type TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<TicketSoporteCreateWithoutEmpresaInput, TicketSoporteUncheckedCreateWithoutEmpresaInput> | TicketSoporteCreateWithoutEmpresaInput[] | TicketSoporteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutEmpresaInput | TicketSoporteCreateOrConnectWithoutEmpresaInput[]
    createMany?: TicketSoporteCreateManyEmpresaInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<SaldoEmpresaCreateWithoutEmpresaInput, SaldoEmpresaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoEmpresaCreateOrConnectWithoutEmpresaInput
    connect?: SaldoEmpresaWhereUniqueInput
  }

  export type SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<SaldoCajaCreateWithoutEmpresaInput, SaldoCajaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoCajaCreateOrConnectWithoutEmpresaInput
    connect?: SaldoCajaWhereUniqueInput
  }

  export type ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ServicioInternetCreateWithoutEmpresaInput, ServicioInternetUncheckedCreateWithoutEmpresaInput> | ServicioInternetCreateWithoutEmpresaInput[] | ServicioInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioInternetCreateOrConnectWithoutEmpresaInput | ServicioInternetCreateOrConnectWithoutEmpresaInput[]
    createMany?: ServicioInternetCreateManyEmpresaInputEnvelope
    connect?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
  }

  export type UbicacionUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<UbicacionCreateWithoutEmpresaInput, UbicacionUncheckedCreateWithoutEmpresaInput> | UbicacionCreateWithoutEmpresaInput[] | UbicacionUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UbicacionCreateOrConnectWithoutEmpresaInput | UbicacionCreateOrConnectWithoutEmpresaInput[]
    createMany?: UbicacionCreateManyEmpresaInputEnvelope
    connect?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
  }

  export type ProveedorUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ProveedorCreateWithoutEmpresaInput, ProveedorUncheckedCreateWithoutEmpresaInput> | ProveedorCreateWithoutEmpresaInput[] | ProveedorUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutEmpresaInput | ProveedorCreateOrConnectWithoutEmpresaInput[]
    createMany?: ProveedorCreateManyEmpresaInputEnvelope
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
  }

  export type ServicioUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ServicioCreateWithoutEmpresaInput, ServicioUncheckedCreateWithoutEmpresaInput> | ServicioCreateWithoutEmpresaInput[] | ServicioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutEmpresaInput | ServicioCreateOrConnectWithoutEmpresaInput[]
    createMany?: ServicioCreateManyEmpresaInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type FacturaUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<FacturaCreateWithoutEmpresaInput, FacturaUncheckedCreateWithoutEmpresaInput> | FacturaCreateWithoutEmpresaInput[] | FacturaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutEmpresaInput | FacturaCreateOrConnectWithoutEmpresaInput[]
    createMany?: FacturaCreateManyEmpresaInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<UsuarioCreateWithoutEmpresaInput, UsuarioUncheckedCreateWithoutEmpresaInput> | UsuarioCreateWithoutEmpresaInput[] | UsuarioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutEmpresaInput | UsuarioCreateOrConnectWithoutEmpresaInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutEmpresaInput | UsuarioUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: UsuarioCreateManyEmpresaInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutEmpresaInput | UsuarioUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutEmpresaInput | UsuarioUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type RutaUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<RutaCreateWithoutEmpresaInput, RutaUncheckedCreateWithoutEmpresaInput> | RutaCreateWithoutEmpresaInput[] | RutaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutEmpresaInput | RutaCreateOrConnectWithoutEmpresaInput[]
    upsert?: RutaUpsertWithWhereUniqueWithoutEmpresaInput | RutaUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: RutaCreateManyEmpresaInputEnvelope
    set?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    disconnect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    delete?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    update?: RutaUpdateWithWhereUniqueWithoutEmpresaInput | RutaUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: RutaUpdateManyWithWhereWithoutEmpresaInput | RutaUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: RutaScalarWhereInput | RutaScalarWhereInput[]
  }

  export type ClienteInternetUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutEmpresaInput, ClienteInternetUncheckedCreateWithoutEmpresaInput> | ClienteInternetCreateWithoutEmpresaInput[] | ClienteInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutEmpresaInput | ClienteInternetCreateOrConnectWithoutEmpresaInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutEmpresaInput | ClienteInternetUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ClienteInternetCreateManyEmpresaInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutEmpresaInput | ClienteInternetUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutEmpresaInput | ClienteInternetUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type FacturaInternetUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<FacturaInternetCreateWithoutEmpresaInput, FacturaInternetUncheckedCreateWithoutEmpresaInput> | FacturaInternetCreateWithoutEmpresaInput[] | FacturaInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutEmpresaInput | FacturaInternetCreateOrConnectWithoutEmpresaInput[]
    upsert?: FacturaInternetUpsertWithWhereUniqueWithoutEmpresaInput | FacturaInternetUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: FacturaInternetCreateManyEmpresaInputEnvelope
    set?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    disconnect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    delete?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    update?: FacturaInternetUpdateWithWhereUniqueWithoutEmpresaInput | FacturaInternetUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: FacturaInternetUpdateManyWithWhereWithoutEmpresaInput | FacturaInternetUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: FacturaInternetScalarWhereInput | FacturaInternetScalarWhereInput[]
  }

  export type TicketSoporteUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutEmpresaInput, TicketSoporteUncheckedCreateWithoutEmpresaInput> | TicketSoporteCreateWithoutEmpresaInput[] | TicketSoporteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutEmpresaInput | TicketSoporteCreateOrConnectWithoutEmpresaInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutEmpresaInput | TicketSoporteUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: TicketSoporteCreateManyEmpresaInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutEmpresaInput | TicketSoporteUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutEmpresaInput | TicketSoporteUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type SaldoEmpresaUpdateOneWithoutEmpresaNestedInput = {
    create?: XOR<SaldoEmpresaCreateWithoutEmpresaInput, SaldoEmpresaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoEmpresaCreateOrConnectWithoutEmpresaInput
    upsert?: SaldoEmpresaUpsertWithoutEmpresaInput
    disconnect?: SaldoEmpresaWhereInput | boolean
    delete?: SaldoEmpresaWhereInput | boolean
    connect?: SaldoEmpresaWhereUniqueInput
    update?: XOR<XOR<SaldoEmpresaUpdateToOneWithWhereWithoutEmpresaInput, SaldoEmpresaUpdateWithoutEmpresaInput>, SaldoEmpresaUncheckedUpdateWithoutEmpresaInput>
  }

  export type SaldoCajaUpdateOneWithoutEmpresaNestedInput = {
    create?: XOR<SaldoCajaCreateWithoutEmpresaInput, SaldoCajaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoCajaCreateOrConnectWithoutEmpresaInput
    upsert?: SaldoCajaUpsertWithoutEmpresaInput
    disconnect?: SaldoCajaWhereInput | boolean
    delete?: SaldoCajaWhereInput | boolean
    connect?: SaldoCajaWhereUniqueInput
    update?: XOR<XOR<SaldoCajaUpdateToOneWithWhereWithoutEmpresaInput, SaldoCajaUpdateWithoutEmpresaInput>, SaldoCajaUncheckedUpdateWithoutEmpresaInput>
  }

  export type ServicioInternetUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ServicioInternetCreateWithoutEmpresaInput, ServicioInternetUncheckedCreateWithoutEmpresaInput> | ServicioInternetCreateWithoutEmpresaInput[] | ServicioInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioInternetCreateOrConnectWithoutEmpresaInput | ServicioInternetCreateOrConnectWithoutEmpresaInput[]
    upsert?: ServicioInternetUpsertWithWhereUniqueWithoutEmpresaInput | ServicioInternetUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ServicioInternetCreateManyEmpresaInputEnvelope
    set?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    disconnect?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    delete?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    connect?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    update?: ServicioInternetUpdateWithWhereUniqueWithoutEmpresaInput | ServicioInternetUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ServicioInternetUpdateManyWithWhereWithoutEmpresaInput | ServicioInternetUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ServicioInternetScalarWhereInput | ServicioInternetScalarWhereInput[]
  }

  export type UbicacionUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<UbicacionCreateWithoutEmpresaInput, UbicacionUncheckedCreateWithoutEmpresaInput> | UbicacionCreateWithoutEmpresaInput[] | UbicacionUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UbicacionCreateOrConnectWithoutEmpresaInput | UbicacionCreateOrConnectWithoutEmpresaInput[]
    upsert?: UbicacionUpsertWithWhereUniqueWithoutEmpresaInput | UbicacionUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: UbicacionCreateManyEmpresaInputEnvelope
    set?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    disconnect?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    delete?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    connect?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    update?: UbicacionUpdateWithWhereUniqueWithoutEmpresaInput | UbicacionUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: UbicacionUpdateManyWithWhereWithoutEmpresaInput | UbicacionUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: UbicacionScalarWhereInput | UbicacionScalarWhereInput[]
  }

  export type ProveedorUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ProveedorCreateWithoutEmpresaInput, ProveedorUncheckedCreateWithoutEmpresaInput> | ProveedorCreateWithoutEmpresaInput[] | ProveedorUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutEmpresaInput | ProveedorCreateOrConnectWithoutEmpresaInput[]
    upsert?: ProveedorUpsertWithWhereUniqueWithoutEmpresaInput | ProveedorUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ProveedorCreateManyEmpresaInputEnvelope
    set?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    disconnect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    delete?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    update?: ProveedorUpdateWithWhereUniqueWithoutEmpresaInput | ProveedorUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ProveedorUpdateManyWithWhereWithoutEmpresaInput | ProveedorUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
  }

  export type ServicioUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ServicioCreateWithoutEmpresaInput, ServicioUncheckedCreateWithoutEmpresaInput> | ServicioCreateWithoutEmpresaInput[] | ServicioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutEmpresaInput | ServicioCreateOrConnectWithoutEmpresaInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutEmpresaInput | ServicioUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ServicioCreateManyEmpresaInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutEmpresaInput | ServicioUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutEmpresaInput | ServicioUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type FacturaUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<FacturaCreateWithoutEmpresaInput, FacturaUncheckedCreateWithoutEmpresaInput> | FacturaCreateWithoutEmpresaInput[] | FacturaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutEmpresaInput | FacturaCreateOrConnectWithoutEmpresaInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutEmpresaInput | FacturaUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: FacturaCreateManyEmpresaInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutEmpresaInput | FacturaUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutEmpresaInput | FacturaUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<UsuarioCreateWithoutEmpresaInput, UsuarioUncheckedCreateWithoutEmpresaInput> | UsuarioCreateWithoutEmpresaInput[] | UsuarioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutEmpresaInput | UsuarioCreateOrConnectWithoutEmpresaInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutEmpresaInput | UsuarioUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: UsuarioCreateManyEmpresaInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutEmpresaInput | UsuarioUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutEmpresaInput | UsuarioUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type RutaUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<RutaCreateWithoutEmpresaInput, RutaUncheckedCreateWithoutEmpresaInput> | RutaCreateWithoutEmpresaInput[] | RutaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutEmpresaInput | RutaCreateOrConnectWithoutEmpresaInput[]
    upsert?: RutaUpsertWithWhereUniqueWithoutEmpresaInput | RutaUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: RutaCreateManyEmpresaInputEnvelope
    set?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    disconnect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    delete?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    update?: RutaUpdateWithWhereUniqueWithoutEmpresaInput | RutaUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: RutaUpdateManyWithWhereWithoutEmpresaInput | RutaUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: RutaScalarWhereInput | RutaScalarWhereInput[]
  }

  export type ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutEmpresaInput, ClienteInternetUncheckedCreateWithoutEmpresaInput> | ClienteInternetCreateWithoutEmpresaInput[] | ClienteInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutEmpresaInput | ClienteInternetCreateOrConnectWithoutEmpresaInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutEmpresaInput | ClienteInternetUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ClienteInternetCreateManyEmpresaInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutEmpresaInput | ClienteInternetUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutEmpresaInput | ClienteInternetUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<FacturaInternetCreateWithoutEmpresaInput, FacturaInternetUncheckedCreateWithoutEmpresaInput> | FacturaInternetCreateWithoutEmpresaInput[] | FacturaInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutEmpresaInput | FacturaInternetCreateOrConnectWithoutEmpresaInput[]
    upsert?: FacturaInternetUpsertWithWhereUniqueWithoutEmpresaInput | FacturaInternetUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: FacturaInternetCreateManyEmpresaInputEnvelope
    set?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    disconnect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    delete?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    update?: FacturaInternetUpdateWithWhereUniqueWithoutEmpresaInput | FacturaInternetUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: FacturaInternetUpdateManyWithWhereWithoutEmpresaInput | FacturaInternetUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: FacturaInternetScalarWhereInput | FacturaInternetScalarWhereInput[]
  }

  export type TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutEmpresaInput, TicketSoporteUncheckedCreateWithoutEmpresaInput> | TicketSoporteCreateWithoutEmpresaInput[] | TicketSoporteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutEmpresaInput | TicketSoporteCreateOrConnectWithoutEmpresaInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutEmpresaInput | TicketSoporteUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: TicketSoporteCreateManyEmpresaInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutEmpresaInput | TicketSoporteUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutEmpresaInput | TicketSoporteUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput = {
    create?: XOR<SaldoEmpresaCreateWithoutEmpresaInput, SaldoEmpresaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoEmpresaCreateOrConnectWithoutEmpresaInput
    upsert?: SaldoEmpresaUpsertWithoutEmpresaInput
    disconnect?: SaldoEmpresaWhereInput | boolean
    delete?: SaldoEmpresaWhereInput | boolean
    connect?: SaldoEmpresaWhereUniqueInput
    update?: XOR<XOR<SaldoEmpresaUpdateToOneWithWhereWithoutEmpresaInput, SaldoEmpresaUpdateWithoutEmpresaInput>, SaldoEmpresaUncheckedUpdateWithoutEmpresaInput>
  }

  export type SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput = {
    create?: XOR<SaldoCajaCreateWithoutEmpresaInput, SaldoCajaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: SaldoCajaCreateOrConnectWithoutEmpresaInput
    upsert?: SaldoCajaUpsertWithoutEmpresaInput
    disconnect?: SaldoCajaWhereInput | boolean
    delete?: SaldoCajaWhereInput | boolean
    connect?: SaldoCajaWhereUniqueInput
    update?: XOR<XOR<SaldoCajaUpdateToOneWithWhereWithoutEmpresaInput, SaldoCajaUpdateWithoutEmpresaInput>, SaldoCajaUncheckedUpdateWithoutEmpresaInput>
  }

  export type ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ServicioInternetCreateWithoutEmpresaInput, ServicioInternetUncheckedCreateWithoutEmpresaInput> | ServicioInternetCreateWithoutEmpresaInput[] | ServicioInternetUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioInternetCreateOrConnectWithoutEmpresaInput | ServicioInternetCreateOrConnectWithoutEmpresaInput[]
    upsert?: ServicioInternetUpsertWithWhereUniqueWithoutEmpresaInput | ServicioInternetUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ServicioInternetCreateManyEmpresaInputEnvelope
    set?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    disconnect?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    delete?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    connect?: ServicioInternetWhereUniqueInput | ServicioInternetWhereUniqueInput[]
    update?: ServicioInternetUpdateWithWhereUniqueWithoutEmpresaInput | ServicioInternetUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ServicioInternetUpdateManyWithWhereWithoutEmpresaInput | ServicioInternetUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ServicioInternetScalarWhereInput | ServicioInternetScalarWhereInput[]
  }

  export type UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<UbicacionCreateWithoutEmpresaInput, UbicacionUncheckedCreateWithoutEmpresaInput> | UbicacionCreateWithoutEmpresaInput[] | UbicacionUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: UbicacionCreateOrConnectWithoutEmpresaInput | UbicacionCreateOrConnectWithoutEmpresaInput[]
    upsert?: UbicacionUpsertWithWhereUniqueWithoutEmpresaInput | UbicacionUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: UbicacionCreateManyEmpresaInputEnvelope
    set?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    disconnect?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    delete?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    connect?: UbicacionWhereUniqueInput | UbicacionWhereUniqueInput[]
    update?: UbicacionUpdateWithWhereUniqueWithoutEmpresaInput | UbicacionUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: UbicacionUpdateManyWithWhereWithoutEmpresaInput | UbicacionUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: UbicacionScalarWhereInput | UbicacionScalarWhereInput[]
  }

  export type ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ProveedorCreateWithoutEmpresaInput, ProveedorUncheckedCreateWithoutEmpresaInput> | ProveedorCreateWithoutEmpresaInput[] | ProveedorUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ProveedorCreateOrConnectWithoutEmpresaInput | ProveedorCreateOrConnectWithoutEmpresaInput[]
    upsert?: ProveedorUpsertWithWhereUniqueWithoutEmpresaInput | ProveedorUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ProveedorCreateManyEmpresaInputEnvelope
    set?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    disconnect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    delete?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    connect?: ProveedorWhereUniqueInput | ProveedorWhereUniqueInput[]
    update?: ProveedorUpdateWithWhereUniqueWithoutEmpresaInput | ProveedorUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ProveedorUpdateManyWithWhereWithoutEmpresaInput | ProveedorUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
  }

  export type ServicioUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ServicioCreateWithoutEmpresaInput, ServicioUncheckedCreateWithoutEmpresaInput> | ServicioCreateWithoutEmpresaInput[] | ServicioUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutEmpresaInput | ServicioCreateOrConnectWithoutEmpresaInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutEmpresaInput | ServicioUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ServicioCreateManyEmpresaInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutEmpresaInput | ServicioUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutEmpresaInput | ServicioUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type FacturaUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<FacturaCreateWithoutEmpresaInput, FacturaUncheckedCreateWithoutEmpresaInput> | FacturaCreateWithoutEmpresaInput[] | FacturaUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutEmpresaInput | FacturaCreateOrConnectWithoutEmpresaInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutEmpresaInput | FacturaUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: FacturaCreateManyEmpresaInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutEmpresaInput | FacturaUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutEmpresaInput | FacturaUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type ServicioCreateNestedManyWithoutTipoServicioInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type ServicioUncheckedCreateNestedManyWithoutTipoServicioInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
  }

  export type EnumEstadoServicioFieldUpdateOperationsInput = {
    set?: $Enums.EstadoServicio
  }

  export type ServicioUpdateManyWithoutTipoServicioNestedInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutTipoServicioInput | ServicioUpsertWithWhereUniqueWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutTipoServicioInput | ServicioUpdateWithWhereUniqueWithoutTipoServicioInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutTipoServicioInput | ServicioUpdateManyWithWhereWithoutTipoServicioInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type ServicioUncheckedUpdateManyWithoutTipoServicioNestedInput = {
    create?: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput> | ServicioCreateWithoutTipoServicioInput[] | ServicioUncheckedCreateWithoutTipoServicioInput[]
    connectOrCreate?: ServicioCreateOrConnectWithoutTipoServicioInput | ServicioCreateOrConnectWithoutTipoServicioInput[]
    upsert?: ServicioUpsertWithWhereUniqueWithoutTipoServicioInput | ServicioUpsertWithWhereUniqueWithoutTipoServicioInput[]
    createMany?: ServicioCreateManyTipoServicioInputEnvelope
    set?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    disconnect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    delete?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    connect?: ServicioWhereUniqueInput | ServicioWhereUniqueInput[]
    update?: ServicioUpdateWithWhereUniqueWithoutTipoServicioInput | ServicioUpdateWithWhereUniqueWithoutTipoServicioInput[]
    updateMany?: ServicioUpdateManyWithWhereWithoutTipoServicioInput | ServicioUpdateManyWithWhereWithoutTipoServicioInput[]
    deleteMany?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
  }

  export type TipoServicioCreateNestedOneWithoutServiciosInput = {
    create?: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: TipoServicioCreateOrConnectWithoutServiciosInput
    connect?: TipoServicioWhereUniqueInput
  }

  export type EmpresaCreateNestedOneWithoutServicioInput = {
    create?: XOR<EmpresaCreateWithoutServicioInput, EmpresaUncheckedCreateWithoutServicioInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutServicioInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ClienteServicioCreateNestedManyWithoutServicioInput = {
    create?: XOR<ClienteServicioCreateWithoutServicioInput, ClienteServicioUncheckedCreateWithoutServicioInput> | ClienteServicioCreateWithoutServicioInput[] | ClienteServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutServicioInput | ClienteServicioCreateOrConnectWithoutServicioInput[]
    createMany?: ClienteServicioCreateManyServicioInputEnvelope
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
  }

  export type FacturaServicioCreateNestedManyWithoutServicioInput = {
    create?: XOR<FacturaServicioCreateWithoutServicioInput, FacturaServicioUncheckedCreateWithoutServicioInput> | FacturaServicioCreateWithoutServicioInput[] | FacturaServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutServicioInput | FacturaServicioCreateOrConnectWithoutServicioInput[]
    createMany?: FacturaServicioCreateManyServicioInputEnvelope
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
  }

  export type ClienteServicioUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<ClienteServicioCreateWithoutServicioInput, ClienteServicioUncheckedCreateWithoutServicioInput> | ClienteServicioCreateWithoutServicioInput[] | ClienteServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutServicioInput | ClienteServicioCreateOrConnectWithoutServicioInput[]
    createMany?: ClienteServicioCreateManyServicioInputEnvelope
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
  }

  export type FacturaServicioUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<FacturaServicioCreateWithoutServicioInput, FacturaServicioUncheckedCreateWithoutServicioInput> | FacturaServicioCreateWithoutServicioInput[] | FacturaServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutServicioInput | FacturaServicioCreateOrConnectWithoutServicioInput[]
    createMany?: FacturaServicioCreateManyServicioInputEnvelope
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TipoServicioUpdateOneRequiredWithoutServiciosNestedInput = {
    create?: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: TipoServicioCreateOrConnectWithoutServiciosInput
    upsert?: TipoServicioUpsertWithoutServiciosInput
    connect?: TipoServicioWhereUniqueInput
    update?: XOR<XOR<TipoServicioUpdateToOneWithWhereWithoutServiciosInput, TipoServicioUpdateWithoutServiciosInput>, TipoServicioUncheckedUpdateWithoutServiciosInput>
  }

  export type EmpresaUpdateOneRequiredWithoutServicioNestedInput = {
    create?: XOR<EmpresaCreateWithoutServicioInput, EmpresaUncheckedCreateWithoutServicioInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutServicioInput
    upsert?: EmpresaUpsertWithoutServicioInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutServicioInput, EmpresaUpdateWithoutServicioInput>, EmpresaUncheckedUpdateWithoutServicioInput>
  }

  export type ClienteServicioUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ClienteServicioCreateWithoutServicioInput, ClienteServicioUncheckedCreateWithoutServicioInput> | ClienteServicioCreateWithoutServicioInput[] | ClienteServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutServicioInput | ClienteServicioCreateOrConnectWithoutServicioInput[]
    upsert?: ClienteServicioUpsertWithWhereUniqueWithoutServicioInput | ClienteServicioUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ClienteServicioCreateManyServicioInputEnvelope
    set?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    disconnect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    delete?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    update?: ClienteServicioUpdateWithWhereUniqueWithoutServicioInput | ClienteServicioUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ClienteServicioUpdateManyWithWhereWithoutServicioInput | ClienteServicioUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ClienteServicioScalarWhereInput | ClienteServicioScalarWhereInput[]
  }

  export type FacturaServicioUpdateManyWithoutServicioNestedInput = {
    create?: XOR<FacturaServicioCreateWithoutServicioInput, FacturaServicioUncheckedCreateWithoutServicioInput> | FacturaServicioCreateWithoutServicioInput[] | FacturaServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutServicioInput | FacturaServicioCreateOrConnectWithoutServicioInput[]
    upsert?: FacturaServicioUpsertWithWhereUniqueWithoutServicioInput | FacturaServicioUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: FacturaServicioCreateManyServicioInputEnvelope
    set?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    disconnect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    delete?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    update?: FacturaServicioUpdateWithWhereUniqueWithoutServicioInput | FacturaServicioUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: FacturaServicioUpdateManyWithWhereWithoutServicioInput | FacturaServicioUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: FacturaServicioScalarWhereInput | FacturaServicioScalarWhereInput[]
  }

  export type ClienteServicioUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ClienteServicioCreateWithoutServicioInput, ClienteServicioUncheckedCreateWithoutServicioInput> | ClienteServicioCreateWithoutServicioInput[] | ClienteServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutServicioInput | ClienteServicioCreateOrConnectWithoutServicioInput[]
    upsert?: ClienteServicioUpsertWithWhereUniqueWithoutServicioInput | ClienteServicioUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ClienteServicioCreateManyServicioInputEnvelope
    set?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    disconnect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    delete?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    update?: ClienteServicioUpdateWithWhereUniqueWithoutServicioInput | ClienteServicioUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ClienteServicioUpdateManyWithWhereWithoutServicioInput | ClienteServicioUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ClienteServicioScalarWhereInput | ClienteServicioScalarWhereInput[]
  }

  export type FacturaServicioUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<FacturaServicioCreateWithoutServicioInput, FacturaServicioUncheckedCreateWithoutServicioInput> | FacturaServicioCreateWithoutServicioInput[] | FacturaServicioUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutServicioInput | FacturaServicioCreateOrConnectWithoutServicioInput[]
    upsert?: FacturaServicioUpsertWithWhereUniqueWithoutServicioInput | FacturaServicioUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: FacturaServicioCreateManyServicioInputEnvelope
    set?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    disconnect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    delete?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    update?: FacturaServicioUpdateWithWhereUniqueWithoutServicioInput | FacturaServicioUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: FacturaServicioUpdateManyWithWhereWithoutServicioInput | FacturaServicioUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: FacturaServicioScalarWhereInput | FacturaServicioScalarWhereInput[]
  }

  export type EmpresaCreateNestedOneWithoutProveedorInput = {
    create?: XOR<EmpresaCreateWithoutProveedorInput, EmpresaUncheckedCreateWithoutProveedorInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutProveedorInput
    connect?: EmpresaWhereUniqueInput
  }

  export type EmpresaUpdateOneRequiredWithoutProveedorNestedInput = {
    create?: XOR<EmpresaCreateWithoutProveedorInput, EmpresaUncheckedCreateWithoutProveedorInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutProveedorInput
    upsert?: EmpresaUpsertWithoutProveedorInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutProveedorInput, EmpresaUpdateWithoutProveedorInput>, EmpresaUncheckedUpdateWithoutProveedorInput>
  }

  export type ClienteInternetCreateNestedManyWithoutServicioInput = {
    create?: XOR<ClienteInternetCreateWithoutServicioInput, ClienteInternetUncheckedCreateWithoutServicioInput> | ClienteInternetCreateWithoutServicioInput[] | ClienteInternetUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutServicioInput | ClienteInternetCreateOrConnectWithoutServicioInput[]
    createMany?: ClienteInternetCreateManyServicioInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type EmpresaCreateNestedOneWithoutServicioInternetInput = {
    create?: XOR<EmpresaCreateWithoutServicioInternetInput, EmpresaUncheckedCreateWithoutServicioInternetInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutServicioInternetInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ClienteInternetUncheckedCreateNestedManyWithoutServicioInput = {
    create?: XOR<ClienteInternetCreateWithoutServicioInput, ClienteInternetUncheckedCreateWithoutServicioInput> | ClienteInternetCreateWithoutServicioInput[] | ClienteInternetUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutServicioInput | ClienteInternetCreateOrConnectWithoutServicioInput[]
    createMany?: ClienteInternetCreateManyServicioInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type ClienteInternetUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutServicioInput, ClienteInternetUncheckedCreateWithoutServicioInput> | ClienteInternetCreateWithoutServicioInput[] | ClienteInternetUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutServicioInput | ClienteInternetCreateOrConnectWithoutServicioInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutServicioInput | ClienteInternetUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ClienteInternetCreateManyServicioInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutServicioInput | ClienteInternetUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutServicioInput | ClienteInternetUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type EmpresaUpdateOneRequiredWithoutServicioInternetNestedInput = {
    create?: XOR<EmpresaCreateWithoutServicioInternetInput, EmpresaUncheckedCreateWithoutServicioInternetInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutServicioInternetInput
    upsert?: EmpresaUpsertWithoutServicioInternetInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutServicioInternetInput, EmpresaUpdateWithoutServicioInternetInput>, EmpresaUncheckedUpdateWithoutServicioInternetInput>
  }

  export type ClienteInternetUncheckedUpdateManyWithoutServicioNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutServicioInput, ClienteInternetUncheckedCreateWithoutServicioInput> | ClienteInternetCreateWithoutServicioInput[] | ClienteInternetUncheckedCreateWithoutServicioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutServicioInput | ClienteInternetCreateOrConnectWithoutServicioInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutServicioInput | ClienteInternetUpsertWithWhereUniqueWithoutServicioInput[]
    createMany?: ClienteInternetCreateManyServicioInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutServicioInput | ClienteInternetUpdateWithWhereUniqueWithoutServicioInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutServicioInput | ClienteInternetUpdateManyWithWhereWithoutServicioInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type EmpresaCreateNestedOneWithoutSaldoEmpresaInput = {
    create?: XOR<EmpresaCreateWithoutSaldoEmpresaInput, EmpresaUncheckedCreateWithoutSaldoEmpresaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutSaldoEmpresaInput
    connect?: EmpresaWhereUniqueInput
  }

  export type EmpresaUpdateOneRequiredWithoutSaldoEmpresaNestedInput = {
    create?: XOR<EmpresaCreateWithoutSaldoEmpresaInput, EmpresaUncheckedCreateWithoutSaldoEmpresaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutSaldoEmpresaInput
    upsert?: EmpresaUpsertWithoutSaldoEmpresaInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutSaldoEmpresaInput, EmpresaUpdateWithoutSaldoEmpresaInput>, EmpresaUncheckedUpdateWithoutSaldoEmpresaInput>
  }

  export type EmpresaCreateNestedOneWithoutSaldoCajaInput = {
    create?: XOR<EmpresaCreateWithoutSaldoCajaInput, EmpresaUncheckedCreateWithoutSaldoCajaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutSaldoCajaInput
    connect?: EmpresaWhereUniqueInput
  }

  export type RegistroCajaCreateNestedManyWithoutCajaInput = {
    create?: XOR<RegistroCajaCreateWithoutCajaInput, RegistroCajaUncheckedCreateWithoutCajaInput> | RegistroCajaCreateWithoutCajaInput[] | RegistroCajaUncheckedCreateWithoutCajaInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutCajaInput | RegistroCajaCreateOrConnectWithoutCajaInput[]
    createMany?: RegistroCajaCreateManyCajaInputEnvelope
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
  }

  export type RegistroCajaUncheckedCreateNestedManyWithoutCajaInput = {
    create?: XOR<RegistroCajaCreateWithoutCajaInput, RegistroCajaUncheckedCreateWithoutCajaInput> | RegistroCajaCreateWithoutCajaInput[] | RegistroCajaUncheckedCreateWithoutCajaInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutCajaInput | RegistroCajaCreateOrConnectWithoutCajaInput[]
    createMany?: RegistroCajaCreateManyCajaInputEnvelope
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
  }

  export type EmpresaUpdateOneRequiredWithoutSaldoCajaNestedInput = {
    create?: XOR<EmpresaCreateWithoutSaldoCajaInput, EmpresaUncheckedCreateWithoutSaldoCajaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutSaldoCajaInput
    upsert?: EmpresaUpsertWithoutSaldoCajaInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutSaldoCajaInput, EmpresaUpdateWithoutSaldoCajaInput>, EmpresaUncheckedUpdateWithoutSaldoCajaInput>
  }

  export type RegistroCajaUpdateManyWithoutCajaNestedInput = {
    create?: XOR<RegistroCajaCreateWithoutCajaInput, RegistroCajaUncheckedCreateWithoutCajaInput> | RegistroCajaCreateWithoutCajaInput[] | RegistroCajaUncheckedCreateWithoutCajaInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutCajaInput | RegistroCajaCreateOrConnectWithoutCajaInput[]
    upsert?: RegistroCajaUpsertWithWhereUniqueWithoutCajaInput | RegistroCajaUpsertWithWhereUniqueWithoutCajaInput[]
    createMany?: RegistroCajaCreateManyCajaInputEnvelope
    set?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    disconnect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    delete?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    update?: RegistroCajaUpdateWithWhereUniqueWithoutCajaInput | RegistroCajaUpdateWithWhereUniqueWithoutCajaInput[]
    updateMany?: RegistroCajaUpdateManyWithWhereWithoutCajaInput | RegistroCajaUpdateManyWithWhereWithoutCajaInput[]
    deleteMany?: RegistroCajaScalarWhereInput | RegistroCajaScalarWhereInput[]
  }

  export type RegistroCajaUncheckedUpdateManyWithoutCajaNestedInput = {
    create?: XOR<RegistroCajaCreateWithoutCajaInput, RegistroCajaUncheckedCreateWithoutCajaInput> | RegistroCajaCreateWithoutCajaInput[] | RegistroCajaUncheckedCreateWithoutCajaInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutCajaInput | RegistroCajaCreateOrConnectWithoutCajaInput[]
    upsert?: RegistroCajaUpsertWithWhereUniqueWithoutCajaInput | RegistroCajaUpsertWithWhereUniqueWithoutCajaInput[]
    createMany?: RegistroCajaCreateManyCajaInputEnvelope
    set?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    disconnect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    delete?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    update?: RegistroCajaUpdateWithWhereUniqueWithoutCajaInput | RegistroCajaUpdateWithWhereUniqueWithoutCajaInput[]
    updateMany?: RegistroCajaUpdateManyWithWhereWithoutCajaInput | RegistroCajaUpdateManyWithWhereWithoutCajaInput[]
    deleteMany?: RegistroCajaScalarWhereInput | RegistroCajaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutRegistroCajaInput = {
    create?: XOR<UsuarioCreateWithoutRegistroCajaInput, UsuarioUncheckedCreateWithoutRegistroCajaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRegistroCajaInput
    connect?: UsuarioWhereUniqueInput
  }

  export type SaldoCajaCreateNestedOneWithoutRegistrosCajaInput = {
    create?: XOR<SaldoCajaCreateWithoutRegistrosCajaInput, SaldoCajaUncheckedCreateWithoutRegistrosCajaInput>
    connectOrCreate?: SaldoCajaCreateOrConnectWithoutRegistrosCajaInput
    connect?: SaldoCajaWhereUniqueInput
  }

  export type UsuarioUpdateOneWithoutRegistroCajaNestedInput = {
    create?: XOR<UsuarioCreateWithoutRegistroCajaInput, UsuarioUncheckedCreateWithoutRegistroCajaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRegistroCajaInput
    upsert?: UsuarioUpsertWithoutRegistroCajaInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRegistroCajaInput, UsuarioUpdateWithoutRegistroCajaInput>, UsuarioUncheckedUpdateWithoutRegistroCajaInput>
  }

  export type SaldoCajaUpdateOneWithoutRegistrosCajaNestedInput = {
    create?: XOR<SaldoCajaCreateWithoutRegistrosCajaInput, SaldoCajaUncheckedCreateWithoutRegistrosCajaInput>
    connectOrCreate?: SaldoCajaCreateOrConnectWithoutRegistrosCajaInput
    upsert?: SaldoCajaUpsertWithoutRegistrosCajaInput
    disconnect?: SaldoCajaWhereInput | boolean
    delete?: SaldoCajaWhereInput | boolean
    connect?: SaldoCajaWhereUniqueInput
    update?: XOR<XOR<SaldoCajaUpdateToOneWithWhereWithoutRegistrosCajaInput, SaldoCajaUpdateWithoutRegistrosCajaInput>, SaldoCajaUncheckedUpdateWithoutRegistrosCajaInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteInternetCreateNestedOneWithoutClienteServicioInput = {
    create?: XOR<ClienteInternetCreateWithoutClienteServicioInput, ClienteInternetUncheckedCreateWithoutClienteServicioInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutClienteServicioInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type ServicioCreateNestedOneWithoutClientesInput = {
    create?: XOR<ServicioCreateWithoutClientesInput, ServicioUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutClientesInput
    connect?: ServicioWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumEstadoClienteServicioFieldUpdateOperationsInput = {
    set?: $Enums.EstadoClienteServicio
  }

  export type ClienteInternetUpdateOneRequiredWithoutClienteServicioNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutClienteServicioInput, ClienteInternetUncheckedCreateWithoutClienteServicioInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutClienteServicioInput
    upsert?: ClienteInternetUpsertWithoutClienteServicioInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutClienteServicioInput, ClienteInternetUpdateWithoutClienteServicioInput>, ClienteInternetUncheckedUpdateWithoutClienteServicioInput>
  }

  export type ServicioUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<ServicioCreateWithoutClientesInput, ServicioUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutClientesInput
    upsert?: ServicioUpsertWithoutClientesInput
    connect?: ServicioWhereUniqueInput
    update?: XOR<XOR<ServicioUpdateToOneWithWhereWithoutClientesInput, ServicioUpdateWithoutClientesInput>, ServicioUncheckedUpdateWithoutClientesInput>
  }

  export type EmpresaCreateNestedOneWithoutFacturaInput = {
    create?: XOR<EmpresaCreateWithoutFacturaInput, EmpresaUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutFacturaInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ClienteInternetCreateNestedOneWithoutFacturaInput = {
    create?: XOR<ClienteInternetCreateWithoutFacturaInput, ClienteInternetUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutFacturaInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type FacturaServicioCreateNestedManyWithoutFacturaInput = {
    create?: XOR<FacturaServicioCreateWithoutFacturaInput, FacturaServicioUncheckedCreateWithoutFacturaInput> | FacturaServicioCreateWithoutFacturaInput[] | FacturaServicioUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutFacturaInput | FacturaServicioCreateOrConnectWithoutFacturaInput[]
    createMany?: FacturaServicioCreateManyFacturaInputEnvelope
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
  }

  export type PagoFacturaCreateNestedManyWithoutFacturaInput = {
    create?: XOR<PagoFacturaCreateWithoutFacturaInput, PagoFacturaUncheckedCreateWithoutFacturaInput> | PagoFacturaCreateWithoutFacturaInput[] | PagoFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutFacturaInput | PagoFacturaCreateOrConnectWithoutFacturaInput[]
    createMany?: PagoFacturaCreateManyFacturaInputEnvelope
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
  }

  export type FacturaServicioUncheckedCreateNestedManyWithoutFacturaInput = {
    create?: XOR<FacturaServicioCreateWithoutFacturaInput, FacturaServicioUncheckedCreateWithoutFacturaInput> | FacturaServicioCreateWithoutFacturaInput[] | FacturaServicioUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutFacturaInput | FacturaServicioCreateOrConnectWithoutFacturaInput[]
    createMany?: FacturaServicioCreateManyFacturaInputEnvelope
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
  }

  export type PagoFacturaUncheckedCreateNestedManyWithoutFacturaInput = {
    create?: XOR<PagoFacturaCreateWithoutFacturaInput, PagoFacturaUncheckedCreateWithoutFacturaInput> | PagoFacturaCreateWithoutFacturaInput[] | PagoFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutFacturaInput | PagoFacturaCreateOrConnectWithoutFacturaInput[]
    createMany?: PagoFacturaCreateManyFacturaInputEnvelope
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
  }

  export type EnumTipoFacturaFieldUpdateOperationsInput = {
    set?: $Enums.TipoFactura
  }

  export type EnumEstadoFacturaFieldUpdateOperationsInput = {
    set?: $Enums.EstadoFactura
  }

  export type EmpresaUpdateOneRequiredWithoutFacturaNestedInput = {
    create?: XOR<EmpresaCreateWithoutFacturaInput, EmpresaUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutFacturaInput
    upsert?: EmpresaUpsertWithoutFacturaInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutFacturaInput, EmpresaUpdateWithoutFacturaInput>, EmpresaUncheckedUpdateWithoutFacturaInput>
  }

  export type ClienteInternetUpdateOneRequiredWithoutFacturaNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutFacturaInput, ClienteInternetUncheckedCreateWithoutFacturaInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutFacturaInput
    upsert?: ClienteInternetUpsertWithoutFacturaInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutFacturaInput, ClienteInternetUpdateWithoutFacturaInput>, ClienteInternetUncheckedUpdateWithoutFacturaInput>
  }

  export type FacturaServicioUpdateManyWithoutFacturaNestedInput = {
    create?: XOR<FacturaServicioCreateWithoutFacturaInput, FacturaServicioUncheckedCreateWithoutFacturaInput> | FacturaServicioCreateWithoutFacturaInput[] | FacturaServicioUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutFacturaInput | FacturaServicioCreateOrConnectWithoutFacturaInput[]
    upsert?: FacturaServicioUpsertWithWhereUniqueWithoutFacturaInput | FacturaServicioUpsertWithWhereUniqueWithoutFacturaInput[]
    createMany?: FacturaServicioCreateManyFacturaInputEnvelope
    set?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    disconnect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    delete?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    update?: FacturaServicioUpdateWithWhereUniqueWithoutFacturaInput | FacturaServicioUpdateWithWhereUniqueWithoutFacturaInput[]
    updateMany?: FacturaServicioUpdateManyWithWhereWithoutFacturaInput | FacturaServicioUpdateManyWithWhereWithoutFacturaInput[]
    deleteMany?: FacturaServicioScalarWhereInput | FacturaServicioScalarWhereInput[]
  }

  export type PagoFacturaUpdateManyWithoutFacturaNestedInput = {
    create?: XOR<PagoFacturaCreateWithoutFacturaInput, PagoFacturaUncheckedCreateWithoutFacturaInput> | PagoFacturaCreateWithoutFacturaInput[] | PagoFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutFacturaInput | PagoFacturaCreateOrConnectWithoutFacturaInput[]
    upsert?: PagoFacturaUpsertWithWhereUniqueWithoutFacturaInput | PagoFacturaUpsertWithWhereUniqueWithoutFacturaInput[]
    createMany?: PagoFacturaCreateManyFacturaInputEnvelope
    set?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    disconnect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    delete?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    update?: PagoFacturaUpdateWithWhereUniqueWithoutFacturaInput | PagoFacturaUpdateWithWhereUniqueWithoutFacturaInput[]
    updateMany?: PagoFacturaUpdateManyWithWhereWithoutFacturaInput | PagoFacturaUpdateManyWithWhereWithoutFacturaInput[]
    deleteMany?: PagoFacturaScalarWhereInput | PagoFacturaScalarWhereInput[]
  }

  export type FacturaServicioUncheckedUpdateManyWithoutFacturaNestedInput = {
    create?: XOR<FacturaServicioCreateWithoutFacturaInput, FacturaServicioUncheckedCreateWithoutFacturaInput> | FacturaServicioCreateWithoutFacturaInput[] | FacturaServicioUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: FacturaServicioCreateOrConnectWithoutFacturaInput | FacturaServicioCreateOrConnectWithoutFacturaInput[]
    upsert?: FacturaServicioUpsertWithWhereUniqueWithoutFacturaInput | FacturaServicioUpsertWithWhereUniqueWithoutFacturaInput[]
    createMany?: FacturaServicioCreateManyFacturaInputEnvelope
    set?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    disconnect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    delete?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    connect?: FacturaServicioWhereUniqueInput | FacturaServicioWhereUniqueInput[]
    update?: FacturaServicioUpdateWithWhereUniqueWithoutFacturaInput | FacturaServicioUpdateWithWhereUniqueWithoutFacturaInput[]
    updateMany?: FacturaServicioUpdateManyWithWhereWithoutFacturaInput | FacturaServicioUpdateManyWithWhereWithoutFacturaInput[]
    deleteMany?: FacturaServicioScalarWhereInput | FacturaServicioScalarWhereInput[]
  }

  export type PagoFacturaUncheckedUpdateManyWithoutFacturaNestedInput = {
    create?: XOR<PagoFacturaCreateWithoutFacturaInput, PagoFacturaUncheckedCreateWithoutFacturaInput> | PagoFacturaCreateWithoutFacturaInput[] | PagoFacturaUncheckedCreateWithoutFacturaInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutFacturaInput | PagoFacturaCreateOrConnectWithoutFacturaInput[]
    upsert?: PagoFacturaUpsertWithWhereUniqueWithoutFacturaInput | PagoFacturaUpsertWithWhereUniqueWithoutFacturaInput[]
    createMany?: PagoFacturaCreateManyFacturaInputEnvelope
    set?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    disconnect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    delete?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    update?: PagoFacturaUpdateWithWhereUniqueWithoutFacturaInput | PagoFacturaUpdateWithWhereUniqueWithoutFacturaInput[]
    updateMany?: PagoFacturaUpdateManyWithWhereWithoutFacturaInput | PagoFacturaUpdateManyWithWhereWithoutFacturaInput[]
    deleteMany?: PagoFacturaScalarWhereInput | PagoFacturaScalarWhereInput[]
  }

  export type FacturaCreateNestedOneWithoutPagosInput = {
    create?: XOR<FacturaCreateWithoutPagosInput, FacturaUncheckedCreateWithoutPagosInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutPagosInput
    connect?: FacturaWhereUniqueInput
  }

  export type ClienteInternetCreateNestedOneWithoutPagoFacturaInput = {
    create?: XOR<ClienteInternetCreateWithoutPagoFacturaInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutPagoFacturaInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type EnumMetodoPagoFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPago
  }

  export type FacturaUpdateOneRequiredWithoutPagosNestedInput = {
    create?: XOR<FacturaCreateWithoutPagosInput, FacturaUncheckedCreateWithoutPagosInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutPagosInput
    upsert?: FacturaUpsertWithoutPagosInput
    connect?: FacturaWhereUniqueInput
    update?: XOR<XOR<FacturaUpdateToOneWithWhereWithoutPagosInput, FacturaUpdateWithoutPagosInput>, FacturaUncheckedUpdateWithoutPagosInput>
  }

  export type ClienteInternetUpdateOneRequiredWithoutPagoFacturaNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutPagoFacturaInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutPagoFacturaInput
    upsert?: ClienteInternetUpsertWithoutPagoFacturaInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutPagoFacturaInput, ClienteInternetUpdateWithoutPagoFacturaInput>, ClienteInternetUncheckedUpdateWithoutPagoFacturaInput>
  }

  export type EmpresaCreateNestedOneWithoutFacturasInput = {
    create?: XOR<EmpresaCreateWithoutFacturasInput, EmpresaUncheckedCreateWithoutFacturasInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutFacturasInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ClienteInternetCreateNestedOneWithoutFacturaInternetInput = {
    create?: XOR<ClienteInternetCreateWithoutFacturaInternetInput, ClienteInternetUncheckedCreateWithoutFacturaInternetInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutFacturaInternetInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type PagoFacturaInternetCreateNestedManyWithoutFacturaInternetInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput> | PagoFacturaInternetCreateWithoutFacturaInternetInput[] | PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput | PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput[]
    createMany?: PagoFacturaInternetCreateManyFacturaInternetInputEnvelope
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
  }

  export type PagoFacturaInternetUncheckedCreateNestedManyWithoutFacturaInternetInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput> | PagoFacturaInternetCreateWithoutFacturaInternetInput[] | PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput | PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput[]
    createMany?: PagoFacturaInternetCreateManyFacturaInternetInputEnvelope
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPagoFacturaInternet
  }

  export type EnumEstadoFacturaInternetFieldUpdateOperationsInput = {
    set?: $Enums.EstadoFacturaInternet
  }

  export type EmpresaUpdateOneRequiredWithoutFacturasNestedInput = {
    create?: XOR<EmpresaCreateWithoutFacturasInput, EmpresaUncheckedCreateWithoutFacturasInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutFacturasInput
    upsert?: EmpresaUpsertWithoutFacturasInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutFacturasInput, EmpresaUpdateWithoutFacturasInput>, EmpresaUncheckedUpdateWithoutFacturasInput>
  }

  export type ClienteInternetUpdateOneRequiredWithoutFacturaInternetNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutFacturaInternetInput, ClienteInternetUncheckedCreateWithoutFacturaInternetInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutFacturaInternetInput
    upsert?: ClienteInternetUpsertWithoutFacturaInternetInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutFacturaInternetInput, ClienteInternetUpdateWithoutFacturaInternetInput>, ClienteInternetUncheckedUpdateWithoutFacturaInternetInput>
  }

  export type PagoFacturaInternetUpdateManyWithoutFacturaInternetNestedInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput> | PagoFacturaInternetCreateWithoutFacturaInternetInput[] | PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput | PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput[]
    upsert?: PagoFacturaInternetUpsertWithWhereUniqueWithoutFacturaInternetInput | PagoFacturaInternetUpsertWithWhereUniqueWithoutFacturaInternetInput[]
    createMany?: PagoFacturaInternetCreateManyFacturaInternetInputEnvelope
    set?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    disconnect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    delete?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    update?: PagoFacturaInternetUpdateWithWhereUniqueWithoutFacturaInternetInput | PagoFacturaInternetUpdateWithWhereUniqueWithoutFacturaInternetInput[]
    updateMany?: PagoFacturaInternetUpdateManyWithWhereWithoutFacturaInternetInput | PagoFacturaInternetUpdateManyWithWhereWithoutFacturaInternetInput[]
    deleteMany?: PagoFacturaInternetScalarWhereInput | PagoFacturaInternetScalarWhereInput[]
  }

  export type PagoFacturaInternetUncheckedUpdateManyWithoutFacturaInternetNestedInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput> | PagoFacturaInternetCreateWithoutFacturaInternetInput[] | PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput | PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput[]
    upsert?: PagoFacturaInternetUpsertWithWhereUniqueWithoutFacturaInternetInput | PagoFacturaInternetUpsertWithWhereUniqueWithoutFacturaInternetInput[]
    createMany?: PagoFacturaInternetCreateManyFacturaInternetInputEnvelope
    set?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    disconnect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    delete?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    update?: PagoFacturaInternetUpdateWithWhereUniqueWithoutFacturaInternetInput | PagoFacturaInternetUpdateWithWhereUniqueWithoutFacturaInternetInput[]
    updateMany?: PagoFacturaInternetUpdateManyWithWhereWithoutFacturaInternetInput | PagoFacturaInternetUpdateManyWithWhereWithoutFacturaInternetInput[]
    deleteMany?: PagoFacturaInternetScalarWhereInput | PagoFacturaInternetScalarWhereInput[]
  }

  export type FacturaInternetCreateNestedOneWithoutPagosInput = {
    create?: XOR<FacturaInternetCreateWithoutPagosInput, FacturaInternetUncheckedCreateWithoutPagosInput>
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutPagosInput
    connect?: FacturaInternetWhereUniqueInput
  }

  export type ClienteInternetCreateNestedOneWithoutPagoFacturaInternetInput = {
    create?: XOR<ClienteInternetCreateWithoutPagoFacturaInternetInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInternetInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutPagoFacturaInternetInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type FacturaInternetUpdateOneRequiredWithoutPagosNestedInput = {
    create?: XOR<FacturaInternetCreateWithoutPagosInput, FacturaInternetUncheckedCreateWithoutPagosInput>
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutPagosInput
    upsert?: FacturaInternetUpsertWithoutPagosInput
    connect?: FacturaInternetWhereUniqueInput
    update?: XOR<XOR<FacturaInternetUpdateToOneWithWhereWithoutPagosInput, FacturaInternetUpdateWithoutPagosInput>, FacturaInternetUncheckedUpdateWithoutPagosInput>
  }

  export type ClienteInternetUpdateOneRequiredWithoutPagoFacturaInternetNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutPagoFacturaInternetInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInternetInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutPagoFacturaInternetInput
    upsert?: ClienteInternetUpsertWithoutPagoFacturaInternetInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutPagoFacturaInternetInput, ClienteInternetUpdateWithoutPagoFacturaInternetInput>, ClienteInternetUncheckedUpdateWithoutPagoFacturaInternetInput>
  }

  export type FacturaCreateNestedOneWithoutServiciosInput = {
    create?: XOR<FacturaCreateWithoutServiciosInput, FacturaUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutServiciosInput
    connect?: FacturaWhereUniqueInput
  }

  export type ServicioCreateNestedOneWithoutFacturaServicioInput = {
    create?: XOR<ServicioCreateWithoutFacturaServicioInput, ServicioUncheckedCreateWithoutFacturaServicioInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutFacturaServicioInput
    connect?: ServicioWhereUniqueInput
  }

  export type FacturaUpdateOneRequiredWithoutServiciosNestedInput = {
    create?: XOR<FacturaCreateWithoutServiciosInput, FacturaUncheckedCreateWithoutServiciosInput>
    connectOrCreate?: FacturaCreateOrConnectWithoutServiciosInput
    upsert?: FacturaUpsertWithoutServiciosInput
    connect?: FacturaWhereUniqueInput
    update?: XOR<XOR<FacturaUpdateToOneWithWhereWithoutServiciosInput, FacturaUpdateWithoutServiciosInput>, FacturaUncheckedUpdateWithoutServiciosInput>
  }

  export type ServicioUpdateOneRequiredWithoutFacturaServicioNestedInput = {
    create?: XOR<ServicioCreateWithoutFacturaServicioInput, ServicioUncheckedCreateWithoutFacturaServicioInput>
    connectOrCreate?: ServicioCreateOrConnectWithoutFacturaServicioInput
    upsert?: ServicioUpsertWithoutFacturaServicioInput
    connect?: ServicioWhereUniqueInput
    update?: XOR<XOR<ServicioUpdateToOneWithWhereWithoutFacturaServicioInput, ServicioUpdateWithoutFacturaServicioInput>, ServicioUncheckedUpdateWithoutFacturaServicioInput>
  }

  export type ClienteInternetCreateNestedOneWithoutIPInput = {
    create?: XOR<ClienteInternetCreateWithoutIPInput, ClienteInternetUncheckedCreateWithoutIPInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutIPInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type ClienteInternetUpdateOneWithoutIPNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutIPInput, ClienteInternetUncheckedCreateWithoutIPInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutIPInput
    upsert?: ClienteInternetUpsertWithoutIPInput
    disconnect?: ClienteInternetWhereInput | boolean
    delete?: ClienteInternetWhereInput | boolean
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutIPInput, ClienteInternetUpdateWithoutIPInput>, ClienteInternetUncheckedUpdateWithoutIPInput>
  }

  export type ClienteInternetCreateNestedOneWithoutFotosInput = {
    create?: XOR<ClienteInternetCreateWithoutFotosInput, ClienteInternetUncheckedCreateWithoutFotosInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutFotosInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type ClienteInternetUpdateOneRequiredWithoutFotosNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutFotosInput, ClienteInternetUncheckedCreateWithoutFotosInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutFotosInput
    upsert?: ClienteInternetUpsertWithoutFotosInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutFotosInput, ClienteInternetUpdateWithoutFotosInput>, ClienteInternetUncheckedUpdateWithoutFotosInput>
  }

  export type UsuarioCreateNestedOneWithoutClientesAsesoradosInput = {
    create?: XOR<UsuarioCreateWithoutClientesAsesoradosInput, UsuarioUncheckedCreateWithoutClientesAsesoradosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutClientesAsesoradosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ServicioInternetCreateNestedOneWithoutClientesInput = {
    create?: XOR<ServicioInternetCreateWithoutClientesInput, ServicioInternetUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ServicioInternetCreateOrConnectWithoutClientesInput
    connect?: ServicioInternetWhereUniqueInput
  }

  export type MunicipioCreateNestedOneWithoutClientesInput = {
    create?: XOR<MunicipioCreateWithoutClientesInput, MunicipioUncheckedCreateWithoutClientesInput>
    connectOrCreate?: MunicipioCreateOrConnectWithoutClientesInput
    connect?: MunicipioWhereUniqueInput
  }

  export type DepartamentoCreateNestedOneWithoutClientesInput = {
    create?: XOR<DepartamentoCreateWithoutClientesInput, DepartamentoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutClientesInput
    connect?: DepartamentoWhereUniqueInput
  }

  export type EmpresaCreateNestedOneWithoutClientesInternetInput = {
    create?: XOR<EmpresaCreateWithoutClientesInternetInput, EmpresaUncheckedCreateWithoutClientesInternetInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutClientesInternetInput
    connect?: EmpresaWhereUniqueInput
  }

  export type RutaCreateNestedManyWithoutClientesInput = {
    create?: XOR<RutaCreateWithoutClientesInput, RutaUncheckedCreateWithoutClientesInput> | RutaCreateWithoutClientesInput[] | RutaUncheckedCreateWithoutClientesInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutClientesInput | RutaCreateOrConnectWithoutClientesInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
  }

  export type IPCreateNestedOneWithoutClienteInput = {
    create?: XOR<IPCreateWithoutClienteInput, IPUncheckedCreateWithoutClienteInput>
    connectOrCreate?: IPCreateOrConnectWithoutClienteInput
    connect?: IPWhereUniqueInput
  }

  export type UbicacionCreateNestedOneWithoutClienteInput = {
    create?: XOR<UbicacionCreateWithoutClienteInput, UbicacionUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UbicacionCreateOrConnectWithoutClienteInput
    connect?: UbicacionWhereUniqueInput
  }

  export type TicketSoporteCreateNestedManyWithoutClienteInput = {
    create?: XOR<TicketSoporteCreateWithoutClienteInput, TicketSoporteUncheckedCreateWithoutClienteInput> | TicketSoporteCreateWithoutClienteInput[] | TicketSoporteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutClienteInput | TicketSoporteCreateOrConnectWithoutClienteInput[]
    createMany?: TicketSoporteCreateManyClienteInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type saldoClienteCreateNestedOneWithoutClienteInput = {
    create?: XOR<saldoClienteCreateWithoutClienteInput, saldoClienteUncheckedCreateWithoutClienteInput>
    connectOrCreate?: saldoClienteCreateOrConnectWithoutClienteInput
    connect?: saldoClienteWhereUniqueInput
  }

  export type FotosCreateNestedManyWithoutClienteInput = {
    create?: XOR<FotosCreateWithoutClienteInput, FotosUncheckedCreateWithoutClienteInput> | FotosCreateWithoutClienteInput[] | FotosUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FotosCreateOrConnectWithoutClienteInput | FotosCreateOrConnectWithoutClienteInput[]
    createMany?: FotosCreateManyClienteInputEnvelope
    connect?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
  }

  export type ClienteServicioCreateNestedManyWithoutClienteInput = {
    create?: XOR<ClienteServicioCreateWithoutClienteInput, ClienteServicioUncheckedCreateWithoutClienteInput> | ClienteServicioCreateWithoutClienteInput[] | ClienteServicioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutClienteInput | ClienteServicioCreateOrConnectWithoutClienteInput[]
    createMany?: ClienteServicioCreateManyClienteInputEnvelope
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
  }

  export type FacturaInternetCreateNestedManyWithoutClienteInput = {
    create?: XOR<FacturaInternetCreateWithoutClienteInput, FacturaInternetUncheckedCreateWithoutClienteInput> | FacturaInternetCreateWithoutClienteInput[] | FacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutClienteInput | FacturaInternetCreateOrConnectWithoutClienteInput[]
    createMany?: FacturaInternetCreateManyClienteInputEnvelope
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
  }

  export type PagoFacturaInternetCreateNestedManyWithoutClienteInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutClienteInput, PagoFacturaInternetUncheckedCreateWithoutClienteInput> | PagoFacturaInternetCreateWithoutClienteInput[] | PagoFacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutClienteInput | PagoFacturaInternetCreateOrConnectWithoutClienteInput[]
    createMany?: PagoFacturaInternetCreateManyClienteInputEnvelope
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
  }

  export type FacturaCreateNestedManyWithoutClienteInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type PagoFacturaCreateNestedManyWithoutClienteInput = {
    create?: XOR<PagoFacturaCreateWithoutClienteInput, PagoFacturaUncheckedCreateWithoutClienteInput> | PagoFacturaCreateWithoutClienteInput[] | PagoFacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutClienteInput | PagoFacturaCreateOrConnectWithoutClienteInput[]
    createMany?: PagoFacturaCreateManyClienteInputEnvelope
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
  }

  export type RutaUncheckedCreateNestedManyWithoutClientesInput = {
    create?: XOR<RutaCreateWithoutClientesInput, RutaUncheckedCreateWithoutClientesInput> | RutaCreateWithoutClientesInput[] | RutaUncheckedCreateWithoutClientesInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutClientesInput | RutaCreateOrConnectWithoutClientesInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
  }

  export type IPUncheckedCreateNestedOneWithoutClienteInput = {
    create?: XOR<IPCreateWithoutClienteInput, IPUncheckedCreateWithoutClienteInput>
    connectOrCreate?: IPCreateOrConnectWithoutClienteInput
    connect?: IPWhereUniqueInput
  }

  export type UbicacionUncheckedCreateNestedOneWithoutClienteInput = {
    create?: XOR<UbicacionCreateWithoutClienteInput, UbicacionUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UbicacionCreateOrConnectWithoutClienteInput
    connect?: UbicacionWhereUniqueInput
  }

  export type TicketSoporteUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<TicketSoporteCreateWithoutClienteInput, TicketSoporteUncheckedCreateWithoutClienteInput> | TicketSoporteCreateWithoutClienteInput[] | TicketSoporteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutClienteInput | TicketSoporteCreateOrConnectWithoutClienteInput[]
    createMany?: TicketSoporteCreateManyClienteInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type saldoClienteUncheckedCreateNestedOneWithoutClienteInput = {
    create?: XOR<saldoClienteCreateWithoutClienteInput, saldoClienteUncheckedCreateWithoutClienteInput>
    connectOrCreate?: saldoClienteCreateOrConnectWithoutClienteInput
    connect?: saldoClienteWhereUniqueInput
  }

  export type FotosUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<FotosCreateWithoutClienteInput, FotosUncheckedCreateWithoutClienteInput> | FotosCreateWithoutClienteInput[] | FotosUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FotosCreateOrConnectWithoutClienteInput | FotosCreateOrConnectWithoutClienteInput[]
    createMany?: FotosCreateManyClienteInputEnvelope
    connect?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
  }

  export type ClienteServicioUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<ClienteServicioCreateWithoutClienteInput, ClienteServicioUncheckedCreateWithoutClienteInput> | ClienteServicioCreateWithoutClienteInput[] | ClienteServicioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutClienteInput | ClienteServicioCreateOrConnectWithoutClienteInput[]
    createMany?: ClienteServicioCreateManyClienteInputEnvelope
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
  }

  export type FacturaInternetUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<FacturaInternetCreateWithoutClienteInput, FacturaInternetUncheckedCreateWithoutClienteInput> | FacturaInternetCreateWithoutClienteInput[] | FacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutClienteInput | FacturaInternetCreateOrConnectWithoutClienteInput[]
    createMany?: FacturaInternetCreateManyClienteInputEnvelope
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
  }

  export type PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutClienteInput, PagoFacturaInternetUncheckedCreateWithoutClienteInput> | PagoFacturaInternetCreateWithoutClienteInput[] | PagoFacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutClienteInput | PagoFacturaInternetCreateOrConnectWithoutClienteInput[]
    createMany?: PagoFacturaInternetCreateManyClienteInputEnvelope
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
  }

  export type FacturaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
  }

  export type PagoFacturaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<PagoFacturaCreateWithoutClienteInput, PagoFacturaUncheckedCreateWithoutClienteInput> | PagoFacturaCreateWithoutClienteInput[] | PagoFacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutClienteInput | PagoFacturaCreateOrConnectWithoutClienteInput[]
    createMany?: PagoFacturaCreateManyClienteInputEnvelope
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
  }

  export type EnumEstadoClienteFieldUpdateOperationsInput = {
    set?: $Enums.EstadoCliente
  }

  export type UsuarioUpdateOneWithoutClientesAsesoradosNestedInput = {
    create?: XOR<UsuarioCreateWithoutClientesAsesoradosInput, UsuarioUncheckedCreateWithoutClientesAsesoradosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutClientesAsesoradosInput
    upsert?: UsuarioUpsertWithoutClientesAsesoradosInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutClientesAsesoradosInput, UsuarioUpdateWithoutClientesAsesoradosInput>, UsuarioUncheckedUpdateWithoutClientesAsesoradosInput>
  }

  export type ServicioInternetUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<ServicioInternetCreateWithoutClientesInput, ServicioInternetUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ServicioInternetCreateOrConnectWithoutClientesInput
    upsert?: ServicioInternetUpsertWithoutClientesInput
    connect?: ServicioInternetWhereUniqueInput
    update?: XOR<XOR<ServicioInternetUpdateToOneWithWhereWithoutClientesInput, ServicioInternetUpdateWithoutClientesInput>, ServicioInternetUncheckedUpdateWithoutClientesInput>
  }

  export type MunicipioUpdateOneWithoutClientesNestedInput = {
    create?: XOR<MunicipioCreateWithoutClientesInput, MunicipioUncheckedCreateWithoutClientesInput>
    connectOrCreate?: MunicipioCreateOrConnectWithoutClientesInput
    upsert?: MunicipioUpsertWithoutClientesInput
    disconnect?: MunicipioWhereInput | boolean
    delete?: MunicipioWhereInput | boolean
    connect?: MunicipioWhereUniqueInput
    update?: XOR<XOR<MunicipioUpdateToOneWithWhereWithoutClientesInput, MunicipioUpdateWithoutClientesInput>, MunicipioUncheckedUpdateWithoutClientesInput>
  }

  export type DepartamentoUpdateOneWithoutClientesNestedInput = {
    create?: XOR<DepartamentoCreateWithoutClientesInput, DepartamentoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutClientesInput
    upsert?: DepartamentoUpsertWithoutClientesInput
    disconnect?: DepartamentoWhereInput | boolean
    delete?: DepartamentoWhereInput | boolean
    connect?: DepartamentoWhereUniqueInput
    update?: XOR<XOR<DepartamentoUpdateToOneWithWhereWithoutClientesInput, DepartamentoUpdateWithoutClientesInput>, DepartamentoUncheckedUpdateWithoutClientesInput>
  }

  export type EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput = {
    create?: XOR<EmpresaCreateWithoutClientesInternetInput, EmpresaUncheckedCreateWithoutClientesInternetInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutClientesInternetInput
    upsert?: EmpresaUpsertWithoutClientesInternetInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutClientesInternetInput, EmpresaUpdateWithoutClientesInternetInput>, EmpresaUncheckedUpdateWithoutClientesInternetInput>
  }

  export type RutaUpdateManyWithoutClientesNestedInput = {
    create?: XOR<RutaCreateWithoutClientesInput, RutaUncheckedCreateWithoutClientesInput> | RutaCreateWithoutClientesInput[] | RutaUncheckedCreateWithoutClientesInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutClientesInput | RutaCreateOrConnectWithoutClientesInput[]
    upsert?: RutaUpsertWithWhereUniqueWithoutClientesInput | RutaUpsertWithWhereUniqueWithoutClientesInput[]
    set?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    disconnect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    delete?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    update?: RutaUpdateWithWhereUniqueWithoutClientesInput | RutaUpdateWithWhereUniqueWithoutClientesInput[]
    updateMany?: RutaUpdateManyWithWhereWithoutClientesInput | RutaUpdateManyWithWhereWithoutClientesInput[]
    deleteMany?: RutaScalarWhereInput | RutaScalarWhereInput[]
  }

  export type IPUpdateOneWithoutClienteNestedInput = {
    create?: XOR<IPCreateWithoutClienteInput, IPUncheckedCreateWithoutClienteInput>
    connectOrCreate?: IPCreateOrConnectWithoutClienteInput
    upsert?: IPUpsertWithoutClienteInput
    disconnect?: IPWhereInput | boolean
    delete?: IPWhereInput | boolean
    connect?: IPWhereUniqueInput
    update?: XOR<XOR<IPUpdateToOneWithWhereWithoutClienteInput, IPUpdateWithoutClienteInput>, IPUncheckedUpdateWithoutClienteInput>
  }

  export type UbicacionUpdateOneWithoutClienteNestedInput = {
    create?: XOR<UbicacionCreateWithoutClienteInput, UbicacionUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UbicacionCreateOrConnectWithoutClienteInput
    upsert?: UbicacionUpsertWithoutClienteInput
    disconnect?: UbicacionWhereInput | boolean
    delete?: UbicacionWhereInput | boolean
    connect?: UbicacionWhereUniqueInput
    update?: XOR<XOR<UbicacionUpdateToOneWithWhereWithoutClienteInput, UbicacionUpdateWithoutClienteInput>, UbicacionUncheckedUpdateWithoutClienteInput>
  }

  export type TicketSoporteUpdateManyWithoutClienteNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutClienteInput, TicketSoporteUncheckedCreateWithoutClienteInput> | TicketSoporteCreateWithoutClienteInput[] | TicketSoporteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutClienteInput | TicketSoporteCreateOrConnectWithoutClienteInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutClienteInput | TicketSoporteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: TicketSoporteCreateManyClienteInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutClienteInput | TicketSoporteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutClienteInput | TicketSoporteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type saldoClienteUpdateOneWithoutClienteNestedInput = {
    create?: XOR<saldoClienteCreateWithoutClienteInput, saldoClienteUncheckedCreateWithoutClienteInput>
    connectOrCreate?: saldoClienteCreateOrConnectWithoutClienteInput
    upsert?: saldoClienteUpsertWithoutClienteInput
    disconnect?: saldoClienteWhereInput | boolean
    delete?: saldoClienteWhereInput | boolean
    connect?: saldoClienteWhereUniqueInput
    update?: XOR<XOR<saldoClienteUpdateToOneWithWhereWithoutClienteInput, saldoClienteUpdateWithoutClienteInput>, saldoClienteUncheckedUpdateWithoutClienteInput>
  }

  export type FotosUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FotosCreateWithoutClienteInput, FotosUncheckedCreateWithoutClienteInput> | FotosCreateWithoutClienteInput[] | FotosUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FotosCreateOrConnectWithoutClienteInput | FotosCreateOrConnectWithoutClienteInput[]
    upsert?: FotosUpsertWithWhereUniqueWithoutClienteInput | FotosUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FotosCreateManyClienteInputEnvelope
    set?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    disconnect?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    delete?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    connect?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    update?: FotosUpdateWithWhereUniqueWithoutClienteInput | FotosUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FotosUpdateManyWithWhereWithoutClienteInput | FotosUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FotosScalarWhereInput | FotosScalarWhereInput[]
  }

  export type ClienteServicioUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ClienteServicioCreateWithoutClienteInput, ClienteServicioUncheckedCreateWithoutClienteInput> | ClienteServicioCreateWithoutClienteInput[] | ClienteServicioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutClienteInput | ClienteServicioCreateOrConnectWithoutClienteInput[]
    upsert?: ClienteServicioUpsertWithWhereUniqueWithoutClienteInput | ClienteServicioUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ClienteServicioCreateManyClienteInputEnvelope
    set?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    disconnect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    delete?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    update?: ClienteServicioUpdateWithWhereUniqueWithoutClienteInput | ClienteServicioUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ClienteServicioUpdateManyWithWhereWithoutClienteInput | ClienteServicioUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ClienteServicioScalarWhereInput | ClienteServicioScalarWhereInput[]
  }

  export type FacturaInternetUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FacturaInternetCreateWithoutClienteInput, FacturaInternetUncheckedCreateWithoutClienteInput> | FacturaInternetCreateWithoutClienteInput[] | FacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutClienteInput | FacturaInternetCreateOrConnectWithoutClienteInput[]
    upsert?: FacturaInternetUpsertWithWhereUniqueWithoutClienteInput | FacturaInternetUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FacturaInternetCreateManyClienteInputEnvelope
    set?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    disconnect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    delete?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    update?: FacturaInternetUpdateWithWhereUniqueWithoutClienteInput | FacturaInternetUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FacturaInternetUpdateManyWithWhereWithoutClienteInput | FacturaInternetUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FacturaInternetScalarWhereInput | FacturaInternetScalarWhereInput[]
  }

  export type PagoFacturaInternetUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutClienteInput, PagoFacturaInternetUncheckedCreateWithoutClienteInput> | PagoFacturaInternetCreateWithoutClienteInput[] | PagoFacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutClienteInput | PagoFacturaInternetCreateOrConnectWithoutClienteInput[]
    upsert?: PagoFacturaInternetUpsertWithWhereUniqueWithoutClienteInput | PagoFacturaInternetUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PagoFacturaInternetCreateManyClienteInputEnvelope
    set?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    disconnect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    delete?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    update?: PagoFacturaInternetUpdateWithWhereUniqueWithoutClienteInput | PagoFacturaInternetUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PagoFacturaInternetUpdateManyWithWhereWithoutClienteInput | PagoFacturaInternetUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PagoFacturaInternetScalarWhereInput | PagoFacturaInternetScalarWhereInput[]
  }

  export type FacturaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutClienteInput | FacturaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutClienteInput | FacturaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutClienteInput | FacturaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type PagoFacturaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PagoFacturaCreateWithoutClienteInput, PagoFacturaUncheckedCreateWithoutClienteInput> | PagoFacturaCreateWithoutClienteInput[] | PagoFacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutClienteInput | PagoFacturaCreateOrConnectWithoutClienteInput[]
    upsert?: PagoFacturaUpsertWithWhereUniqueWithoutClienteInput | PagoFacturaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PagoFacturaCreateManyClienteInputEnvelope
    set?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    disconnect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    delete?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    update?: PagoFacturaUpdateWithWhereUniqueWithoutClienteInput | PagoFacturaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PagoFacturaUpdateManyWithWhereWithoutClienteInput | PagoFacturaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PagoFacturaScalarWhereInput | PagoFacturaScalarWhereInput[]
  }

  export type RutaUncheckedUpdateManyWithoutClientesNestedInput = {
    create?: XOR<RutaCreateWithoutClientesInput, RutaUncheckedCreateWithoutClientesInput> | RutaCreateWithoutClientesInput[] | RutaUncheckedCreateWithoutClientesInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutClientesInput | RutaCreateOrConnectWithoutClientesInput[]
    upsert?: RutaUpsertWithWhereUniqueWithoutClientesInput | RutaUpsertWithWhereUniqueWithoutClientesInput[]
    set?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    disconnect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    delete?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    update?: RutaUpdateWithWhereUniqueWithoutClientesInput | RutaUpdateWithWhereUniqueWithoutClientesInput[]
    updateMany?: RutaUpdateManyWithWhereWithoutClientesInput | RutaUpdateManyWithWhereWithoutClientesInput[]
    deleteMany?: RutaScalarWhereInput | RutaScalarWhereInput[]
  }

  export type IPUncheckedUpdateOneWithoutClienteNestedInput = {
    create?: XOR<IPCreateWithoutClienteInput, IPUncheckedCreateWithoutClienteInput>
    connectOrCreate?: IPCreateOrConnectWithoutClienteInput
    upsert?: IPUpsertWithoutClienteInput
    disconnect?: IPWhereInput | boolean
    delete?: IPWhereInput | boolean
    connect?: IPWhereUniqueInput
    update?: XOR<XOR<IPUpdateToOneWithWhereWithoutClienteInput, IPUpdateWithoutClienteInput>, IPUncheckedUpdateWithoutClienteInput>
  }

  export type UbicacionUncheckedUpdateOneWithoutClienteNestedInput = {
    create?: XOR<UbicacionCreateWithoutClienteInput, UbicacionUncheckedCreateWithoutClienteInput>
    connectOrCreate?: UbicacionCreateOrConnectWithoutClienteInput
    upsert?: UbicacionUpsertWithoutClienteInput
    disconnect?: UbicacionWhereInput | boolean
    delete?: UbicacionWhereInput | boolean
    connect?: UbicacionWhereUniqueInput
    update?: XOR<XOR<UbicacionUpdateToOneWithWhereWithoutClienteInput, UbicacionUpdateWithoutClienteInput>, UbicacionUncheckedUpdateWithoutClienteInput>
  }

  export type TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutClienteInput, TicketSoporteUncheckedCreateWithoutClienteInput> | TicketSoporteCreateWithoutClienteInput[] | TicketSoporteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutClienteInput | TicketSoporteCreateOrConnectWithoutClienteInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutClienteInput | TicketSoporteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: TicketSoporteCreateManyClienteInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutClienteInput | TicketSoporteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutClienteInput | TicketSoporteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type saldoClienteUncheckedUpdateOneWithoutClienteNestedInput = {
    create?: XOR<saldoClienteCreateWithoutClienteInput, saldoClienteUncheckedCreateWithoutClienteInput>
    connectOrCreate?: saldoClienteCreateOrConnectWithoutClienteInput
    upsert?: saldoClienteUpsertWithoutClienteInput
    disconnect?: saldoClienteWhereInput | boolean
    delete?: saldoClienteWhereInput | boolean
    connect?: saldoClienteWhereUniqueInput
    update?: XOR<XOR<saldoClienteUpdateToOneWithWhereWithoutClienteInput, saldoClienteUpdateWithoutClienteInput>, saldoClienteUncheckedUpdateWithoutClienteInput>
  }

  export type FotosUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FotosCreateWithoutClienteInput, FotosUncheckedCreateWithoutClienteInput> | FotosCreateWithoutClienteInput[] | FotosUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FotosCreateOrConnectWithoutClienteInput | FotosCreateOrConnectWithoutClienteInput[]
    upsert?: FotosUpsertWithWhereUniqueWithoutClienteInput | FotosUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FotosCreateManyClienteInputEnvelope
    set?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    disconnect?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    delete?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    connect?: FotosWhereUniqueInput | FotosWhereUniqueInput[]
    update?: FotosUpdateWithWhereUniqueWithoutClienteInput | FotosUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FotosUpdateManyWithWhereWithoutClienteInput | FotosUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FotosScalarWhereInput | FotosScalarWhereInput[]
  }

  export type ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ClienteServicioCreateWithoutClienteInput, ClienteServicioUncheckedCreateWithoutClienteInput> | ClienteServicioCreateWithoutClienteInput[] | ClienteServicioUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicioCreateOrConnectWithoutClienteInput | ClienteServicioCreateOrConnectWithoutClienteInput[]
    upsert?: ClienteServicioUpsertWithWhereUniqueWithoutClienteInput | ClienteServicioUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ClienteServicioCreateManyClienteInputEnvelope
    set?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    disconnect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    delete?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    connect?: ClienteServicioWhereUniqueInput | ClienteServicioWhereUniqueInput[]
    update?: ClienteServicioUpdateWithWhereUniqueWithoutClienteInput | ClienteServicioUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ClienteServicioUpdateManyWithWhereWithoutClienteInput | ClienteServicioUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ClienteServicioScalarWhereInput | ClienteServicioScalarWhereInput[]
  }

  export type FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FacturaInternetCreateWithoutClienteInput, FacturaInternetUncheckedCreateWithoutClienteInput> | FacturaInternetCreateWithoutClienteInput[] | FacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaInternetCreateOrConnectWithoutClienteInput | FacturaInternetCreateOrConnectWithoutClienteInput[]
    upsert?: FacturaInternetUpsertWithWhereUniqueWithoutClienteInput | FacturaInternetUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FacturaInternetCreateManyClienteInputEnvelope
    set?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    disconnect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    delete?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    connect?: FacturaInternetWhereUniqueInput | FacturaInternetWhereUniqueInput[]
    update?: FacturaInternetUpdateWithWhereUniqueWithoutClienteInput | FacturaInternetUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FacturaInternetUpdateManyWithWhereWithoutClienteInput | FacturaInternetUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FacturaInternetScalarWhereInput | FacturaInternetScalarWhereInput[]
  }

  export type PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PagoFacturaInternetCreateWithoutClienteInput, PagoFacturaInternetUncheckedCreateWithoutClienteInput> | PagoFacturaInternetCreateWithoutClienteInput[] | PagoFacturaInternetUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaInternetCreateOrConnectWithoutClienteInput | PagoFacturaInternetCreateOrConnectWithoutClienteInput[]
    upsert?: PagoFacturaInternetUpsertWithWhereUniqueWithoutClienteInput | PagoFacturaInternetUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PagoFacturaInternetCreateManyClienteInputEnvelope
    set?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    disconnect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    delete?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    connect?: PagoFacturaInternetWhereUniqueInput | PagoFacturaInternetWhereUniqueInput[]
    update?: PagoFacturaInternetUpdateWithWhereUniqueWithoutClienteInput | PagoFacturaInternetUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PagoFacturaInternetUpdateManyWithWhereWithoutClienteInput | PagoFacturaInternetUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PagoFacturaInternetScalarWhereInput | PagoFacturaInternetScalarWhereInput[]
  }

  export type FacturaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput> | FacturaCreateWithoutClienteInput[] | FacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: FacturaCreateOrConnectWithoutClienteInput | FacturaCreateOrConnectWithoutClienteInput[]
    upsert?: FacturaUpsertWithWhereUniqueWithoutClienteInput | FacturaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: FacturaCreateManyClienteInputEnvelope
    set?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    disconnect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    delete?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    connect?: FacturaWhereUniqueInput | FacturaWhereUniqueInput[]
    update?: FacturaUpdateWithWhereUniqueWithoutClienteInput | FacturaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: FacturaUpdateManyWithWhereWithoutClienteInput | FacturaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
  }

  export type PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<PagoFacturaCreateWithoutClienteInput, PagoFacturaUncheckedCreateWithoutClienteInput> | PagoFacturaCreateWithoutClienteInput[] | PagoFacturaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: PagoFacturaCreateOrConnectWithoutClienteInput | PagoFacturaCreateOrConnectWithoutClienteInput[]
    upsert?: PagoFacturaUpsertWithWhereUniqueWithoutClienteInput | PagoFacturaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: PagoFacturaCreateManyClienteInputEnvelope
    set?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    disconnect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    delete?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    connect?: PagoFacturaWhereUniqueInput | PagoFacturaWhereUniqueInput[]
    update?: PagoFacturaUpdateWithWhereUniqueWithoutClienteInput | PagoFacturaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: PagoFacturaUpdateManyWithWhereWithoutClienteInput | PagoFacturaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: PagoFacturaScalarWhereInput | PagoFacturaScalarWhereInput[]
  }

  export type ClienteInternetCreateNestedOneWithoutSaldoClienteInput = {
    create?: XOR<ClienteInternetCreateWithoutSaldoClienteInput, ClienteInternetUncheckedCreateWithoutSaldoClienteInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutSaldoClienteInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type ClienteInternetUpdateOneRequiredWithoutSaldoClienteNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutSaldoClienteInput, ClienteInternetUncheckedCreateWithoutSaldoClienteInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutSaldoClienteInput
    upsert?: ClienteInternetUpsertWithoutSaldoClienteInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutSaldoClienteInput, ClienteInternetUpdateWithoutSaldoClienteInput>, ClienteInternetUncheckedUpdateWithoutSaldoClienteInput>
  }

  export type ClienteInternetCreateNestedOneWithoutUbicacionInput = {
    create?: XOR<ClienteInternetCreateWithoutUbicacionInput, ClienteInternetUncheckedCreateWithoutUbicacionInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutUbicacionInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type EmpresaCreateNestedOneWithoutUbicacionInput = {
    create?: XOR<EmpresaCreateWithoutUbicacionInput, EmpresaUncheckedCreateWithoutUbicacionInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutUbicacionInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ClienteInternetUpdateOneRequiredWithoutUbicacionNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutUbicacionInput, ClienteInternetUncheckedCreateWithoutUbicacionInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutUbicacionInput
    upsert?: ClienteInternetUpsertWithoutUbicacionInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutUbicacionInput, ClienteInternetUpdateWithoutUbicacionInput>, ClienteInternetUncheckedUpdateWithoutUbicacionInput>
  }

  export type EmpresaUpdateOneRequiredWithoutUbicacionNestedInput = {
    create?: XOR<EmpresaCreateWithoutUbicacionInput, EmpresaUncheckedCreateWithoutUbicacionInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutUbicacionInput
    upsert?: EmpresaUpsertWithoutUbicacionInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutUbicacionInput, EmpresaUpdateWithoutUbicacionInput>, EmpresaUncheckedUpdateWithoutUbicacionInput>
  }

  export type MunicipioCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<MunicipioCreateWithoutDepartamentoInput, MunicipioUncheckedCreateWithoutDepartamentoInput> | MunicipioCreateWithoutDepartamentoInput[] | MunicipioUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: MunicipioCreateOrConnectWithoutDepartamentoInput | MunicipioCreateOrConnectWithoutDepartamentoInput[]
    createMany?: MunicipioCreateManyDepartamentoInputEnvelope
    connect?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
  }

  export type ClienteInternetCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<ClienteInternetCreateWithoutDepartamentoInput, ClienteInternetUncheckedCreateWithoutDepartamentoInput> | ClienteInternetCreateWithoutDepartamentoInput[] | ClienteInternetUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutDepartamentoInput | ClienteInternetCreateOrConnectWithoutDepartamentoInput[]
    createMany?: ClienteInternetCreateManyDepartamentoInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type MunicipioUncheckedCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<MunicipioCreateWithoutDepartamentoInput, MunicipioUncheckedCreateWithoutDepartamentoInput> | MunicipioCreateWithoutDepartamentoInput[] | MunicipioUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: MunicipioCreateOrConnectWithoutDepartamentoInput | MunicipioCreateOrConnectWithoutDepartamentoInput[]
    createMany?: MunicipioCreateManyDepartamentoInputEnvelope
    connect?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
  }

  export type ClienteInternetUncheckedCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<ClienteInternetCreateWithoutDepartamentoInput, ClienteInternetUncheckedCreateWithoutDepartamentoInput> | ClienteInternetCreateWithoutDepartamentoInput[] | ClienteInternetUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutDepartamentoInput | ClienteInternetCreateOrConnectWithoutDepartamentoInput[]
    createMany?: ClienteInternetCreateManyDepartamentoInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type MunicipioUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<MunicipioCreateWithoutDepartamentoInput, MunicipioUncheckedCreateWithoutDepartamentoInput> | MunicipioCreateWithoutDepartamentoInput[] | MunicipioUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: MunicipioCreateOrConnectWithoutDepartamentoInput | MunicipioCreateOrConnectWithoutDepartamentoInput[]
    upsert?: MunicipioUpsertWithWhereUniqueWithoutDepartamentoInput | MunicipioUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: MunicipioCreateManyDepartamentoInputEnvelope
    set?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    disconnect?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    delete?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    connect?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    update?: MunicipioUpdateWithWhereUniqueWithoutDepartamentoInput | MunicipioUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: MunicipioUpdateManyWithWhereWithoutDepartamentoInput | MunicipioUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: MunicipioScalarWhereInput | MunicipioScalarWhereInput[]
  }

  export type ClienteInternetUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutDepartamentoInput, ClienteInternetUncheckedCreateWithoutDepartamentoInput> | ClienteInternetCreateWithoutDepartamentoInput[] | ClienteInternetUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutDepartamentoInput | ClienteInternetCreateOrConnectWithoutDepartamentoInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutDepartamentoInput | ClienteInternetUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: ClienteInternetCreateManyDepartamentoInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutDepartamentoInput | ClienteInternetUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutDepartamentoInput | ClienteInternetUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type MunicipioUncheckedUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<MunicipioCreateWithoutDepartamentoInput, MunicipioUncheckedCreateWithoutDepartamentoInput> | MunicipioCreateWithoutDepartamentoInput[] | MunicipioUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: MunicipioCreateOrConnectWithoutDepartamentoInput | MunicipioCreateOrConnectWithoutDepartamentoInput[]
    upsert?: MunicipioUpsertWithWhereUniqueWithoutDepartamentoInput | MunicipioUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: MunicipioCreateManyDepartamentoInputEnvelope
    set?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    disconnect?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    delete?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    connect?: MunicipioWhereUniqueInput | MunicipioWhereUniqueInput[]
    update?: MunicipioUpdateWithWhereUniqueWithoutDepartamentoInput | MunicipioUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: MunicipioUpdateManyWithWhereWithoutDepartamentoInput | MunicipioUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: MunicipioScalarWhereInput | MunicipioScalarWhereInput[]
  }

  export type ClienteInternetUncheckedUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutDepartamentoInput, ClienteInternetUncheckedCreateWithoutDepartamentoInput> | ClienteInternetCreateWithoutDepartamentoInput[] | ClienteInternetUncheckedCreateWithoutDepartamentoInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutDepartamentoInput | ClienteInternetCreateOrConnectWithoutDepartamentoInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutDepartamentoInput | ClienteInternetUpsertWithWhereUniqueWithoutDepartamentoInput[]
    createMany?: ClienteInternetCreateManyDepartamentoInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutDepartamentoInput | ClienteInternetUpdateWithWhereUniqueWithoutDepartamentoInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutDepartamentoInput | ClienteInternetUpdateManyWithWhereWithoutDepartamentoInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type DepartamentoCreateNestedOneWithoutMunicipiosInput = {
    create?: XOR<DepartamentoCreateWithoutMunicipiosInput, DepartamentoUncheckedCreateWithoutMunicipiosInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutMunicipiosInput
    connect?: DepartamentoWhereUniqueInput
  }

  export type ClienteInternetCreateNestedManyWithoutMunicipioInput = {
    create?: XOR<ClienteInternetCreateWithoutMunicipioInput, ClienteInternetUncheckedCreateWithoutMunicipioInput> | ClienteInternetCreateWithoutMunicipioInput[] | ClienteInternetUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutMunicipioInput | ClienteInternetCreateOrConnectWithoutMunicipioInput[]
    createMany?: ClienteInternetCreateManyMunicipioInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type ClienteInternetUncheckedCreateNestedManyWithoutMunicipioInput = {
    create?: XOR<ClienteInternetCreateWithoutMunicipioInput, ClienteInternetUncheckedCreateWithoutMunicipioInput> | ClienteInternetCreateWithoutMunicipioInput[] | ClienteInternetUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutMunicipioInput | ClienteInternetCreateOrConnectWithoutMunicipioInput[]
    createMany?: ClienteInternetCreateManyMunicipioInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type DepartamentoUpdateOneRequiredWithoutMunicipiosNestedInput = {
    create?: XOR<DepartamentoCreateWithoutMunicipiosInput, DepartamentoUncheckedCreateWithoutMunicipiosInput>
    connectOrCreate?: DepartamentoCreateOrConnectWithoutMunicipiosInput
    upsert?: DepartamentoUpsertWithoutMunicipiosInput
    connect?: DepartamentoWhereUniqueInput
    update?: XOR<XOR<DepartamentoUpdateToOneWithWhereWithoutMunicipiosInput, DepartamentoUpdateWithoutMunicipiosInput>, DepartamentoUncheckedUpdateWithoutMunicipiosInput>
  }

  export type ClienteInternetUpdateManyWithoutMunicipioNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutMunicipioInput, ClienteInternetUncheckedCreateWithoutMunicipioInput> | ClienteInternetCreateWithoutMunicipioInput[] | ClienteInternetUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutMunicipioInput | ClienteInternetCreateOrConnectWithoutMunicipioInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutMunicipioInput | ClienteInternetUpsertWithWhereUniqueWithoutMunicipioInput[]
    createMany?: ClienteInternetCreateManyMunicipioInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutMunicipioInput | ClienteInternetUpdateWithWhereUniqueWithoutMunicipioInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutMunicipioInput | ClienteInternetUpdateManyWithWhereWithoutMunicipioInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type ClienteInternetUncheckedUpdateManyWithoutMunicipioNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutMunicipioInput, ClienteInternetUncheckedCreateWithoutMunicipioInput> | ClienteInternetCreateWithoutMunicipioInput[] | ClienteInternetUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutMunicipioInput | ClienteInternetCreateOrConnectWithoutMunicipioInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutMunicipioInput | ClienteInternetUpsertWithWhereUniqueWithoutMunicipioInput[]
    createMany?: ClienteInternetCreateManyMunicipioInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutMunicipioInput | ClienteInternetUpdateWithWhereUniqueWithoutMunicipioInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutMunicipioInput | ClienteInternetUpdateManyWithWhereWithoutMunicipioInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutRutaInput = {
    create?: XOR<UsuarioCreateWithoutRutaInput, UsuarioUncheckedCreateWithoutRutaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRutaInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ClienteInternetCreateNestedManyWithoutRutaInput = {
    create?: XOR<ClienteInternetCreateWithoutRutaInput, ClienteInternetUncheckedCreateWithoutRutaInput> | ClienteInternetCreateWithoutRutaInput[] | ClienteInternetUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutRutaInput | ClienteInternetCreateOrConnectWithoutRutaInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type EmpresaCreateNestedOneWithoutRutasInput = {
    create?: XOR<EmpresaCreateWithoutRutasInput, EmpresaUncheckedCreateWithoutRutasInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutRutasInput
    connect?: EmpresaWhereUniqueInput
  }

  export type ClienteInternetUncheckedCreateNestedManyWithoutRutaInput = {
    create?: XOR<ClienteInternetCreateWithoutRutaInput, ClienteInternetUncheckedCreateWithoutRutaInput> | ClienteInternetCreateWithoutRutaInput[] | ClienteInternetUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutRutaInput | ClienteInternetCreateOrConnectWithoutRutaInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type EnumEstadoRutaFieldUpdateOperationsInput = {
    set?: $Enums.EstadoRuta
  }

  export type UsuarioUpdateOneRequiredWithoutRutaNestedInput = {
    create?: XOR<UsuarioCreateWithoutRutaInput, UsuarioUncheckedCreateWithoutRutaInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRutaInput
    upsert?: UsuarioUpsertWithoutRutaInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRutaInput, UsuarioUpdateWithoutRutaInput>, UsuarioUncheckedUpdateWithoutRutaInput>
  }

  export type ClienteInternetUpdateManyWithoutRutaNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutRutaInput, ClienteInternetUncheckedCreateWithoutRutaInput> | ClienteInternetCreateWithoutRutaInput[] | ClienteInternetUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutRutaInput | ClienteInternetCreateOrConnectWithoutRutaInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutRutaInput | ClienteInternetUpsertWithWhereUniqueWithoutRutaInput[]
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutRutaInput | ClienteInternetUpdateWithWhereUniqueWithoutRutaInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutRutaInput | ClienteInternetUpdateManyWithWhereWithoutRutaInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type EmpresaUpdateOneRequiredWithoutRutasNestedInput = {
    create?: XOR<EmpresaCreateWithoutRutasInput, EmpresaUncheckedCreateWithoutRutasInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutRutasInput
    upsert?: EmpresaUpsertWithoutRutasInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutRutasInput, EmpresaUpdateWithoutRutasInput>, EmpresaUncheckedUpdateWithoutRutasInput>
  }

  export type ClienteInternetUncheckedUpdateManyWithoutRutaNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutRutaInput, ClienteInternetUncheckedCreateWithoutRutaInput> | ClienteInternetCreateWithoutRutaInput[] | ClienteInternetUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutRutaInput | ClienteInternetCreateOrConnectWithoutRutaInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutRutaInput | ClienteInternetUpsertWithWhereUniqueWithoutRutaInput[]
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutRutaInput | ClienteInternetUpdateWithWhereUniqueWithoutRutaInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutRutaInput | ClienteInternetUpdateManyWithWhereWithoutRutaInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type ClienteInternetCreateNestedOneWithoutTicketSoporteInput = {
    create?: XOR<ClienteInternetCreateWithoutTicketSoporteInput, ClienteInternetUncheckedCreateWithoutTicketSoporteInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutTicketSoporteInput
    connect?: ClienteInternetWhereUniqueInput
  }

  export type EmpresaCreateNestedOneWithoutTicketSoporteInput = {
    create?: XOR<EmpresaCreateWithoutTicketSoporteInput, EmpresaUncheckedCreateWithoutTicketSoporteInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutTicketSoporteInput
    connect?: EmpresaWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutTicketsAsignadosInput = {
    create?: XOR<UsuarioCreateWithoutTicketsAsignadosInput, UsuarioUncheckedCreateWithoutTicketsAsignadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTicketsAsignadosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutTicketsCreadosInput = {
    create?: XOR<UsuarioCreateWithoutTicketsCreadosInput, UsuarioUncheckedCreateWithoutTicketsCreadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTicketsCreadosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type SeguimientoTicketCreateNestedManyWithoutTicketInput = {
    create?: XOR<SeguimientoTicketCreateWithoutTicketInput, SeguimientoTicketUncheckedCreateWithoutTicketInput> | SeguimientoTicketCreateWithoutTicketInput[] | SeguimientoTicketUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutTicketInput | SeguimientoTicketCreateOrConnectWithoutTicketInput[]
    createMany?: SeguimientoTicketCreateManyTicketInputEnvelope
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
  }

  export type SeguimientoTicketUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<SeguimientoTicketCreateWithoutTicketInput, SeguimientoTicketUncheckedCreateWithoutTicketInput> | SeguimientoTicketCreateWithoutTicketInput[] | SeguimientoTicketUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutTicketInput | SeguimientoTicketCreateOrConnectWithoutTicketInput[]
    createMany?: SeguimientoTicketCreateManyTicketInputEnvelope
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
  }

  export type EnumEstadoTicketSoporteFieldUpdateOperationsInput = {
    set?: $Enums.EstadoTicketSoporte
  }

  export type EnumPrioridadTicketSoporteFieldUpdateOperationsInput = {
    set?: $Enums.PrioridadTicketSoporte
  }

  export type ClienteInternetUpdateOneRequiredWithoutTicketSoporteNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutTicketSoporteInput, ClienteInternetUncheckedCreateWithoutTicketSoporteInput>
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutTicketSoporteInput
    upsert?: ClienteInternetUpsertWithoutTicketSoporteInput
    connect?: ClienteInternetWhereUniqueInput
    update?: XOR<XOR<ClienteInternetUpdateToOneWithWhereWithoutTicketSoporteInput, ClienteInternetUpdateWithoutTicketSoporteInput>, ClienteInternetUncheckedUpdateWithoutTicketSoporteInput>
  }

  export type EmpresaUpdateOneRequiredWithoutTicketSoporteNestedInput = {
    create?: XOR<EmpresaCreateWithoutTicketSoporteInput, EmpresaUncheckedCreateWithoutTicketSoporteInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutTicketSoporteInput
    upsert?: EmpresaUpsertWithoutTicketSoporteInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutTicketSoporteInput, EmpresaUpdateWithoutTicketSoporteInput>, EmpresaUncheckedUpdateWithoutTicketSoporteInput>
  }

  export type UsuarioUpdateOneWithoutTicketsAsignadosNestedInput = {
    create?: XOR<UsuarioCreateWithoutTicketsAsignadosInput, UsuarioUncheckedCreateWithoutTicketsAsignadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTicketsAsignadosInput
    upsert?: UsuarioUpsertWithoutTicketsAsignadosInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTicketsAsignadosInput, UsuarioUpdateWithoutTicketsAsignadosInput>, UsuarioUncheckedUpdateWithoutTicketsAsignadosInput>
  }

  export type UsuarioUpdateOneWithoutTicketsCreadosNestedInput = {
    create?: XOR<UsuarioCreateWithoutTicketsCreadosInput, UsuarioUncheckedCreateWithoutTicketsCreadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTicketsCreadosInput
    upsert?: UsuarioUpsertWithoutTicketsCreadosInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTicketsCreadosInput, UsuarioUpdateWithoutTicketsCreadosInput>, UsuarioUncheckedUpdateWithoutTicketsCreadosInput>
  }

  export type SeguimientoTicketUpdateManyWithoutTicketNestedInput = {
    create?: XOR<SeguimientoTicketCreateWithoutTicketInput, SeguimientoTicketUncheckedCreateWithoutTicketInput> | SeguimientoTicketCreateWithoutTicketInput[] | SeguimientoTicketUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutTicketInput | SeguimientoTicketCreateOrConnectWithoutTicketInput[]
    upsert?: SeguimientoTicketUpsertWithWhereUniqueWithoutTicketInput | SeguimientoTicketUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: SeguimientoTicketCreateManyTicketInputEnvelope
    set?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    disconnect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    delete?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    update?: SeguimientoTicketUpdateWithWhereUniqueWithoutTicketInput | SeguimientoTicketUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: SeguimientoTicketUpdateManyWithWhereWithoutTicketInput | SeguimientoTicketUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: SeguimientoTicketScalarWhereInput | SeguimientoTicketScalarWhereInput[]
  }

  export type SeguimientoTicketUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<SeguimientoTicketCreateWithoutTicketInput, SeguimientoTicketUncheckedCreateWithoutTicketInput> | SeguimientoTicketCreateWithoutTicketInput[] | SeguimientoTicketUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutTicketInput | SeguimientoTicketCreateOrConnectWithoutTicketInput[]
    upsert?: SeguimientoTicketUpsertWithWhereUniqueWithoutTicketInput | SeguimientoTicketUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: SeguimientoTicketCreateManyTicketInputEnvelope
    set?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    disconnect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    delete?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    update?: SeguimientoTicketUpdateWithWhereUniqueWithoutTicketInput | SeguimientoTicketUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: SeguimientoTicketUpdateManyWithWhereWithoutTicketInput | SeguimientoTicketUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: SeguimientoTicketScalarWhereInput | SeguimientoTicketScalarWhereInput[]
  }

  export type TicketSoporteCreateNestedOneWithoutSeguimientoTicketInput = {
    create?: XOR<TicketSoporteCreateWithoutSeguimientoTicketInput, TicketSoporteUncheckedCreateWithoutSeguimientoTicketInput>
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutSeguimientoTicketInput
    connect?: TicketSoporteWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutSeguimientoTicketInput = {
    create?: XOR<UsuarioCreateWithoutSeguimientoTicketInput, UsuarioUncheckedCreateWithoutSeguimientoTicketInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSeguimientoTicketInput
    connect?: UsuarioWhereUniqueInput
  }

  export type TicketSoporteUpdateOneRequiredWithoutSeguimientoTicketNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutSeguimientoTicketInput, TicketSoporteUncheckedCreateWithoutSeguimientoTicketInput>
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutSeguimientoTicketInput
    upsert?: TicketSoporteUpsertWithoutSeguimientoTicketInput
    connect?: TicketSoporteWhereUniqueInput
    update?: XOR<XOR<TicketSoporteUpdateToOneWithWhereWithoutSeguimientoTicketInput, TicketSoporteUpdateWithoutSeguimientoTicketInput>, TicketSoporteUncheckedUpdateWithoutSeguimientoTicketInput>
  }

  export type UsuarioUpdateOneRequiredWithoutSeguimientoTicketNestedInput = {
    create?: XOR<UsuarioCreateWithoutSeguimientoTicketInput, UsuarioUncheckedCreateWithoutSeguimientoTicketInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSeguimientoTicketInput
    upsert?: UsuarioUpsertWithoutSeguimientoTicketInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSeguimientoTicketInput, UsuarioUpdateWithoutSeguimientoTicketInput>, UsuarioUncheckedUpdateWithoutSeguimientoTicketInput>
  }

  export type EmpresaCreateNestedOneWithoutEmpleadosInput = {
    create?: XOR<EmpresaCreateWithoutEmpleadosInput, EmpresaUncheckedCreateWithoutEmpleadosInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutEmpleadosInput
    connect?: EmpresaWhereUniqueInput
  }

  export type RutaCreateNestedManyWithoutCobradorInput = {
    create?: XOR<RutaCreateWithoutCobradorInput, RutaUncheckedCreateWithoutCobradorInput> | RutaCreateWithoutCobradorInput[] | RutaUncheckedCreateWithoutCobradorInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutCobradorInput | RutaCreateOrConnectWithoutCobradorInput[]
    createMany?: RutaCreateManyCobradorInputEnvelope
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
  }

  export type TicketSoporteCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<TicketSoporteCreateWithoutTecnicoInput, TicketSoporteUncheckedCreateWithoutTecnicoInput> | TicketSoporteCreateWithoutTecnicoInput[] | TicketSoporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutTecnicoInput | TicketSoporteCreateOrConnectWithoutTecnicoInput[]
    createMany?: TicketSoporteCreateManyTecnicoInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type TicketSoporteCreateNestedManyWithoutCreadoPorInput = {
    create?: XOR<TicketSoporteCreateWithoutCreadoPorInput, TicketSoporteUncheckedCreateWithoutCreadoPorInput> | TicketSoporteCreateWithoutCreadoPorInput[] | TicketSoporteUncheckedCreateWithoutCreadoPorInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutCreadoPorInput | TicketSoporteCreateOrConnectWithoutCreadoPorInput[]
    createMany?: TicketSoporteCreateManyCreadoPorInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type SeguimientoTicketCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<SeguimientoTicketCreateWithoutUsuarioInput, SeguimientoTicketUncheckedCreateWithoutUsuarioInput> | SeguimientoTicketCreateWithoutUsuarioInput[] | SeguimientoTicketUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutUsuarioInput | SeguimientoTicketCreateOrConnectWithoutUsuarioInput[]
    createMany?: SeguimientoTicketCreateManyUsuarioInputEnvelope
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
  }

  export type ClienteInternetCreateNestedManyWithoutAsesorInput = {
    create?: XOR<ClienteInternetCreateWithoutAsesorInput, ClienteInternetUncheckedCreateWithoutAsesorInput> | ClienteInternetCreateWithoutAsesorInput[] | ClienteInternetUncheckedCreateWithoutAsesorInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutAsesorInput | ClienteInternetCreateOrConnectWithoutAsesorInput[]
    createMany?: ClienteInternetCreateManyAsesorInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type RegistroCajaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RegistroCajaCreateWithoutUsuarioInput, RegistroCajaUncheckedCreateWithoutUsuarioInput> | RegistroCajaCreateWithoutUsuarioInput[] | RegistroCajaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutUsuarioInput | RegistroCajaCreateOrConnectWithoutUsuarioInput[]
    createMany?: RegistroCajaCreateManyUsuarioInputEnvelope
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
  }

  export type RutaUncheckedCreateNestedManyWithoutCobradorInput = {
    create?: XOR<RutaCreateWithoutCobradorInput, RutaUncheckedCreateWithoutCobradorInput> | RutaCreateWithoutCobradorInput[] | RutaUncheckedCreateWithoutCobradorInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutCobradorInput | RutaCreateOrConnectWithoutCobradorInput[]
    createMany?: RutaCreateManyCobradorInputEnvelope
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
  }

  export type TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<TicketSoporteCreateWithoutTecnicoInput, TicketSoporteUncheckedCreateWithoutTecnicoInput> | TicketSoporteCreateWithoutTecnicoInput[] | TicketSoporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutTecnicoInput | TicketSoporteCreateOrConnectWithoutTecnicoInput[]
    createMany?: TicketSoporteCreateManyTecnicoInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput = {
    create?: XOR<TicketSoporteCreateWithoutCreadoPorInput, TicketSoporteUncheckedCreateWithoutCreadoPorInput> | TicketSoporteCreateWithoutCreadoPorInput[] | TicketSoporteUncheckedCreateWithoutCreadoPorInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutCreadoPorInput | TicketSoporteCreateOrConnectWithoutCreadoPorInput[]
    createMany?: TicketSoporteCreateManyCreadoPorInputEnvelope
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
  }

  export type SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<SeguimientoTicketCreateWithoutUsuarioInput, SeguimientoTicketUncheckedCreateWithoutUsuarioInput> | SeguimientoTicketCreateWithoutUsuarioInput[] | SeguimientoTicketUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutUsuarioInput | SeguimientoTicketCreateOrConnectWithoutUsuarioInput[]
    createMany?: SeguimientoTicketCreateManyUsuarioInputEnvelope
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
  }

  export type ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput = {
    create?: XOR<ClienteInternetCreateWithoutAsesorInput, ClienteInternetUncheckedCreateWithoutAsesorInput> | ClienteInternetCreateWithoutAsesorInput[] | ClienteInternetUncheckedCreateWithoutAsesorInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutAsesorInput | ClienteInternetCreateOrConnectWithoutAsesorInput[]
    createMany?: ClienteInternetCreateManyAsesorInputEnvelope
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
  }

  export type RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RegistroCajaCreateWithoutUsuarioInput, RegistroCajaUncheckedCreateWithoutUsuarioInput> | RegistroCajaCreateWithoutUsuarioInput[] | RegistroCajaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutUsuarioInput | RegistroCajaCreateOrConnectWithoutUsuarioInput[]
    createMany?: RegistroCajaCreateManyUsuarioInputEnvelope
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
  }

  export type EnumRolUsuarioFieldUpdateOperationsInput = {
    set?: $Enums.RolUsuario
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput = {
    create?: XOR<EmpresaCreateWithoutEmpleadosInput, EmpresaUncheckedCreateWithoutEmpleadosInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutEmpleadosInput
    upsert?: EmpresaUpsertWithoutEmpleadosInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutEmpleadosInput, EmpresaUpdateWithoutEmpleadosInput>, EmpresaUncheckedUpdateWithoutEmpleadosInput>
  }

  export type RutaUpdateManyWithoutCobradorNestedInput = {
    create?: XOR<RutaCreateWithoutCobradorInput, RutaUncheckedCreateWithoutCobradorInput> | RutaCreateWithoutCobradorInput[] | RutaUncheckedCreateWithoutCobradorInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutCobradorInput | RutaCreateOrConnectWithoutCobradorInput[]
    upsert?: RutaUpsertWithWhereUniqueWithoutCobradorInput | RutaUpsertWithWhereUniqueWithoutCobradorInput[]
    createMany?: RutaCreateManyCobradorInputEnvelope
    set?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    disconnect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    delete?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    update?: RutaUpdateWithWhereUniqueWithoutCobradorInput | RutaUpdateWithWhereUniqueWithoutCobradorInput[]
    updateMany?: RutaUpdateManyWithWhereWithoutCobradorInput | RutaUpdateManyWithWhereWithoutCobradorInput[]
    deleteMany?: RutaScalarWhereInput | RutaScalarWhereInput[]
  }

  export type TicketSoporteUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutTecnicoInput, TicketSoporteUncheckedCreateWithoutTecnicoInput> | TicketSoporteCreateWithoutTecnicoInput[] | TicketSoporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutTecnicoInput | TicketSoporteCreateOrConnectWithoutTecnicoInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutTecnicoInput | TicketSoporteUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: TicketSoporteCreateManyTecnicoInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutTecnicoInput | TicketSoporteUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutTecnicoInput | TicketSoporteUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type TicketSoporteUpdateManyWithoutCreadoPorNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutCreadoPorInput, TicketSoporteUncheckedCreateWithoutCreadoPorInput> | TicketSoporteCreateWithoutCreadoPorInput[] | TicketSoporteUncheckedCreateWithoutCreadoPorInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutCreadoPorInput | TicketSoporteCreateOrConnectWithoutCreadoPorInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutCreadoPorInput | TicketSoporteUpsertWithWhereUniqueWithoutCreadoPorInput[]
    createMany?: TicketSoporteCreateManyCreadoPorInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutCreadoPorInput | TicketSoporteUpdateWithWhereUniqueWithoutCreadoPorInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutCreadoPorInput | TicketSoporteUpdateManyWithWhereWithoutCreadoPorInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type SeguimientoTicketUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<SeguimientoTicketCreateWithoutUsuarioInput, SeguimientoTicketUncheckedCreateWithoutUsuarioInput> | SeguimientoTicketCreateWithoutUsuarioInput[] | SeguimientoTicketUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutUsuarioInput | SeguimientoTicketCreateOrConnectWithoutUsuarioInput[]
    upsert?: SeguimientoTicketUpsertWithWhereUniqueWithoutUsuarioInput | SeguimientoTicketUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: SeguimientoTicketCreateManyUsuarioInputEnvelope
    set?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    disconnect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    delete?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    update?: SeguimientoTicketUpdateWithWhereUniqueWithoutUsuarioInput | SeguimientoTicketUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: SeguimientoTicketUpdateManyWithWhereWithoutUsuarioInput | SeguimientoTicketUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: SeguimientoTicketScalarWhereInput | SeguimientoTicketScalarWhereInput[]
  }

  export type ClienteInternetUpdateManyWithoutAsesorNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutAsesorInput, ClienteInternetUncheckedCreateWithoutAsesorInput> | ClienteInternetCreateWithoutAsesorInput[] | ClienteInternetUncheckedCreateWithoutAsesorInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutAsesorInput | ClienteInternetCreateOrConnectWithoutAsesorInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutAsesorInput | ClienteInternetUpsertWithWhereUniqueWithoutAsesorInput[]
    createMany?: ClienteInternetCreateManyAsesorInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutAsesorInput | ClienteInternetUpdateWithWhereUniqueWithoutAsesorInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutAsesorInput | ClienteInternetUpdateManyWithWhereWithoutAsesorInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type RegistroCajaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RegistroCajaCreateWithoutUsuarioInput, RegistroCajaUncheckedCreateWithoutUsuarioInput> | RegistroCajaCreateWithoutUsuarioInput[] | RegistroCajaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutUsuarioInput | RegistroCajaCreateOrConnectWithoutUsuarioInput[]
    upsert?: RegistroCajaUpsertWithWhereUniqueWithoutUsuarioInput | RegistroCajaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RegistroCajaCreateManyUsuarioInputEnvelope
    set?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    disconnect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    delete?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    update?: RegistroCajaUpdateWithWhereUniqueWithoutUsuarioInput | RegistroCajaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RegistroCajaUpdateManyWithWhereWithoutUsuarioInput | RegistroCajaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RegistroCajaScalarWhereInput | RegistroCajaScalarWhereInput[]
  }

  export type RutaUncheckedUpdateManyWithoutCobradorNestedInput = {
    create?: XOR<RutaCreateWithoutCobradorInput, RutaUncheckedCreateWithoutCobradorInput> | RutaCreateWithoutCobradorInput[] | RutaUncheckedCreateWithoutCobradorInput[]
    connectOrCreate?: RutaCreateOrConnectWithoutCobradorInput | RutaCreateOrConnectWithoutCobradorInput[]
    upsert?: RutaUpsertWithWhereUniqueWithoutCobradorInput | RutaUpsertWithWhereUniqueWithoutCobradorInput[]
    createMany?: RutaCreateManyCobradorInputEnvelope
    set?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    disconnect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    delete?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    connect?: RutaWhereUniqueInput | RutaWhereUniqueInput[]
    update?: RutaUpdateWithWhereUniqueWithoutCobradorInput | RutaUpdateWithWhereUniqueWithoutCobradorInput[]
    updateMany?: RutaUpdateManyWithWhereWithoutCobradorInput | RutaUpdateManyWithWhereWithoutCobradorInput[]
    deleteMany?: RutaScalarWhereInput | RutaScalarWhereInput[]
  }

  export type TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutTecnicoInput, TicketSoporteUncheckedCreateWithoutTecnicoInput> | TicketSoporteCreateWithoutTecnicoInput[] | TicketSoporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutTecnicoInput | TicketSoporteCreateOrConnectWithoutTecnicoInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutTecnicoInput | TicketSoporteUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: TicketSoporteCreateManyTecnicoInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutTecnicoInput | TicketSoporteUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutTecnicoInput | TicketSoporteUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput = {
    create?: XOR<TicketSoporteCreateWithoutCreadoPorInput, TicketSoporteUncheckedCreateWithoutCreadoPorInput> | TicketSoporteCreateWithoutCreadoPorInput[] | TicketSoporteUncheckedCreateWithoutCreadoPorInput[]
    connectOrCreate?: TicketSoporteCreateOrConnectWithoutCreadoPorInput | TicketSoporteCreateOrConnectWithoutCreadoPorInput[]
    upsert?: TicketSoporteUpsertWithWhereUniqueWithoutCreadoPorInput | TicketSoporteUpsertWithWhereUniqueWithoutCreadoPorInput[]
    createMany?: TicketSoporteCreateManyCreadoPorInputEnvelope
    set?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    disconnect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    delete?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    connect?: TicketSoporteWhereUniqueInput | TicketSoporteWhereUniqueInput[]
    update?: TicketSoporteUpdateWithWhereUniqueWithoutCreadoPorInput | TicketSoporteUpdateWithWhereUniqueWithoutCreadoPorInput[]
    updateMany?: TicketSoporteUpdateManyWithWhereWithoutCreadoPorInput | TicketSoporteUpdateManyWithWhereWithoutCreadoPorInput[]
    deleteMany?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
  }

  export type SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<SeguimientoTicketCreateWithoutUsuarioInput, SeguimientoTicketUncheckedCreateWithoutUsuarioInput> | SeguimientoTicketCreateWithoutUsuarioInput[] | SeguimientoTicketUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: SeguimientoTicketCreateOrConnectWithoutUsuarioInput | SeguimientoTicketCreateOrConnectWithoutUsuarioInput[]
    upsert?: SeguimientoTicketUpsertWithWhereUniqueWithoutUsuarioInput | SeguimientoTicketUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: SeguimientoTicketCreateManyUsuarioInputEnvelope
    set?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    disconnect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    delete?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    connect?: SeguimientoTicketWhereUniqueInput | SeguimientoTicketWhereUniqueInput[]
    update?: SeguimientoTicketUpdateWithWhereUniqueWithoutUsuarioInput | SeguimientoTicketUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: SeguimientoTicketUpdateManyWithWhereWithoutUsuarioInput | SeguimientoTicketUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: SeguimientoTicketScalarWhereInput | SeguimientoTicketScalarWhereInput[]
  }

  export type ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput = {
    create?: XOR<ClienteInternetCreateWithoutAsesorInput, ClienteInternetUncheckedCreateWithoutAsesorInput> | ClienteInternetCreateWithoutAsesorInput[] | ClienteInternetUncheckedCreateWithoutAsesorInput[]
    connectOrCreate?: ClienteInternetCreateOrConnectWithoutAsesorInput | ClienteInternetCreateOrConnectWithoutAsesorInput[]
    upsert?: ClienteInternetUpsertWithWhereUniqueWithoutAsesorInput | ClienteInternetUpsertWithWhereUniqueWithoutAsesorInput[]
    createMany?: ClienteInternetCreateManyAsesorInputEnvelope
    set?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    disconnect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    delete?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    connect?: ClienteInternetWhereUniqueInput | ClienteInternetWhereUniqueInput[]
    update?: ClienteInternetUpdateWithWhereUniqueWithoutAsesorInput | ClienteInternetUpdateWithWhereUniqueWithoutAsesorInput[]
    updateMany?: ClienteInternetUpdateManyWithWhereWithoutAsesorInput | ClienteInternetUpdateManyWithWhereWithoutAsesorInput[]
    deleteMany?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
  }

  export type RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RegistroCajaCreateWithoutUsuarioInput, RegistroCajaUncheckedCreateWithoutUsuarioInput> | RegistroCajaCreateWithoutUsuarioInput[] | RegistroCajaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RegistroCajaCreateOrConnectWithoutUsuarioInput | RegistroCajaCreateOrConnectWithoutUsuarioInput[]
    upsert?: RegistroCajaUpsertWithWhereUniqueWithoutUsuarioInput | RegistroCajaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RegistroCajaCreateManyUsuarioInputEnvelope
    set?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    disconnect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    delete?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    connect?: RegistroCajaWhereUniqueInput | RegistroCajaWhereUniqueInput[]
    update?: RegistroCajaUpdateWithWhereUniqueWithoutUsuarioInput | RegistroCajaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RegistroCajaUpdateManyWithWhereWithoutUsuarioInput | RegistroCajaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RegistroCajaScalarWhereInput | RegistroCajaScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumEstadoServicioFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoServicio | EnumEstadoServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoServicioFilter<$PrismaModel> | $Enums.EstadoServicio
  }

  export type NestedEnumEstadoServicioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoServicio | EnumEstadoServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoServicio[] | ListEnumEstadoServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoServicioWithAggregatesFilter<$PrismaModel> | $Enums.EstadoServicio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoServicioFilter<$PrismaModel>
    _max?: NestedEnumEstadoServicioFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumEstadoClienteServicioFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoClienteServicio | EnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteServicioFilter<$PrismaModel> | $Enums.EstadoClienteServicio
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumEstadoClienteServicioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoClienteServicio | EnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoClienteServicio[] | ListEnumEstadoClienteServicioFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteServicioWithAggregatesFilter<$PrismaModel> | $Enums.EstadoClienteServicio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoClienteServicioFilter<$PrismaModel>
    _max?: NestedEnumEstadoClienteServicioFilter<$PrismaModel>
  }

  export type NestedEnumTipoFacturaFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoFactura | EnumTipoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFacturaFilter<$PrismaModel> | $Enums.TipoFactura
  }

  export type NestedEnumEstadoFacturaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaFilter<$PrismaModel> | $Enums.EstadoFactura
  }

  export type NestedEnumTipoFacturaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoFactura | EnumTipoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoFactura[] | ListEnumTipoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFacturaWithAggregatesFilter<$PrismaModel> | $Enums.TipoFactura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoFacturaFilter<$PrismaModel>
    _max?: NestedEnumTipoFacturaFilter<$PrismaModel>
  }

  export type NestedEnumEstadoFacturaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFactura | EnumEstadoFacturaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFactura[] | ListEnumEstadoFacturaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoFactura
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFacturaFilter<$PrismaModel>
    _max?: NestedEnumEstadoFacturaFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPago[] | ListEnumMetodoPagoFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPagoFacturaInternet | EnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel> | $Enums.MetodoPagoFacturaInternet
  }

  export type NestedEnumEstadoFacturaInternetFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFacturaInternet | EnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaInternetFilter<$PrismaModel> | $Enums.EstadoFacturaInternet
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoFacturaInternetWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPagoFacturaInternet | EnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetodoPagoFacturaInternet[] | ListEnumMetodoPagoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumMetodoPagoFacturaInternetWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPagoFacturaInternet
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFacturaInternetFilter<$PrismaModel>
  }

  export type NestedEnumEstadoFacturaInternetWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoFacturaInternet | EnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoFacturaInternet[] | ListEnumEstadoFacturaInternetFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoFacturaInternetWithAggregatesFilter<$PrismaModel> | $Enums.EstadoFacturaInternet
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoFacturaInternetFilter<$PrismaModel>
    _max?: NestedEnumEstadoFacturaInternetFilter<$PrismaModel>
  }

  export type NestedEnumEstadoClienteFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCliente | EnumEstadoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteFilter<$PrismaModel> | $Enums.EstadoCliente
  }

  export type NestedEnumEstadoClienteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoCliente | EnumEstadoClienteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoCliente[] | ListEnumEstadoClienteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoClienteWithAggregatesFilter<$PrismaModel> | $Enums.EstadoCliente
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoClienteFilter<$PrismaModel>
    _max?: NestedEnumEstadoClienteFilter<$PrismaModel>
  }

  export type NestedEnumEstadoRutaFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRuta | EnumEstadoRutaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRutaFilter<$PrismaModel> | $Enums.EstadoRuta
  }

  export type NestedEnumEstadoRutaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoRuta | EnumEstadoRutaFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoRuta[] | ListEnumEstadoRutaFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoRutaWithAggregatesFilter<$PrismaModel> | $Enums.EstadoRuta
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoRutaFilter<$PrismaModel>
    _max?: NestedEnumEstadoRutaFilter<$PrismaModel>
  }

  export type NestedEnumEstadoTicketSoporteFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTicketSoporte | EnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTicketSoporteFilter<$PrismaModel> | $Enums.EstadoTicketSoporte
  }

  export type NestedEnumPrioridadTicketSoporteFilter<$PrismaModel = never> = {
    equals?: $Enums.PrioridadTicketSoporte | EnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumPrioridadTicketSoporteFilter<$PrismaModel> | $Enums.PrioridadTicketSoporte
  }

  export type NestedEnumEstadoTicketSoporteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTicketSoporte | EnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTicketSoporte[] | ListEnumEstadoTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTicketSoporteWithAggregatesFilter<$PrismaModel> | $Enums.EstadoTicketSoporte
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoTicketSoporteFilter<$PrismaModel>
    _max?: NestedEnumEstadoTicketSoporteFilter<$PrismaModel>
  }

  export type NestedEnumPrioridadTicketSoporteWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PrioridadTicketSoporte | EnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    in?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrioridadTicketSoporte[] | ListEnumPrioridadTicketSoporteFieldRefInput<$PrismaModel>
    not?: NestedEnumPrioridadTicketSoporteWithAggregatesFilter<$PrismaModel> | $Enums.PrioridadTicketSoporte
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPrioridadTicketSoporteFilter<$PrismaModel>
    _max?: NestedEnumPrioridadTicketSoporteFilter<$PrismaModel>
  }

  export type NestedEnumRolUsuarioFilter<$PrismaModel = never> = {
    equals?: $Enums.RolUsuario | EnumRolUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumRolUsuarioFilter<$PrismaModel> | $Enums.RolUsuario
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRolUsuarioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RolUsuario | EnumRolUsuarioFieldRefInput<$PrismaModel>
    in?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    notIn?: $Enums.RolUsuario[] | ListEnumRolUsuarioFieldRefInput<$PrismaModel>
    not?: NestedEnumRolUsuarioWithAggregatesFilter<$PrismaModel> | $Enums.RolUsuario
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolUsuarioFilter<$PrismaModel>
    _max?: NestedEnumRolUsuarioFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UsuarioCreateWithoutEmpresaInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutEmpresaInput = {
    id?: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutEmpresaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEmpresaInput, UsuarioUncheckedCreateWithoutEmpresaInput>
  }

  export type UsuarioCreateManyEmpresaInputEnvelope = {
    data: UsuarioCreateManyEmpresaInput | UsuarioCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type RutaCreateWithoutEmpresaInput = {
    nombreRuta: string
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    cobrador: UsuarioCreateNestedOneWithoutRutaInput
    Clientes?: ClienteInternetCreateNestedManyWithoutRutaInput
  }

  export type RutaUncheckedCreateWithoutEmpresaInput = {
    id?: number
    nombreRuta: string
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    Clientes?: ClienteInternetUncheckedCreateNestedManyWithoutRutaInput
  }

  export type RutaCreateOrConnectWithoutEmpresaInput = {
    where: RutaWhereUniqueInput
    create: XOR<RutaCreateWithoutEmpresaInput, RutaUncheckedCreateWithoutEmpresaInput>
  }

  export type RutaCreateManyEmpresaInputEnvelope = {
    data: RutaCreateManyEmpresaInput | RutaCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type ClienteInternetCreateWithoutEmpresaInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutEmpresaInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutEmpresaInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutEmpresaInput, ClienteInternetUncheckedCreateWithoutEmpresaInput>
  }

  export type ClienteInternetCreateManyEmpresaInputEnvelope = {
    data: ClienteInternetCreateManyEmpresaInput | ClienteInternetCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type FacturaInternetCreateWithoutEmpresaInput = {
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInternetInput
    pagos?: PagoFacturaInternetCreateNestedManyWithoutFacturaInternetInput
  }

  export type FacturaInternetUncheckedCreateWithoutEmpresaInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet
    clienteId: number
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    pagos?: PagoFacturaInternetUncheckedCreateNestedManyWithoutFacturaInternetInput
  }

  export type FacturaInternetCreateOrConnectWithoutEmpresaInput = {
    where: FacturaInternetWhereUniqueInput
    create: XOR<FacturaInternetCreateWithoutEmpresaInput, FacturaInternetUncheckedCreateWithoutEmpresaInput>
  }

  export type FacturaInternetCreateManyEmpresaInputEnvelope = {
    data: FacturaInternetCreateManyEmpresaInput | FacturaInternetCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type TicketSoporteCreateWithoutEmpresaInput = {
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    cliente: ClienteInternetCreateNestedOneWithoutTicketSoporteInput
    tecnico?: UsuarioCreateNestedOneWithoutTicketsAsignadosInput
    creadoPor?: UsuarioCreateNestedOneWithoutTicketsCreadosInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteUncheckedCreateWithoutEmpresaInput = {
    id?: number
    clienteId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteCreateOrConnectWithoutEmpresaInput = {
    where: TicketSoporteWhereUniqueInput
    create: XOR<TicketSoporteCreateWithoutEmpresaInput, TicketSoporteUncheckedCreateWithoutEmpresaInput>
  }

  export type TicketSoporteCreateManyEmpresaInputEnvelope = {
    data: TicketSoporteCreateManyEmpresaInput | TicketSoporteCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type SaldoEmpresaCreateWithoutEmpresaInput = {
    saldo?: number
    egresos?: number
    totalIngresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type SaldoEmpresaUncheckedCreateWithoutEmpresaInput = {
    id?: number
    saldo?: number
    egresos?: number
    totalIngresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type SaldoEmpresaCreateOrConnectWithoutEmpresaInput = {
    where: SaldoEmpresaWhereUniqueInput
    create: XOR<SaldoEmpresaCreateWithoutEmpresaInput, SaldoEmpresaUncheckedCreateWithoutEmpresaInput>
  }

  export type SaldoCajaCreateWithoutEmpresaInput = {
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    registrosCaja?: RegistroCajaCreateNestedManyWithoutCajaInput
  }

  export type SaldoCajaUncheckedCreateWithoutEmpresaInput = {
    id?: number
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    registrosCaja?: RegistroCajaUncheckedCreateNestedManyWithoutCajaInput
  }

  export type SaldoCajaCreateOrConnectWithoutEmpresaInput = {
    where: SaldoCajaWhereUniqueInput
    create: XOR<SaldoCajaCreateWithoutEmpresaInput, SaldoCajaUncheckedCreateWithoutEmpresaInput>
  }

  export type ServicioInternetCreateWithoutEmpresaInput = {
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteInternetCreateNestedManyWithoutServicioInput
  }

  export type ServicioInternetUncheckedCreateWithoutEmpresaInput = {
    id?: number
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteInternetUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioInternetCreateOrConnectWithoutEmpresaInput = {
    where: ServicioInternetWhereUniqueInput
    create: XOR<ServicioInternetCreateWithoutEmpresaInput, ServicioInternetUncheckedCreateWithoutEmpresaInput>
  }

  export type ServicioInternetCreateManyEmpresaInputEnvelope = {
    data: ServicioInternetCreateManyEmpresaInput | ServicioInternetCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type UbicacionCreateWithoutEmpresaInput = {
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    cliente: ClienteInternetCreateNestedOneWithoutUbicacionInput
  }

  export type UbicacionUncheckedCreateWithoutEmpresaInput = {
    id?: number
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    clienteId: number
  }

  export type UbicacionCreateOrConnectWithoutEmpresaInput = {
    where: UbicacionWhereUniqueInput
    create: XOR<UbicacionCreateWithoutEmpresaInput, UbicacionUncheckedCreateWithoutEmpresaInput>
  }

  export type UbicacionCreateManyEmpresaInputEnvelope = {
    data: UbicacionCreateManyEmpresaInput | UbicacionCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type ProveedorCreateWithoutEmpresaInput = {
    nombre: string
    correo?: string | null
    telefono?: string | null
    direccion?: string | null
  }

  export type ProveedorUncheckedCreateWithoutEmpresaInput = {
    id?: number
    nombre: string
    correo?: string | null
    telefono?: string | null
    direccion?: string | null
  }

  export type ProveedorCreateOrConnectWithoutEmpresaInput = {
    where: ProveedorWhereUniqueInput
    create: XOR<ProveedorCreateWithoutEmpresaInput, ProveedorUncheckedCreateWithoutEmpresaInput>
  }

  export type ProveedorCreateManyEmpresaInputEnvelope = {
    data: ProveedorCreateManyEmpresaInput | ProveedorCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type ServicioCreateWithoutEmpresaInput = {
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
    clientes?: ClienteServicioCreateNestedManyWithoutServicioInput
    FacturaServicio?: FacturaServicioCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutEmpresaInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    tipoServicioId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteServicioUncheckedCreateNestedManyWithoutServicioInput
    FacturaServicio?: FacturaServicioUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutEmpresaInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutEmpresaInput, ServicioUncheckedCreateWithoutEmpresaInput>
  }

  export type ServicioCreateManyEmpresaInputEnvelope = {
    data: ServicioCreateManyEmpresaInput | ServicioCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type FacturaCreateWithoutEmpresaInput = {
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInput
    servicios?: FacturaServicioCreateNestedManyWithoutFacturaInput
    pagos?: PagoFacturaCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUncheckedCreateWithoutEmpresaInput = {
    id?: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicios?: FacturaServicioUncheckedCreateNestedManyWithoutFacturaInput
    pagos?: PagoFacturaUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaCreateOrConnectWithoutEmpresaInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutEmpresaInput, FacturaUncheckedCreateWithoutEmpresaInput>
  }

  export type FacturaCreateManyEmpresaInputEnvelope = {
    data: FacturaCreateManyEmpresaInput | FacturaCreateManyEmpresaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: UsuarioWhereUniqueInput
    update: XOR<UsuarioUpdateWithoutEmpresaInput, UsuarioUncheckedUpdateWithoutEmpresaInput>
    create: XOR<UsuarioCreateWithoutEmpresaInput, UsuarioUncheckedCreateWithoutEmpresaInput>
  }

  export type UsuarioUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: UsuarioWhereUniqueInput
    data: XOR<UsuarioUpdateWithoutEmpresaInput, UsuarioUncheckedUpdateWithoutEmpresaInput>
  }

  export type UsuarioUpdateManyWithWhereWithoutEmpresaInput = {
    where: UsuarioScalarWhereInput
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type UsuarioScalarWhereInput = {
    AND?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    OR?: UsuarioScalarWhereInput[]
    NOT?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    id?: IntFilter<"Usuario"> | number
    empresaId?: IntFilter<"Usuario"> | number
    sucursalId?: IntNullableFilter<"Usuario"> | number | null
    nombre?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    telefono?: StringNullableFilter<"Usuario"> | string | null
    rol?: EnumRolUsuarioFilter<"Usuario"> | $Enums.RolUsuario
    activo?: BoolFilter<"Usuario"> | boolean
    creadoEn?: DateTimeFilter<"Usuario"> | Date | string
    actualizadoEn?: DateTimeFilter<"Usuario"> | Date | string
  }

  export type RutaUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: RutaWhereUniqueInput
    update: XOR<RutaUpdateWithoutEmpresaInput, RutaUncheckedUpdateWithoutEmpresaInput>
    create: XOR<RutaCreateWithoutEmpresaInput, RutaUncheckedCreateWithoutEmpresaInput>
  }

  export type RutaUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: RutaWhereUniqueInput
    data: XOR<RutaUpdateWithoutEmpresaInput, RutaUncheckedUpdateWithoutEmpresaInput>
  }

  export type RutaUpdateManyWithWhereWithoutEmpresaInput = {
    where: RutaScalarWhereInput
    data: XOR<RutaUpdateManyMutationInput, RutaUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type RutaScalarWhereInput = {
    AND?: RutaScalarWhereInput | RutaScalarWhereInput[]
    OR?: RutaScalarWhereInput[]
    NOT?: RutaScalarWhereInput | RutaScalarWhereInput[]
    id?: IntFilter<"Ruta"> | number
    nombreRuta?: StringFilter<"Ruta"> | string
    cobradorId?: IntFilter<"Ruta"> | number
    cobrados?: IntFilter<"Ruta"> | number
    montoCobrado?: IntFilter<"Ruta"> | number
    estadoRuta?: EnumEstadoRutaFilter<"Ruta"> | $Enums.EstadoRuta
    EmpresaId?: IntFilter<"Ruta"> | number
  }

  export type ClienteInternetUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ClienteInternetWhereUniqueInput
    update: XOR<ClienteInternetUpdateWithoutEmpresaInput, ClienteInternetUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ClienteInternetCreateWithoutEmpresaInput, ClienteInternetUncheckedCreateWithoutEmpresaInput>
  }

  export type ClienteInternetUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ClienteInternetWhereUniqueInput
    data: XOR<ClienteInternetUpdateWithoutEmpresaInput, ClienteInternetUncheckedUpdateWithoutEmpresaInput>
  }

  export type ClienteInternetUpdateManyWithWhereWithoutEmpresaInput = {
    where: ClienteInternetScalarWhereInput
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type ClienteInternetScalarWhereInput = {
    AND?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
    OR?: ClienteInternetScalarWhereInput[]
    NOT?: ClienteInternetScalarWhereInput | ClienteInternetScalarWhereInput[]
    id?: IntFilter<"ClienteInternet"> | number
    nombre?: StringFilter<"ClienteInternet"> | string
    telefono?: StringNullableFilter<"ClienteInternet"> | string | null
    direccion?: StringNullableFilter<"ClienteInternet"> | string | null
    dpi?: StringNullableFilter<"ClienteInternet"> | string | null
    observaciones?: StringNullableFilter<"ClienteInternet"> | string | null
    contactoReferenciaNombre?: StringNullableFilter<"ClienteInternet"> | string | null
    contactoReferenciaTelefono?: StringNullableFilter<"ClienteInternet"> | string | null
    estadoCliente?: EnumEstadoClienteFilter<"ClienteInternet"> | $Enums.EstadoCliente
    contrasenaWifi?: StringFilter<"ClienteInternet"> | string
    ssidRouter?: StringNullableFilter<"ClienteInternet"> | string | null
    fechaInstalacion?: DateTimeNullableFilter<"ClienteInternet"> | Date | string | null
    asesorId?: IntNullableFilter<"ClienteInternet"> | number | null
    servicioId?: IntFilter<"ClienteInternet"> | number
    municipioId?: IntNullableFilter<"ClienteInternet"> | number | null
    departamentoId?: IntNullableFilter<"ClienteInternet"> | number | null
    empresaId?: IntFilter<"ClienteInternet"> | number
    creadoEn?: DateTimeFilter<"ClienteInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"ClienteInternet"> | Date | string
  }

  export type FacturaInternetUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: FacturaInternetWhereUniqueInput
    update: XOR<FacturaInternetUpdateWithoutEmpresaInput, FacturaInternetUncheckedUpdateWithoutEmpresaInput>
    create: XOR<FacturaInternetCreateWithoutEmpresaInput, FacturaInternetUncheckedCreateWithoutEmpresaInput>
  }

  export type FacturaInternetUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: FacturaInternetWhereUniqueInput
    data: XOR<FacturaInternetUpdateWithoutEmpresaInput, FacturaInternetUncheckedUpdateWithoutEmpresaInput>
  }

  export type FacturaInternetUpdateManyWithWhereWithoutEmpresaInput = {
    where: FacturaInternetScalarWhereInput
    data: XOR<FacturaInternetUpdateManyMutationInput, FacturaInternetUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type FacturaInternetScalarWhereInput = {
    AND?: FacturaInternetScalarWhereInput | FacturaInternetScalarWhereInput[]
    OR?: FacturaInternetScalarWhereInput[]
    NOT?: FacturaInternetScalarWhereInput | FacturaInternetScalarWhereInput[]
    id?: IntFilter<"FacturaInternet"> | number
    fechaPagoEsperada?: DateTimeNullableFilter<"FacturaInternet"> | Date | string | null
    fechaPagada?: DateTimeNullableFilter<"FacturaInternet"> | Date | string | null
    montoPago?: FloatNullableFilter<"FacturaInternet"> | number | null
    saldoPendiente?: FloatNullableFilter<"FacturaInternet"> | number | null
    empresaId?: IntFilter<"FacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetFilter<"FacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFilter<"FacturaInternet"> | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFilter<"FacturaInternet"> | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFilter<"FacturaInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"FacturaInternet"> | Date | string
  }

  export type TicketSoporteUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: TicketSoporteWhereUniqueInput
    update: XOR<TicketSoporteUpdateWithoutEmpresaInput, TicketSoporteUncheckedUpdateWithoutEmpresaInput>
    create: XOR<TicketSoporteCreateWithoutEmpresaInput, TicketSoporteUncheckedCreateWithoutEmpresaInput>
  }

  export type TicketSoporteUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: TicketSoporteWhereUniqueInput
    data: XOR<TicketSoporteUpdateWithoutEmpresaInput, TicketSoporteUncheckedUpdateWithoutEmpresaInput>
  }

  export type TicketSoporteUpdateManyWithWhereWithoutEmpresaInput = {
    where: TicketSoporteScalarWhereInput
    data: XOR<TicketSoporteUpdateManyMutationInput, TicketSoporteUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type TicketSoporteScalarWhereInput = {
    AND?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
    OR?: TicketSoporteScalarWhereInput[]
    NOT?: TicketSoporteScalarWhereInput | TicketSoporteScalarWhereInput[]
    id?: IntFilter<"TicketSoporte"> | number
    clienteId?: IntFilter<"TicketSoporte"> | number
    empresaId?: IntFilter<"TicketSoporte"> | number
    tecnicoId?: IntNullableFilter<"TicketSoporte"> | number | null
    creadoPorId?: IntNullableFilter<"TicketSoporte"> | number | null
    estado?: EnumEstadoTicketSoporteFilter<"TicketSoporte"> | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFilter<"TicketSoporte"> | $Enums.PrioridadTicketSoporte
    descripcion?: StringFilter<"TicketSoporte"> | string
    comentarios?: StringNullableFilter<"TicketSoporte"> | string | null
    fechaCreacion?: DateTimeFilter<"TicketSoporte"> | Date | string
    fechaCierre?: DateTimeNullableFilter<"TicketSoporte"> | Date | string | null
  }

  export type SaldoEmpresaUpsertWithoutEmpresaInput = {
    update: XOR<SaldoEmpresaUpdateWithoutEmpresaInput, SaldoEmpresaUncheckedUpdateWithoutEmpresaInput>
    create: XOR<SaldoEmpresaCreateWithoutEmpresaInput, SaldoEmpresaUncheckedCreateWithoutEmpresaInput>
    where?: SaldoEmpresaWhereInput
  }

  export type SaldoEmpresaUpdateToOneWithWhereWithoutEmpresaInput = {
    where?: SaldoEmpresaWhereInput
    data: XOR<SaldoEmpresaUpdateWithoutEmpresaInput, SaldoEmpresaUncheckedUpdateWithoutEmpresaInput>
  }

  export type SaldoEmpresaUpdateWithoutEmpresaInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egresos?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaldoEmpresaUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egresos?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaldoCajaUpsertWithoutEmpresaInput = {
    update: XOR<SaldoCajaUpdateWithoutEmpresaInput, SaldoCajaUncheckedUpdateWithoutEmpresaInput>
    create: XOR<SaldoCajaCreateWithoutEmpresaInput, SaldoCajaUncheckedCreateWithoutEmpresaInput>
    where?: SaldoCajaWhereInput
  }

  export type SaldoCajaUpdateToOneWithWhereWithoutEmpresaInput = {
    where?: SaldoCajaWhereInput
    data: XOR<SaldoCajaUpdateWithoutEmpresaInput, SaldoCajaUncheckedUpdateWithoutEmpresaInput>
  }

  export type SaldoCajaUpdateWithoutEmpresaInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    registrosCaja?: RegistroCajaUpdateManyWithoutCajaNestedInput
  }

  export type SaldoCajaUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    registrosCaja?: RegistroCajaUncheckedUpdateManyWithoutCajaNestedInput
  }

  export type ServicioInternetUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ServicioInternetWhereUniqueInput
    update: XOR<ServicioInternetUpdateWithoutEmpresaInput, ServicioInternetUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ServicioInternetCreateWithoutEmpresaInput, ServicioInternetUncheckedCreateWithoutEmpresaInput>
  }

  export type ServicioInternetUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ServicioInternetWhereUniqueInput
    data: XOR<ServicioInternetUpdateWithoutEmpresaInput, ServicioInternetUncheckedUpdateWithoutEmpresaInput>
  }

  export type ServicioInternetUpdateManyWithWhereWithoutEmpresaInput = {
    where: ServicioInternetScalarWhereInput
    data: XOR<ServicioInternetUpdateManyMutationInput, ServicioInternetUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type ServicioInternetScalarWhereInput = {
    AND?: ServicioInternetScalarWhereInput | ServicioInternetScalarWhereInput[]
    OR?: ServicioInternetScalarWhereInput[]
    NOT?: ServicioInternetScalarWhereInput | ServicioInternetScalarWhereInput[]
    id?: IntFilter<"ServicioInternet"> | number
    nombre?: StringFilter<"ServicioInternet"> | string
    velocidad?: StringNullableFilter<"ServicioInternet"> | string | null
    precio?: FloatFilter<"ServicioInternet"> | number
    estado?: EnumEstadoServicioFilter<"ServicioInternet"> | $Enums.EstadoServicio
    creadoEn?: DateTimeFilter<"ServicioInternet"> | Date | string
    actualizadoEn?: DateTimeFilter<"ServicioInternet"> | Date | string
    empresaId?: IntFilter<"ServicioInternet"> | number
  }

  export type UbicacionUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: UbicacionWhereUniqueInput
    update: XOR<UbicacionUpdateWithoutEmpresaInput, UbicacionUncheckedUpdateWithoutEmpresaInput>
    create: XOR<UbicacionCreateWithoutEmpresaInput, UbicacionUncheckedCreateWithoutEmpresaInput>
  }

  export type UbicacionUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: UbicacionWhereUniqueInput
    data: XOR<UbicacionUpdateWithoutEmpresaInput, UbicacionUncheckedUpdateWithoutEmpresaInput>
  }

  export type UbicacionUpdateManyWithWhereWithoutEmpresaInput = {
    where: UbicacionScalarWhereInput
    data: XOR<UbicacionUpdateManyMutationInput, UbicacionUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type UbicacionScalarWhereInput = {
    AND?: UbicacionScalarWhereInput | UbicacionScalarWhereInput[]
    OR?: UbicacionScalarWhereInput[]
    NOT?: UbicacionScalarWhereInput | UbicacionScalarWhereInput[]
    id?: IntFilter<"Ubicacion"> | number
    creadoEn?: DateTimeFilter<"Ubicacion"> | Date | string
    latitud?: FloatNullableFilter<"Ubicacion"> | number | null
    longitud?: FloatNullableFilter<"Ubicacion"> | number | null
    clienteId?: IntFilter<"Ubicacion"> | number
    empresaId?: IntFilter<"Ubicacion"> | number
  }

  export type ProveedorUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ProveedorWhereUniqueInput
    update: XOR<ProveedorUpdateWithoutEmpresaInput, ProveedorUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ProveedorCreateWithoutEmpresaInput, ProveedorUncheckedCreateWithoutEmpresaInput>
  }

  export type ProveedorUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ProveedorWhereUniqueInput
    data: XOR<ProveedorUpdateWithoutEmpresaInput, ProveedorUncheckedUpdateWithoutEmpresaInput>
  }

  export type ProveedorUpdateManyWithWhereWithoutEmpresaInput = {
    where: ProveedorScalarWhereInput
    data: XOR<ProveedorUpdateManyMutationInput, ProveedorUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type ProveedorScalarWhereInput = {
    AND?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
    OR?: ProveedorScalarWhereInput[]
    NOT?: ProveedorScalarWhereInput | ProveedorScalarWhereInput[]
    id?: IntFilter<"Proveedor"> | number
    nombre?: StringFilter<"Proveedor"> | string
    correo?: StringNullableFilter<"Proveedor"> | string | null
    telefono?: StringNullableFilter<"Proveedor"> | string | null
    direccion?: StringNullableFilter<"Proveedor"> | string | null
    empresaId?: IntFilter<"Proveedor"> | number
  }

  export type ServicioUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ServicioWhereUniqueInput
    update: XOR<ServicioUpdateWithoutEmpresaInput, ServicioUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ServicioCreateWithoutEmpresaInput, ServicioUncheckedCreateWithoutEmpresaInput>
  }

  export type ServicioUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ServicioWhereUniqueInput
    data: XOR<ServicioUpdateWithoutEmpresaInput, ServicioUncheckedUpdateWithoutEmpresaInput>
  }

  export type ServicioUpdateManyWithWhereWithoutEmpresaInput = {
    where: ServicioScalarWhereInput
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type ServicioScalarWhereInput = {
    AND?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
    OR?: ServicioScalarWhereInput[]
    NOT?: ServicioScalarWhereInput | ServicioScalarWhereInput[]
    id?: IntFilter<"Servicio"> | number
    nombre?: StringFilter<"Servicio"> | string
    descripcion?: StringNullableFilter<"Servicio"> | string | null
    precio?: FloatFilter<"Servicio"> | number
    estado?: EnumEstadoServicioFilter<"Servicio"> | $Enums.EstadoServicio
    tipoServicioId?: IntFilter<"Servicio"> | number
    empresaId?: IntFilter<"Servicio"> | number
    creadoEn?: DateTimeFilter<"Servicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"Servicio"> | Date | string
  }

  export type FacturaUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: FacturaWhereUniqueInput
    update: XOR<FacturaUpdateWithoutEmpresaInput, FacturaUncheckedUpdateWithoutEmpresaInput>
    create: XOR<FacturaCreateWithoutEmpresaInput, FacturaUncheckedCreateWithoutEmpresaInput>
  }

  export type FacturaUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: FacturaWhereUniqueInput
    data: XOR<FacturaUpdateWithoutEmpresaInput, FacturaUncheckedUpdateWithoutEmpresaInput>
  }

  export type FacturaUpdateManyWithWhereWithoutEmpresaInput = {
    where: FacturaScalarWhereInput
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type FacturaScalarWhereInput = {
    AND?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
    OR?: FacturaScalarWhereInput[]
    NOT?: FacturaScalarWhereInput | FacturaScalarWhereInput[]
    id?: IntFilter<"Factura"> | number
    empresaId?: IntFilter<"Factura"> | number
    clienteId?: IntFilter<"Factura"> | number
    tipoFactura?: EnumTipoFacturaFilter<"Factura"> | $Enums.TipoFactura
    montoTotal?: FloatFilter<"Factura"> | number
    saldoPendiente?: FloatFilter<"Factura"> | number
    fechaEmision?: DateTimeFilter<"Factura"> | Date | string
    fechaVencimiento?: DateTimeNullableFilter<"Factura"> | Date | string | null
    estado?: EnumEstadoFacturaFilter<"Factura"> | $Enums.EstadoFactura
    creadoEn?: DateTimeFilter<"Factura"> | Date | string
    actualizadoEn?: DateTimeFilter<"Factura"> | Date | string
  }

  export type ServicioCreateWithoutTipoServicioInput = {
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutServicioInput
    clientes?: ClienteServicioCreateNestedManyWithoutServicioInput
    FacturaServicio?: FacturaServicioCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutTipoServicioInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteServicioUncheckedCreateNestedManyWithoutServicioInput
    FacturaServicio?: FacturaServicioUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutTipoServicioInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput>
  }

  export type ServicioCreateManyTipoServicioInputEnvelope = {
    data: ServicioCreateManyTipoServicioInput | ServicioCreateManyTipoServicioInput[]
    skipDuplicates?: boolean
  }

  export type ServicioUpsertWithWhereUniqueWithoutTipoServicioInput = {
    where: ServicioWhereUniqueInput
    update: XOR<ServicioUpdateWithoutTipoServicioInput, ServicioUncheckedUpdateWithoutTipoServicioInput>
    create: XOR<ServicioCreateWithoutTipoServicioInput, ServicioUncheckedCreateWithoutTipoServicioInput>
  }

  export type ServicioUpdateWithWhereUniqueWithoutTipoServicioInput = {
    where: ServicioWhereUniqueInput
    data: XOR<ServicioUpdateWithoutTipoServicioInput, ServicioUncheckedUpdateWithoutTipoServicioInput>
  }

  export type ServicioUpdateManyWithWhereWithoutTipoServicioInput = {
    where: ServicioScalarWhereInput
    data: XOR<ServicioUpdateManyMutationInput, ServicioUncheckedUpdateManyWithoutTipoServicioInput>
  }

  export type TipoServicioCreateWithoutServiciosInput = {
    nombre: string
    descripcion?: string | null
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type TipoServicioUncheckedCreateWithoutServiciosInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type TipoServicioCreateOrConnectWithoutServiciosInput = {
    where: TipoServicioWhereUniqueInput
    create: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
  }

  export type EmpresaCreateWithoutServicioInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutServicioInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutServicioInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutServicioInput, EmpresaUncheckedCreateWithoutServicioInput>
  }

  export type ClienteServicioCreateWithoutServicioInput = {
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutClienteServicioInput
  }

  export type ClienteServicioUncheckedCreateWithoutServicioInput = {
    id?: number
    clienteId: number
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteServicioCreateOrConnectWithoutServicioInput = {
    where: ClienteServicioWhereUniqueInput
    create: XOR<ClienteServicioCreateWithoutServicioInput, ClienteServicioUncheckedCreateWithoutServicioInput>
  }

  export type ClienteServicioCreateManyServicioInputEnvelope = {
    data: ClienteServicioCreateManyServicioInput | ClienteServicioCreateManyServicioInput[]
    skipDuplicates?: boolean
  }

  export type FacturaServicioCreateWithoutServicioInput = {
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    factura: FacturaCreateNestedOneWithoutServiciosInput
  }

  export type FacturaServicioUncheckedCreateWithoutServicioInput = {
    id?: number
    facturaId: number
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaServicioCreateOrConnectWithoutServicioInput = {
    where: FacturaServicioWhereUniqueInput
    create: XOR<FacturaServicioCreateWithoutServicioInput, FacturaServicioUncheckedCreateWithoutServicioInput>
  }

  export type FacturaServicioCreateManyServicioInputEnvelope = {
    data: FacturaServicioCreateManyServicioInput | FacturaServicioCreateManyServicioInput[]
    skipDuplicates?: boolean
  }

  export type TipoServicioUpsertWithoutServiciosInput = {
    update: XOR<TipoServicioUpdateWithoutServiciosInput, TipoServicioUncheckedUpdateWithoutServiciosInput>
    create: XOR<TipoServicioCreateWithoutServiciosInput, TipoServicioUncheckedCreateWithoutServiciosInput>
    where?: TipoServicioWhereInput
  }

  export type TipoServicioUpdateToOneWithWhereWithoutServiciosInput = {
    where?: TipoServicioWhereInput
    data: XOR<TipoServicioUpdateWithoutServiciosInput, TipoServicioUncheckedUpdateWithoutServiciosInput>
  }

  export type TipoServicioUpdateWithoutServiciosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoServicioUncheckedUpdateWithoutServiciosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUpsertWithoutServicioInput = {
    update: XOR<EmpresaUpdateWithoutServicioInput, EmpresaUncheckedUpdateWithoutServicioInput>
    create: XOR<EmpresaCreateWithoutServicioInput, EmpresaUncheckedCreateWithoutServicioInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutServicioInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutServicioInput, EmpresaUncheckedUpdateWithoutServicioInput>
  }

  export type EmpresaUpdateWithoutServicioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ClienteServicioUpsertWithWhereUniqueWithoutServicioInput = {
    where: ClienteServicioWhereUniqueInput
    update: XOR<ClienteServicioUpdateWithoutServicioInput, ClienteServicioUncheckedUpdateWithoutServicioInput>
    create: XOR<ClienteServicioCreateWithoutServicioInput, ClienteServicioUncheckedCreateWithoutServicioInput>
  }

  export type ClienteServicioUpdateWithWhereUniqueWithoutServicioInput = {
    where: ClienteServicioWhereUniqueInput
    data: XOR<ClienteServicioUpdateWithoutServicioInput, ClienteServicioUncheckedUpdateWithoutServicioInput>
  }

  export type ClienteServicioUpdateManyWithWhereWithoutServicioInput = {
    where: ClienteServicioScalarWhereInput
    data: XOR<ClienteServicioUpdateManyMutationInput, ClienteServicioUncheckedUpdateManyWithoutServicioInput>
  }

  export type ClienteServicioScalarWhereInput = {
    AND?: ClienteServicioScalarWhereInput | ClienteServicioScalarWhereInput[]
    OR?: ClienteServicioScalarWhereInput[]
    NOT?: ClienteServicioScalarWhereInput | ClienteServicioScalarWhereInput[]
    id?: IntFilter<"ClienteServicio"> | number
    clienteId?: IntFilter<"ClienteServicio"> | number
    servicioId?: IntFilter<"ClienteServicio"> | number
    fechaInicio?: DateTimeFilter<"ClienteServicio"> | Date | string
    fechaFin?: DateTimeNullableFilter<"ClienteServicio"> | Date | string | null
    estado?: EnumEstadoClienteServicioFilter<"ClienteServicio"> | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFilter<"ClienteServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"ClienteServicio"> | Date | string
  }

  export type FacturaServicioUpsertWithWhereUniqueWithoutServicioInput = {
    where: FacturaServicioWhereUniqueInput
    update: XOR<FacturaServicioUpdateWithoutServicioInput, FacturaServicioUncheckedUpdateWithoutServicioInput>
    create: XOR<FacturaServicioCreateWithoutServicioInput, FacturaServicioUncheckedCreateWithoutServicioInput>
  }

  export type FacturaServicioUpdateWithWhereUniqueWithoutServicioInput = {
    where: FacturaServicioWhereUniqueInput
    data: XOR<FacturaServicioUpdateWithoutServicioInput, FacturaServicioUncheckedUpdateWithoutServicioInput>
  }

  export type FacturaServicioUpdateManyWithWhereWithoutServicioInput = {
    where: FacturaServicioScalarWhereInput
    data: XOR<FacturaServicioUpdateManyMutationInput, FacturaServicioUncheckedUpdateManyWithoutServicioInput>
  }

  export type FacturaServicioScalarWhereInput = {
    AND?: FacturaServicioScalarWhereInput | FacturaServicioScalarWhereInput[]
    OR?: FacturaServicioScalarWhereInput[]
    NOT?: FacturaServicioScalarWhereInput | FacturaServicioScalarWhereInput[]
    id?: IntFilter<"FacturaServicio"> | number
    facturaId?: IntFilter<"FacturaServicio"> | number
    servicioId?: IntFilter<"FacturaServicio"> | number
    cantidad?: IntFilter<"FacturaServicio"> | number
    precioUnitario?: FloatFilter<"FacturaServicio"> | number
    total?: FloatFilter<"FacturaServicio"> | number
    creadoEn?: DateTimeFilter<"FacturaServicio"> | Date | string
    actualizadoEn?: DateTimeFilter<"FacturaServicio"> | Date | string
  }

  export type EmpresaCreateWithoutProveedorInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutProveedorInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutProveedorInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutProveedorInput, EmpresaUncheckedCreateWithoutProveedorInput>
  }

  export type EmpresaUpsertWithoutProveedorInput = {
    update: XOR<EmpresaUpdateWithoutProveedorInput, EmpresaUncheckedUpdateWithoutProveedorInput>
    create: XOR<EmpresaCreateWithoutProveedorInput, EmpresaUncheckedCreateWithoutProveedorInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutProveedorInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutProveedorInput, EmpresaUncheckedUpdateWithoutProveedorInput>
  }

  export type EmpresaUpdateWithoutProveedorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutProveedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ClienteInternetCreateWithoutServicioInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutServicioInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutServicioInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutServicioInput, ClienteInternetUncheckedCreateWithoutServicioInput>
  }

  export type ClienteInternetCreateManyServicioInputEnvelope = {
    data: ClienteInternetCreateManyServicioInput | ClienteInternetCreateManyServicioInput[]
    skipDuplicates?: boolean
  }

  export type EmpresaCreateWithoutServicioInternetInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutServicioInternetInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutServicioInternetInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutServicioInternetInput, EmpresaUncheckedCreateWithoutServicioInternetInput>
  }

  export type ClienteInternetUpsertWithWhereUniqueWithoutServicioInput = {
    where: ClienteInternetWhereUniqueInput
    update: XOR<ClienteInternetUpdateWithoutServicioInput, ClienteInternetUncheckedUpdateWithoutServicioInput>
    create: XOR<ClienteInternetCreateWithoutServicioInput, ClienteInternetUncheckedCreateWithoutServicioInput>
  }

  export type ClienteInternetUpdateWithWhereUniqueWithoutServicioInput = {
    where: ClienteInternetWhereUniqueInput
    data: XOR<ClienteInternetUpdateWithoutServicioInput, ClienteInternetUncheckedUpdateWithoutServicioInput>
  }

  export type ClienteInternetUpdateManyWithWhereWithoutServicioInput = {
    where: ClienteInternetScalarWhereInput
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyWithoutServicioInput>
  }

  export type EmpresaUpsertWithoutServicioInternetInput = {
    update: XOR<EmpresaUpdateWithoutServicioInternetInput, EmpresaUncheckedUpdateWithoutServicioInternetInput>
    create: XOR<EmpresaCreateWithoutServicioInternetInput, EmpresaUncheckedCreateWithoutServicioInternetInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutServicioInternetInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutServicioInternetInput, EmpresaUncheckedUpdateWithoutServicioInternetInput>
  }

  export type EmpresaUpdateWithoutServicioInternetInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutServicioInternetInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaCreateWithoutSaldoEmpresaInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutSaldoEmpresaInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutSaldoEmpresaInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutSaldoEmpresaInput, EmpresaUncheckedCreateWithoutSaldoEmpresaInput>
  }

  export type EmpresaUpsertWithoutSaldoEmpresaInput = {
    update: XOR<EmpresaUpdateWithoutSaldoEmpresaInput, EmpresaUncheckedUpdateWithoutSaldoEmpresaInput>
    create: XOR<EmpresaCreateWithoutSaldoEmpresaInput, EmpresaUncheckedCreateWithoutSaldoEmpresaInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutSaldoEmpresaInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutSaldoEmpresaInput, EmpresaUncheckedUpdateWithoutSaldoEmpresaInput>
  }

  export type EmpresaUpdateWithoutSaldoEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutSaldoEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaCreateWithoutSaldoCajaInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutSaldoCajaInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutSaldoCajaInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutSaldoCajaInput, EmpresaUncheckedCreateWithoutSaldoCajaInput>
  }

  export type RegistroCajaCreateWithoutCajaInput = {
    saldoInicial: number
    saldoFinal: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    usuario?: UsuarioCreateNestedOneWithoutRegistroCajaInput
  }

  export type RegistroCajaUncheckedCreateWithoutCajaInput = {
    id?: number
    saldoInicial: number
    saldoFinal: number
    usuarioId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RegistroCajaCreateOrConnectWithoutCajaInput = {
    where: RegistroCajaWhereUniqueInput
    create: XOR<RegistroCajaCreateWithoutCajaInput, RegistroCajaUncheckedCreateWithoutCajaInput>
  }

  export type RegistroCajaCreateManyCajaInputEnvelope = {
    data: RegistroCajaCreateManyCajaInput | RegistroCajaCreateManyCajaInput[]
    skipDuplicates?: boolean
  }

  export type EmpresaUpsertWithoutSaldoCajaInput = {
    update: XOR<EmpresaUpdateWithoutSaldoCajaInput, EmpresaUncheckedUpdateWithoutSaldoCajaInput>
    create: XOR<EmpresaCreateWithoutSaldoCajaInput, EmpresaUncheckedCreateWithoutSaldoCajaInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutSaldoCajaInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutSaldoCajaInput, EmpresaUncheckedUpdateWithoutSaldoCajaInput>
  }

  export type EmpresaUpdateWithoutSaldoCajaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutSaldoCajaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type RegistroCajaUpsertWithWhereUniqueWithoutCajaInput = {
    where: RegistroCajaWhereUniqueInput
    update: XOR<RegistroCajaUpdateWithoutCajaInput, RegistroCajaUncheckedUpdateWithoutCajaInput>
    create: XOR<RegistroCajaCreateWithoutCajaInput, RegistroCajaUncheckedCreateWithoutCajaInput>
  }

  export type RegistroCajaUpdateWithWhereUniqueWithoutCajaInput = {
    where: RegistroCajaWhereUniqueInput
    data: XOR<RegistroCajaUpdateWithoutCajaInput, RegistroCajaUncheckedUpdateWithoutCajaInput>
  }

  export type RegistroCajaUpdateManyWithWhereWithoutCajaInput = {
    where: RegistroCajaScalarWhereInput
    data: XOR<RegistroCajaUpdateManyMutationInput, RegistroCajaUncheckedUpdateManyWithoutCajaInput>
  }

  export type RegistroCajaScalarWhereInput = {
    AND?: RegistroCajaScalarWhereInput | RegistroCajaScalarWhereInput[]
    OR?: RegistroCajaScalarWhereInput[]
    NOT?: RegistroCajaScalarWhereInput | RegistroCajaScalarWhereInput[]
    id?: IntFilter<"RegistroCaja"> | number
    saldoInicial?: FloatFilter<"RegistroCaja"> | number
    saldoFinal?: FloatFilter<"RegistroCaja"> | number
    usuarioId?: IntNullableFilter<"RegistroCaja"> | number | null
    cajaId?: IntNullableFilter<"RegistroCaja"> | number | null
    creadoEn?: DateTimeFilter<"RegistroCaja"> | Date | string
    actualizadoEn?: DateTimeFilter<"RegistroCaja"> | Date | string
  }

  export type UsuarioCreateWithoutRegistroCajaInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
  }

  export type UsuarioUncheckedCreateWithoutRegistroCajaInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
  }

  export type UsuarioCreateOrConnectWithoutRegistroCajaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRegistroCajaInput, UsuarioUncheckedCreateWithoutRegistroCajaInput>
  }

  export type SaldoCajaCreateWithoutRegistrosCajaInput = {
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutSaldoCajaInput
  }

  export type SaldoCajaUncheckedCreateWithoutRegistrosCajaInput = {
    id?: number
    saldo?: number
    egreso?: number
    totalIngresos: number
    totalEgresos: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type SaldoCajaCreateOrConnectWithoutRegistrosCajaInput = {
    where: SaldoCajaWhereUniqueInput
    create: XOR<SaldoCajaCreateWithoutRegistrosCajaInput, SaldoCajaUncheckedCreateWithoutRegistrosCajaInput>
  }

  export type UsuarioUpsertWithoutRegistroCajaInput = {
    update: XOR<UsuarioUpdateWithoutRegistroCajaInput, UsuarioUncheckedUpdateWithoutRegistroCajaInput>
    create: XOR<UsuarioCreateWithoutRegistroCajaInput, UsuarioUncheckedCreateWithoutRegistroCajaInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRegistroCajaInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRegistroCajaInput, UsuarioUncheckedUpdateWithoutRegistroCajaInput>
  }

  export type UsuarioUpdateWithoutRegistroCajaInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRegistroCajaInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
  }

  export type SaldoCajaUpsertWithoutRegistrosCajaInput = {
    update: XOR<SaldoCajaUpdateWithoutRegistrosCajaInput, SaldoCajaUncheckedUpdateWithoutRegistrosCajaInput>
    create: XOR<SaldoCajaCreateWithoutRegistrosCajaInput, SaldoCajaUncheckedCreateWithoutRegistrosCajaInput>
    where?: SaldoCajaWhereInput
  }

  export type SaldoCajaUpdateToOneWithWhereWithoutRegistrosCajaInput = {
    where?: SaldoCajaWhereInput
    data: XOR<SaldoCajaUpdateWithoutRegistrosCajaInput, SaldoCajaUncheckedUpdateWithoutRegistrosCajaInput>
  }

  export type SaldoCajaUpdateWithoutRegistrosCajaInput = {
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutSaldoCajaNestedInput
  }

  export type SaldoCajaUncheckedUpdateWithoutRegistrosCajaInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldo?: FloatFieldUpdateOperationsInput | number
    egreso?: FloatFieldUpdateOperationsInput | number
    totalIngresos?: FloatFieldUpdateOperationsInput | number
    totalEgresos?: FloatFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetCreateWithoutClienteServicioInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutClienteServicioInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutClienteServicioInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutClienteServicioInput, ClienteInternetUncheckedCreateWithoutClienteServicioInput>
  }

  export type ServicioCreateWithoutClientesInput = {
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
    empresa: EmpresaCreateNestedOneWithoutServicioInput
    FacturaServicio?: FacturaServicioCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutClientesInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    tipoServicioId: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    FacturaServicio?: FacturaServicioUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutClientesInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutClientesInput, ServicioUncheckedCreateWithoutClientesInput>
  }

  export type ClienteInternetUpsertWithoutClienteServicioInput = {
    update: XOR<ClienteInternetUpdateWithoutClienteServicioInput, ClienteInternetUncheckedUpdateWithoutClienteServicioInput>
    create: XOR<ClienteInternetCreateWithoutClienteServicioInput, ClienteInternetUncheckedCreateWithoutClienteServicioInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutClienteServicioInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutClienteServicioInput, ClienteInternetUncheckedUpdateWithoutClienteServicioInput>
  }

  export type ClienteInternetUpdateWithoutClienteServicioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutClienteServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ServicioUpsertWithoutClientesInput = {
    update: XOR<ServicioUpdateWithoutClientesInput, ServicioUncheckedUpdateWithoutClientesInput>
    create: XOR<ServicioCreateWithoutClientesInput, ServicioUncheckedCreateWithoutClientesInput>
    where?: ServicioWhereInput
  }

  export type ServicioUpdateToOneWithWhereWithoutClientesInput = {
    where?: ServicioWhereInput
    data: XOR<ServicioUpdateWithoutClientesInput, ServicioUncheckedUpdateWithoutClientesInput>
  }

  export type ServicioUpdateWithoutClientesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    FacturaServicio?: FacturaServicioUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type EmpresaCreateWithoutFacturaInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutFacturaInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutFacturaInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutFacturaInput, EmpresaUncheckedCreateWithoutFacturaInput>
  }

  export type ClienteInternetCreateWithoutFacturaInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutFacturaInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutFacturaInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutFacturaInput, ClienteInternetUncheckedCreateWithoutFacturaInput>
  }

  export type FacturaServicioCreateWithoutFacturaInput = {
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicio: ServicioCreateNestedOneWithoutFacturaServicioInput
  }

  export type FacturaServicioUncheckedCreateWithoutFacturaInput = {
    id?: number
    servicioId: number
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaServicioCreateOrConnectWithoutFacturaInput = {
    where: FacturaServicioWhereUniqueInput
    create: XOR<FacturaServicioCreateWithoutFacturaInput, FacturaServicioUncheckedCreateWithoutFacturaInput>
  }

  export type FacturaServicioCreateManyFacturaInputEnvelope = {
    data: FacturaServicioCreateManyFacturaInput | FacturaServicioCreateManyFacturaInput[]
    skipDuplicates?: boolean
  }

  export type PagoFacturaCreateWithoutFacturaInput = {
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutPagoFacturaInput
  }

  export type PagoFacturaUncheckedCreateWithoutFacturaInput = {
    id?: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaCreateOrConnectWithoutFacturaInput = {
    where: PagoFacturaWhereUniqueInput
    create: XOR<PagoFacturaCreateWithoutFacturaInput, PagoFacturaUncheckedCreateWithoutFacturaInput>
  }

  export type PagoFacturaCreateManyFacturaInputEnvelope = {
    data: PagoFacturaCreateManyFacturaInput | PagoFacturaCreateManyFacturaInput[]
    skipDuplicates?: boolean
  }

  export type EmpresaUpsertWithoutFacturaInput = {
    update: XOR<EmpresaUpdateWithoutFacturaInput, EmpresaUncheckedUpdateWithoutFacturaInput>
    create: XOR<EmpresaCreateWithoutFacturaInput, EmpresaUncheckedCreateWithoutFacturaInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutFacturaInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutFacturaInput, EmpresaUncheckedUpdateWithoutFacturaInput>
  }

  export type EmpresaUpdateWithoutFacturaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ClienteInternetUpsertWithoutFacturaInput = {
    update: XOR<ClienteInternetUpdateWithoutFacturaInput, ClienteInternetUncheckedUpdateWithoutFacturaInput>
    create: XOR<ClienteInternetCreateWithoutFacturaInput, ClienteInternetUncheckedCreateWithoutFacturaInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutFacturaInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutFacturaInput, ClienteInternetUncheckedUpdateWithoutFacturaInput>
  }

  export type ClienteInternetUpdateWithoutFacturaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type FacturaServicioUpsertWithWhereUniqueWithoutFacturaInput = {
    where: FacturaServicioWhereUniqueInput
    update: XOR<FacturaServicioUpdateWithoutFacturaInput, FacturaServicioUncheckedUpdateWithoutFacturaInput>
    create: XOR<FacturaServicioCreateWithoutFacturaInput, FacturaServicioUncheckedCreateWithoutFacturaInput>
  }

  export type FacturaServicioUpdateWithWhereUniqueWithoutFacturaInput = {
    where: FacturaServicioWhereUniqueInput
    data: XOR<FacturaServicioUpdateWithoutFacturaInput, FacturaServicioUncheckedUpdateWithoutFacturaInput>
  }

  export type FacturaServicioUpdateManyWithWhereWithoutFacturaInput = {
    where: FacturaServicioScalarWhereInput
    data: XOR<FacturaServicioUpdateManyMutationInput, FacturaServicioUncheckedUpdateManyWithoutFacturaInput>
  }

  export type PagoFacturaUpsertWithWhereUniqueWithoutFacturaInput = {
    where: PagoFacturaWhereUniqueInput
    update: XOR<PagoFacturaUpdateWithoutFacturaInput, PagoFacturaUncheckedUpdateWithoutFacturaInput>
    create: XOR<PagoFacturaCreateWithoutFacturaInput, PagoFacturaUncheckedCreateWithoutFacturaInput>
  }

  export type PagoFacturaUpdateWithWhereUniqueWithoutFacturaInput = {
    where: PagoFacturaWhereUniqueInput
    data: XOR<PagoFacturaUpdateWithoutFacturaInput, PagoFacturaUncheckedUpdateWithoutFacturaInput>
  }

  export type PagoFacturaUpdateManyWithWhereWithoutFacturaInput = {
    where: PagoFacturaScalarWhereInput
    data: XOR<PagoFacturaUpdateManyMutationInput, PagoFacturaUncheckedUpdateManyWithoutFacturaInput>
  }

  export type PagoFacturaScalarWhereInput = {
    AND?: PagoFacturaScalarWhereInput | PagoFacturaScalarWhereInput[]
    OR?: PagoFacturaScalarWhereInput[]
    NOT?: PagoFacturaScalarWhereInput | PagoFacturaScalarWhereInput[]
    id?: IntFilter<"PagoFactura"> | number
    facturaId?: IntFilter<"PagoFactura"> | number
    clienteId?: IntFilter<"PagoFactura"> | number
    montoPagado?: FloatFilter<"PagoFactura"> | number
    metodoPago?: EnumMetodoPagoFilter<"PagoFactura"> | $Enums.MetodoPago
    fechaPago?: DateTimeFilter<"PagoFactura"> | Date | string
    creadoEn?: DateTimeFilter<"PagoFactura"> | Date | string
  }

  export type FacturaCreateWithoutPagosInput = {
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturaInput
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInput
    servicios?: FacturaServicioCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUncheckedCreateWithoutPagosInput = {
    id?: number
    empresaId: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicios?: FacturaServicioUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaCreateOrConnectWithoutPagosInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutPagosInput, FacturaUncheckedCreateWithoutPagosInput>
  }

  export type ClienteInternetCreateWithoutPagoFacturaInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutPagoFacturaInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutPagoFacturaInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutPagoFacturaInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInput>
  }

  export type FacturaUpsertWithoutPagosInput = {
    update: XOR<FacturaUpdateWithoutPagosInput, FacturaUncheckedUpdateWithoutPagosInput>
    create: XOR<FacturaCreateWithoutPagosInput, FacturaUncheckedCreateWithoutPagosInput>
    where?: FacturaWhereInput
  }

  export type FacturaUpdateToOneWithWhereWithoutPagosInput = {
    where?: FacturaWhereInput
    data: XOR<FacturaUpdateWithoutPagosInput, FacturaUncheckedUpdateWithoutPagosInput>
  }

  export type FacturaUpdateWithoutPagosInput = {
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturaNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaNestedInput
    servicios?: FacturaServicioUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateWithoutPagosInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: FacturaServicioUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type ClienteInternetUpsertWithoutPagoFacturaInput = {
    update: XOR<ClienteInternetUpdateWithoutPagoFacturaInput, ClienteInternetUncheckedUpdateWithoutPagoFacturaInput>
    create: XOR<ClienteInternetCreateWithoutPagoFacturaInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutPagoFacturaInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutPagoFacturaInput, ClienteInternetUncheckedUpdateWithoutPagoFacturaInput>
  }

  export type ClienteInternetUpdateWithoutPagoFacturaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutPagoFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type EmpresaCreateWithoutFacturasInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutFacturasInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutFacturasInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutFacturasInput, EmpresaUncheckedCreateWithoutFacturasInput>
  }

  export type ClienteInternetCreateWithoutFacturaInternetInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutFacturaInternetInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutFacturaInternetInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutFacturaInternetInput, ClienteInternetUncheckedCreateWithoutFacturaInternetInput>
  }

  export type PagoFacturaInternetCreateWithoutFacturaInternetInput = {
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
    cliente: ClienteInternetCreateNestedOneWithoutPagoFacturaInternetInput
  }

  export type PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput = {
    id?: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaInternetCreateOrConnectWithoutFacturaInternetInput = {
    where: PagoFacturaInternetWhereUniqueInput
    create: XOR<PagoFacturaInternetCreateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput>
  }

  export type PagoFacturaInternetCreateManyFacturaInternetInputEnvelope = {
    data: PagoFacturaInternetCreateManyFacturaInternetInput | PagoFacturaInternetCreateManyFacturaInternetInput[]
    skipDuplicates?: boolean
  }

  export type EmpresaUpsertWithoutFacturasInput = {
    update: XOR<EmpresaUpdateWithoutFacturasInput, EmpresaUncheckedUpdateWithoutFacturasInput>
    create: XOR<EmpresaCreateWithoutFacturasInput, EmpresaUncheckedCreateWithoutFacturasInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutFacturasInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutFacturasInput, EmpresaUncheckedUpdateWithoutFacturasInput>
  }

  export type EmpresaUpdateWithoutFacturasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutFacturasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ClienteInternetUpsertWithoutFacturaInternetInput = {
    update: XOR<ClienteInternetUpdateWithoutFacturaInternetInput, ClienteInternetUncheckedUpdateWithoutFacturaInternetInput>
    create: XOR<ClienteInternetCreateWithoutFacturaInternetInput, ClienteInternetUncheckedCreateWithoutFacturaInternetInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutFacturaInternetInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutFacturaInternetInput, ClienteInternetUncheckedUpdateWithoutFacturaInternetInput>
  }

  export type ClienteInternetUpdateWithoutFacturaInternetInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutFacturaInternetInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type PagoFacturaInternetUpsertWithWhereUniqueWithoutFacturaInternetInput = {
    where: PagoFacturaInternetWhereUniqueInput
    update: XOR<PagoFacturaInternetUpdateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedUpdateWithoutFacturaInternetInput>
    create: XOR<PagoFacturaInternetCreateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedCreateWithoutFacturaInternetInput>
  }

  export type PagoFacturaInternetUpdateWithWhereUniqueWithoutFacturaInternetInput = {
    where: PagoFacturaInternetWhereUniqueInput
    data: XOR<PagoFacturaInternetUpdateWithoutFacturaInternetInput, PagoFacturaInternetUncheckedUpdateWithoutFacturaInternetInput>
  }

  export type PagoFacturaInternetUpdateManyWithWhereWithoutFacturaInternetInput = {
    where: PagoFacturaInternetScalarWhereInput
    data: XOR<PagoFacturaInternetUpdateManyMutationInput, PagoFacturaInternetUncheckedUpdateManyWithoutFacturaInternetInput>
  }

  export type PagoFacturaInternetScalarWhereInput = {
    AND?: PagoFacturaInternetScalarWhereInput | PagoFacturaInternetScalarWhereInput[]
    OR?: PagoFacturaInternetScalarWhereInput[]
    NOT?: PagoFacturaInternetScalarWhereInput | PagoFacturaInternetScalarWhereInput[]
    id?: IntFilter<"PagoFacturaInternet"> | number
    facturaInternetId?: IntFilter<"PagoFacturaInternet"> | number
    clienteId?: IntFilter<"PagoFacturaInternet"> | number
    montoPagado?: FloatFilter<"PagoFacturaInternet"> | number
    metodoPago?: EnumMetodoPagoFacturaInternetFilter<"PagoFacturaInternet"> | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFilter<"PagoFacturaInternet"> | Date | string
    creadoEn?: DateTimeFilter<"PagoFacturaInternet"> | Date | string
  }

  export type FacturaInternetCreateWithoutPagosInput = {
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturasInput
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInternetInput
  }

  export type FacturaInternetUncheckedCreateWithoutPagosInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    empresaId: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    clienteId: number
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaInternetCreateOrConnectWithoutPagosInput = {
    where: FacturaInternetWhereUniqueInput
    create: XOR<FacturaInternetCreateWithoutPagosInput, FacturaInternetUncheckedCreateWithoutPagosInput>
  }

  export type ClienteInternetCreateWithoutPagoFacturaInternetInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutPagoFacturaInternetInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutPagoFacturaInternetInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutPagoFacturaInternetInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInternetInput>
  }

  export type FacturaInternetUpsertWithoutPagosInput = {
    update: XOR<FacturaInternetUpdateWithoutPagosInput, FacturaInternetUncheckedUpdateWithoutPagosInput>
    create: XOR<FacturaInternetCreateWithoutPagosInput, FacturaInternetUncheckedCreateWithoutPagosInput>
    where?: FacturaInternetWhereInput
  }

  export type FacturaInternetUpdateToOneWithWhereWithoutPagosInput = {
    where?: FacturaInternetWhereInput
    data: XOR<FacturaInternetUpdateWithoutPagosInput, FacturaInternetUncheckedUpdateWithoutPagosInput>
  }

  export type FacturaInternetUpdateWithoutPagosInput = {
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturasNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetUncheckedUpdateWithoutPagosInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFieldUpdateOperationsInput | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetUpsertWithoutPagoFacturaInternetInput = {
    update: XOR<ClienteInternetUpdateWithoutPagoFacturaInternetInput, ClienteInternetUncheckedUpdateWithoutPagoFacturaInternetInput>
    create: XOR<ClienteInternetCreateWithoutPagoFacturaInternetInput, ClienteInternetUncheckedCreateWithoutPagoFacturaInternetInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutPagoFacturaInternetInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutPagoFacturaInternetInput, ClienteInternetUncheckedUpdateWithoutPagoFacturaInternetInput>
  }

  export type ClienteInternetUpdateWithoutPagoFacturaInternetInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutPagoFacturaInternetInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type FacturaCreateWithoutServiciosInput = {
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturaInput
    cliente: ClienteInternetCreateNestedOneWithoutFacturaInput
    pagos?: PagoFacturaCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUncheckedCreateWithoutServiciosInput = {
    id?: number
    empresaId: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    pagos?: PagoFacturaUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaCreateOrConnectWithoutServiciosInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutServiciosInput, FacturaUncheckedCreateWithoutServiciosInput>
  }

  export type ServicioCreateWithoutFacturaServicioInput = {
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    tipoServicio: TipoServicioCreateNestedOneWithoutServiciosInput
    empresa: EmpresaCreateNestedOneWithoutServicioInput
    clientes?: ClienteServicioCreateNestedManyWithoutServicioInput
  }

  export type ServicioUncheckedCreateWithoutFacturaServicioInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    tipoServicioId: number
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    clientes?: ClienteServicioUncheckedCreateNestedManyWithoutServicioInput
  }

  export type ServicioCreateOrConnectWithoutFacturaServicioInput = {
    where: ServicioWhereUniqueInput
    create: XOR<ServicioCreateWithoutFacturaServicioInput, ServicioUncheckedCreateWithoutFacturaServicioInput>
  }

  export type FacturaUpsertWithoutServiciosInput = {
    update: XOR<FacturaUpdateWithoutServiciosInput, FacturaUncheckedUpdateWithoutServiciosInput>
    create: XOR<FacturaCreateWithoutServiciosInput, FacturaUncheckedCreateWithoutServiciosInput>
    where?: FacturaWhereInput
  }

  export type FacturaUpdateToOneWithWhereWithoutServiciosInput = {
    where?: FacturaWhereInput
    data: XOR<FacturaUpdateWithoutServiciosInput, FacturaUncheckedUpdateWithoutServiciosInput>
  }

  export type FacturaUpdateWithoutServiciosInput = {
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturaNestedInput
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaNestedInput
    pagos?: PagoFacturaUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateWithoutServiciosInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    pagos?: PagoFacturaUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type ServicioUpsertWithoutFacturaServicioInput = {
    update: XOR<ServicioUpdateWithoutFacturaServicioInput, ServicioUncheckedUpdateWithoutFacturaServicioInput>
    create: XOR<ServicioCreateWithoutFacturaServicioInput, ServicioUncheckedCreateWithoutFacturaServicioInput>
    where?: ServicioWhereInput
  }

  export type ServicioUpdateToOneWithWhereWithoutFacturaServicioInput = {
    where?: ServicioWhereInput
    data: XOR<ServicioUpdateWithoutFacturaServicioInput, ServicioUncheckedUpdateWithoutFacturaServicioInput>
  }

  export type ServicioUpdateWithoutFacturaServicioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutServicioNestedInput
    clientes?: ClienteServicioUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutFacturaServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteServicioUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ClienteInternetCreateWithoutIPInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutIPInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutIPInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutIPInput, ClienteInternetUncheckedCreateWithoutIPInput>
  }

  export type ClienteInternetUpsertWithoutIPInput = {
    update: XOR<ClienteInternetUpdateWithoutIPInput, ClienteInternetUncheckedUpdateWithoutIPInput>
    create: XOR<ClienteInternetCreateWithoutIPInput, ClienteInternetUncheckedCreateWithoutIPInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutIPInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutIPInput, ClienteInternetUncheckedUpdateWithoutIPInput>
  }

  export type ClienteInternetUpdateWithoutIPInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutIPInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetCreateWithoutFotosInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutFotosInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutFotosInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutFotosInput, ClienteInternetUncheckedCreateWithoutFotosInput>
  }

  export type ClienteInternetUpsertWithoutFotosInput = {
    update: XOR<ClienteInternetUpdateWithoutFotosInput, ClienteInternetUncheckedUpdateWithoutFotosInput>
    create: XOR<ClienteInternetCreateWithoutFotosInput, ClienteInternetUncheckedCreateWithoutFotosInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutFotosInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutFotosInput, ClienteInternetUncheckedUpdateWithoutFotosInput>
  }

  export type ClienteInternetUpdateWithoutFotosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutFotosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type UsuarioCreateWithoutClientesAsesoradosInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutClientesAsesoradosInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutClientesAsesoradosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutClientesAsesoradosInput, UsuarioUncheckedCreateWithoutClientesAsesoradosInput>
  }

  export type ServicioInternetCreateWithoutClientesInput = {
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutServicioInternetInput
  }

  export type ServicioInternetUncheckedCreateWithoutClientesInput = {
    id?: number
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresaId: number
  }

  export type ServicioInternetCreateOrConnectWithoutClientesInput = {
    where: ServicioInternetWhereUniqueInput
    create: XOR<ServicioInternetCreateWithoutClientesInput, ServicioInternetUncheckedCreateWithoutClientesInput>
  }

  export type MunicipioCreateWithoutClientesInput = {
    nombre: string
    departamento: DepartamentoCreateNestedOneWithoutMunicipiosInput
  }

  export type MunicipioUncheckedCreateWithoutClientesInput = {
    id?: number
    nombre: string
    departamentoId: number
  }

  export type MunicipioCreateOrConnectWithoutClientesInput = {
    where: MunicipioWhereUniqueInput
    create: XOR<MunicipioCreateWithoutClientesInput, MunicipioUncheckedCreateWithoutClientesInput>
  }

  export type DepartamentoCreateWithoutClientesInput = {
    nombre: string
    municipios?: MunicipioCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUncheckedCreateWithoutClientesInput = {
    id?: number
    nombre: string
    municipios?: MunicipioUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoCreateOrConnectWithoutClientesInput = {
    where: DepartamentoWhereUniqueInput
    create: XOR<DepartamentoCreateWithoutClientesInput, DepartamentoUncheckedCreateWithoutClientesInput>
  }

  export type EmpresaCreateWithoutClientesInternetInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutClientesInternetInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutClientesInternetInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutClientesInternetInput, EmpresaUncheckedCreateWithoutClientesInternetInput>
  }

  export type RutaCreateWithoutClientesInput = {
    nombreRuta: string
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    cobrador: UsuarioCreateNestedOneWithoutRutaInput
    Empresa: EmpresaCreateNestedOneWithoutRutasInput
  }

  export type RutaUncheckedCreateWithoutClientesInput = {
    id?: number
    nombreRuta: string
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    EmpresaId: number
  }

  export type RutaCreateOrConnectWithoutClientesInput = {
    where: RutaWhereUniqueInput
    create: XOR<RutaCreateWithoutClientesInput, RutaUncheckedCreateWithoutClientesInput>
  }

  export type IPCreateWithoutClienteInput = {
    direccionIp?: string | null
  }

  export type IPUncheckedCreateWithoutClienteInput = {
    id?: number
    direccionIp?: string | null
  }

  export type IPCreateOrConnectWithoutClienteInput = {
    where: IPWhereUniqueInput
    create: XOR<IPCreateWithoutClienteInput, IPUncheckedCreateWithoutClienteInput>
  }

  export type UbicacionCreateWithoutClienteInput = {
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    empresa: EmpresaCreateNestedOneWithoutUbicacionInput
  }

  export type UbicacionUncheckedCreateWithoutClienteInput = {
    id?: number
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    empresaId: number
  }

  export type UbicacionCreateOrConnectWithoutClienteInput = {
    where: UbicacionWhereUniqueInput
    create: XOR<UbicacionCreateWithoutClienteInput, UbicacionUncheckedCreateWithoutClienteInput>
  }

  export type TicketSoporteCreateWithoutClienteInput = {
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    empresa: EmpresaCreateNestedOneWithoutTicketSoporteInput
    tecnico?: UsuarioCreateNestedOneWithoutTicketsAsignadosInput
    creadoPor?: UsuarioCreateNestedOneWithoutTicketsCreadosInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteUncheckedCreateWithoutClienteInput = {
    id?: number
    empresaId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteCreateOrConnectWithoutClienteInput = {
    where: TicketSoporteWhereUniqueInput
    create: XOR<TicketSoporteCreateWithoutClienteInput, TicketSoporteUncheckedCreateWithoutClienteInput>
  }

  export type TicketSoporteCreateManyClienteInputEnvelope = {
    data: TicketSoporteCreateManyClienteInput | TicketSoporteCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type saldoClienteCreateWithoutClienteInput = {
    saldoPendiente?: number | null
    saldoFavor?: number | null
    totalPagos?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type saldoClienteUncheckedCreateWithoutClienteInput = {
    id?: number
    saldoPendiente?: number | null
    saldoFavor?: number | null
    totalPagos?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type saldoClienteCreateOrConnectWithoutClienteInput = {
    where: saldoClienteWhereUniqueInput
    create: XOR<saldoClienteCreateWithoutClienteInput, saldoClienteUncheckedCreateWithoutClienteInput>
  }

  export type FotosCreateWithoutClienteInput = {
    nombreFoto: string
    url?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FotosUncheckedCreateWithoutClienteInput = {
    id?: number
    nombreFoto: string
    url?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FotosCreateOrConnectWithoutClienteInput = {
    where: FotosWhereUniqueInput
    create: XOR<FotosCreateWithoutClienteInput, FotosUncheckedCreateWithoutClienteInput>
  }

  export type FotosCreateManyClienteInputEnvelope = {
    data: FotosCreateManyClienteInput | FotosCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type ClienteServicioCreateWithoutClienteInput = {
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicio: ServicioCreateNestedOneWithoutClientesInput
  }

  export type ClienteServicioUncheckedCreateWithoutClienteInput = {
    id?: number
    servicioId: number
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteServicioCreateOrConnectWithoutClienteInput = {
    where: ClienteServicioWhereUniqueInput
    create: XOR<ClienteServicioCreateWithoutClienteInput, ClienteServicioUncheckedCreateWithoutClienteInput>
  }

  export type ClienteServicioCreateManyClienteInputEnvelope = {
    data: ClienteServicioCreateManyClienteInput | ClienteServicioCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type FacturaInternetCreateWithoutClienteInput = {
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturasInput
    pagos?: PagoFacturaInternetCreateNestedManyWithoutFacturaInternetInput
  }

  export type FacturaInternetUncheckedCreateWithoutClienteInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    empresaId: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    pagos?: PagoFacturaInternetUncheckedCreateNestedManyWithoutFacturaInternetInput
  }

  export type FacturaInternetCreateOrConnectWithoutClienteInput = {
    where: FacturaInternetWhereUniqueInput
    create: XOR<FacturaInternetCreateWithoutClienteInput, FacturaInternetUncheckedCreateWithoutClienteInput>
  }

  export type FacturaInternetCreateManyClienteInputEnvelope = {
    data: FacturaInternetCreateManyClienteInput | FacturaInternetCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type PagoFacturaInternetCreateWithoutClienteInput = {
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
    facturaInternet: FacturaInternetCreateNestedOneWithoutPagosInput
  }

  export type PagoFacturaInternetUncheckedCreateWithoutClienteInput = {
    id?: number
    facturaInternetId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaInternetCreateOrConnectWithoutClienteInput = {
    where: PagoFacturaInternetWhereUniqueInput
    create: XOR<PagoFacturaInternetCreateWithoutClienteInput, PagoFacturaInternetUncheckedCreateWithoutClienteInput>
  }

  export type PagoFacturaInternetCreateManyClienteInputEnvelope = {
    data: PagoFacturaInternetCreateManyClienteInput | PagoFacturaInternetCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type FacturaCreateWithoutClienteInput = {
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutFacturaInput
    servicios?: FacturaServicioCreateNestedManyWithoutFacturaInput
    pagos?: PagoFacturaCreateNestedManyWithoutFacturaInput
  }

  export type FacturaUncheckedCreateWithoutClienteInput = {
    id?: number
    empresaId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicios?: FacturaServicioUncheckedCreateNestedManyWithoutFacturaInput
    pagos?: PagoFacturaUncheckedCreateNestedManyWithoutFacturaInput
  }

  export type FacturaCreateOrConnectWithoutClienteInput = {
    where: FacturaWhereUniqueInput
    create: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput>
  }

  export type FacturaCreateManyClienteInputEnvelope = {
    data: FacturaCreateManyClienteInput | FacturaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type PagoFacturaCreateWithoutClienteInput = {
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
    factura: FacturaCreateNestedOneWithoutPagosInput
  }

  export type PagoFacturaUncheckedCreateWithoutClienteInput = {
    id?: number
    facturaId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaCreateOrConnectWithoutClienteInput = {
    where: PagoFacturaWhereUniqueInput
    create: XOR<PagoFacturaCreateWithoutClienteInput, PagoFacturaUncheckedCreateWithoutClienteInput>
  }

  export type PagoFacturaCreateManyClienteInputEnvelope = {
    data: PagoFacturaCreateManyClienteInput | PagoFacturaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutClientesAsesoradosInput = {
    update: XOR<UsuarioUpdateWithoutClientesAsesoradosInput, UsuarioUncheckedUpdateWithoutClientesAsesoradosInput>
    create: XOR<UsuarioCreateWithoutClientesAsesoradosInput, UsuarioUncheckedCreateWithoutClientesAsesoradosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutClientesAsesoradosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutClientesAsesoradosInput, UsuarioUncheckedUpdateWithoutClientesAsesoradosInput>
  }

  export type UsuarioUpdateWithoutClientesAsesoradosInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutClientesAsesoradosInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ServicioInternetUpsertWithoutClientesInput = {
    update: XOR<ServicioInternetUpdateWithoutClientesInput, ServicioInternetUncheckedUpdateWithoutClientesInput>
    create: XOR<ServicioInternetCreateWithoutClientesInput, ServicioInternetUncheckedCreateWithoutClientesInput>
    where?: ServicioInternetWhereInput
  }

  export type ServicioInternetUpdateToOneWithWhereWithoutClientesInput = {
    where?: ServicioInternetWhereInput
    data: XOR<ServicioInternetUpdateWithoutClientesInput, ServicioInternetUncheckedUpdateWithoutClientesInput>
  }

  export type ServicioInternetUpdateWithoutClientesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutServicioInternetNestedInput
  }

  export type ServicioInternetUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type MunicipioUpsertWithoutClientesInput = {
    update: XOR<MunicipioUpdateWithoutClientesInput, MunicipioUncheckedUpdateWithoutClientesInput>
    create: XOR<MunicipioCreateWithoutClientesInput, MunicipioUncheckedCreateWithoutClientesInput>
    where?: MunicipioWhereInput
  }

  export type MunicipioUpdateToOneWithWhereWithoutClientesInput = {
    where?: MunicipioWhereInput
    data: XOR<MunicipioUpdateWithoutClientesInput, MunicipioUncheckedUpdateWithoutClientesInput>
  }

  export type MunicipioUpdateWithoutClientesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    departamento?: DepartamentoUpdateOneRequiredWithoutMunicipiosNestedInput
  }

  export type MunicipioUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    departamentoId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartamentoUpsertWithoutClientesInput = {
    update: XOR<DepartamentoUpdateWithoutClientesInput, DepartamentoUncheckedUpdateWithoutClientesInput>
    create: XOR<DepartamentoCreateWithoutClientesInput, DepartamentoUncheckedCreateWithoutClientesInput>
    where?: DepartamentoWhereInput
  }

  export type DepartamentoUpdateToOneWithWhereWithoutClientesInput = {
    where?: DepartamentoWhereInput
    data: XOR<DepartamentoUpdateWithoutClientesInput, DepartamentoUncheckedUpdateWithoutClientesInput>
  }

  export type DepartamentoUpdateWithoutClientesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    municipios?: MunicipioUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    municipios?: MunicipioUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type EmpresaUpsertWithoutClientesInternetInput = {
    update: XOR<EmpresaUpdateWithoutClientesInternetInput, EmpresaUncheckedUpdateWithoutClientesInternetInput>
    create: XOR<EmpresaCreateWithoutClientesInternetInput, EmpresaUncheckedCreateWithoutClientesInternetInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutClientesInternetInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutClientesInternetInput, EmpresaUncheckedUpdateWithoutClientesInternetInput>
  }

  export type EmpresaUpdateWithoutClientesInternetInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutClientesInternetInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type RutaUpsertWithWhereUniqueWithoutClientesInput = {
    where: RutaWhereUniqueInput
    update: XOR<RutaUpdateWithoutClientesInput, RutaUncheckedUpdateWithoutClientesInput>
    create: XOR<RutaCreateWithoutClientesInput, RutaUncheckedCreateWithoutClientesInput>
  }

  export type RutaUpdateWithWhereUniqueWithoutClientesInput = {
    where: RutaWhereUniqueInput
    data: XOR<RutaUpdateWithoutClientesInput, RutaUncheckedUpdateWithoutClientesInput>
  }

  export type RutaUpdateManyWithWhereWithoutClientesInput = {
    where: RutaScalarWhereInput
    data: XOR<RutaUpdateManyMutationInput, RutaUncheckedUpdateManyWithoutClientesInput>
  }

  export type IPUpsertWithoutClienteInput = {
    update: XOR<IPUpdateWithoutClienteInput, IPUncheckedUpdateWithoutClienteInput>
    create: XOR<IPCreateWithoutClienteInput, IPUncheckedCreateWithoutClienteInput>
    where?: IPWhereInput
  }

  export type IPUpdateToOneWithWhereWithoutClienteInput = {
    where?: IPWhereInput
    data: XOR<IPUpdateWithoutClienteInput, IPUncheckedUpdateWithoutClienteInput>
  }

  export type IPUpdateWithoutClienteInput = {
    direccionIp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IPUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    direccionIp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UbicacionUpsertWithoutClienteInput = {
    update: XOR<UbicacionUpdateWithoutClienteInput, UbicacionUncheckedUpdateWithoutClienteInput>
    create: XOR<UbicacionCreateWithoutClienteInput, UbicacionUncheckedCreateWithoutClienteInput>
    where?: UbicacionWhereInput
  }

  export type UbicacionUpdateToOneWithWhereWithoutClienteInput = {
    where?: UbicacionWhereInput
    data: XOR<UbicacionUpdateWithoutClienteInput, UbicacionUncheckedUpdateWithoutClienteInput>
  }

  export type UbicacionUpdateWithoutClienteInput = {
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    empresa?: EmpresaUpdateOneRequiredWithoutUbicacionNestedInput
  }

  export type UbicacionUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
  }

  export type TicketSoporteUpsertWithWhereUniqueWithoutClienteInput = {
    where: TicketSoporteWhereUniqueInput
    update: XOR<TicketSoporteUpdateWithoutClienteInput, TicketSoporteUncheckedUpdateWithoutClienteInput>
    create: XOR<TicketSoporteCreateWithoutClienteInput, TicketSoporteUncheckedCreateWithoutClienteInput>
  }

  export type TicketSoporteUpdateWithWhereUniqueWithoutClienteInput = {
    where: TicketSoporteWhereUniqueInput
    data: XOR<TicketSoporteUpdateWithoutClienteInput, TicketSoporteUncheckedUpdateWithoutClienteInput>
  }

  export type TicketSoporteUpdateManyWithWhereWithoutClienteInput = {
    where: TicketSoporteScalarWhereInput
    data: XOR<TicketSoporteUpdateManyMutationInput, TicketSoporteUncheckedUpdateManyWithoutClienteInput>
  }

  export type saldoClienteUpsertWithoutClienteInput = {
    update: XOR<saldoClienteUpdateWithoutClienteInput, saldoClienteUncheckedUpdateWithoutClienteInput>
    create: XOR<saldoClienteCreateWithoutClienteInput, saldoClienteUncheckedCreateWithoutClienteInput>
    where?: saldoClienteWhereInput
  }

  export type saldoClienteUpdateToOneWithWhereWithoutClienteInput = {
    where?: saldoClienteWhereInput
    data: XOR<saldoClienteUpdateWithoutClienteInput, saldoClienteUncheckedUpdateWithoutClienteInput>
  }

  export type saldoClienteUpdateWithoutClienteInput = {
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoFavor?: NullableFloatFieldUpdateOperationsInput | number | null
    totalPagos?: NullableFloatFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type saldoClienteUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoFavor?: NullableFloatFieldUpdateOperationsInput | number | null
    totalPagos?: NullableFloatFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FotosUpsertWithWhereUniqueWithoutClienteInput = {
    where: FotosWhereUniqueInput
    update: XOR<FotosUpdateWithoutClienteInput, FotosUncheckedUpdateWithoutClienteInput>
    create: XOR<FotosCreateWithoutClienteInput, FotosUncheckedCreateWithoutClienteInput>
  }

  export type FotosUpdateWithWhereUniqueWithoutClienteInput = {
    where: FotosWhereUniqueInput
    data: XOR<FotosUpdateWithoutClienteInput, FotosUncheckedUpdateWithoutClienteInput>
  }

  export type FotosUpdateManyWithWhereWithoutClienteInput = {
    where: FotosScalarWhereInput
    data: XOR<FotosUpdateManyMutationInput, FotosUncheckedUpdateManyWithoutClienteInput>
  }

  export type FotosScalarWhereInput = {
    AND?: FotosScalarWhereInput | FotosScalarWhereInput[]
    OR?: FotosScalarWhereInput[]
    NOT?: FotosScalarWhereInput | FotosScalarWhereInput[]
    id?: IntFilter<"Fotos"> | number
    nombreFoto?: StringFilter<"Fotos"> | string
    url?: StringNullableFilter<"Fotos"> | string | null
    clienteId?: IntFilter<"Fotos"> | number
    creadoEn?: DateTimeFilter<"Fotos"> | Date | string
    actualizadoEn?: DateTimeFilter<"Fotos"> | Date | string
  }

  export type ClienteServicioUpsertWithWhereUniqueWithoutClienteInput = {
    where: ClienteServicioWhereUniqueInput
    update: XOR<ClienteServicioUpdateWithoutClienteInput, ClienteServicioUncheckedUpdateWithoutClienteInput>
    create: XOR<ClienteServicioCreateWithoutClienteInput, ClienteServicioUncheckedCreateWithoutClienteInput>
  }

  export type ClienteServicioUpdateWithWhereUniqueWithoutClienteInput = {
    where: ClienteServicioWhereUniqueInput
    data: XOR<ClienteServicioUpdateWithoutClienteInput, ClienteServicioUncheckedUpdateWithoutClienteInput>
  }

  export type ClienteServicioUpdateManyWithWhereWithoutClienteInput = {
    where: ClienteServicioScalarWhereInput
    data: XOR<ClienteServicioUpdateManyMutationInput, ClienteServicioUncheckedUpdateManyWithoutClienteInput>
  }

  export type FacturaInternetUpsertWithWhereUniqueWithoutClienteInput = {
    where: FacturaInternetWhereUniqueInput
    update: XOR<FacturaInternetUpdateWithoutClienteInput, FacturaInternetUncheckedUpdateWithoutClienteInput>
    create: XOR<FacturaInternetCreateWithoutClienteInput, FacturaInternetUncheckedCreateWithoutClienteInput>
  }

  export type FacturaInternetUpdateWithWhereUniqueWithoutClienteInput = {
    where: FacturaInternetWhereUniqueInput
    data: XOR<FacturaInternetUpdateWithoutClienteInput, FacturaInternetUncheckedUpdateWithoutClienteInput>
  }

  export type FacturaInternetUpdateManyWithWhereWithoutClienteInput = {
    where: FacturaInternetScalarWhereInput
    data: XOR<FacturaInternetUpdateManyMutationInput, FacturaInternetUncheckedUpdateManyWithoutClienteInput>
  }

  export type PagoFacturaInternetUpsertWithWhereUniqueWithoutClienteInput = {
    where: PagoFacturaInternetWhereUniqueInput
    update: XOR<PagoFacturaInternetUpdateWithoutClienteInput, PagoFacturaInternetUncheckedUpdateWithoutClienteInput>
    create: XOR<PagoFacturaInternetCreateWithoutClienteInput, PagoFacturaInternetUncheckedCreateWithoutClienteInput>
  }

  export type PagoFacturaInternetUpdateWithWhereUniqueWithoutClienteInput = {
    where: PagoFacturaInternetWhereUniqueInput
    data: XOR<PagoFacturaInternetUpdateWithoutClienteInput, PagoFacturaInternetUncheckedUpdateWithoutClienteInput>
  }

  export type PagoFacturaInternetUpdateManyWithWhereWithoutClienteInput = {
    where: PagoFacturaInternetScalarWhereInput
    data: XOR<PagoFacturaInternetUpdateManyMutationInput, PagoFacturaInternetUncheckedUpdateManyWithoutClienteInput>
  }

  export type FacturaUpsertWithWhereUniqueWithoutClienteInput = {
    where: FacturaWhereUniqueInput
    update: XOR<FacturaUpdateWithoutClienteInput, FacturaUncheckedUpdateWithoutClienteInput>
    create: XOR<FacturaCreateWithoutClienteInput, FacturaUncheckedCreateWithoutClienteInput>
  }

  export type FacturaUpdateWithWhereUniqueWithoutClienteInput = {
    where: FacturaWhereUniqueInput
    data: XOR<FacturaUpdateWithoutClienteInput, FacturaUncheckedUpdateWithoutClienteInput>
  }

  export type FacturaUpdateManyWithWhereWithoutClienteInput = {
    where: FacturaScalarWhereInput
    data: XOR<FacturaUpdateManyMutationInput, FacturaUncheckedUpdateManyWithoutClienteInput>
  }

  export type PagoFacturaUpsertWithWhereUniqueWithoutClienteInput = {
    where: PagoFacturaWhereUniqueInput
    update: XOR<PagoFacturaUpdateWithoutClienteInput, PagoFacturaUncheckedUpdateWithoutClienteInput>
    create: XOR<PagoFacturaCreateWithoutClienteInput, PagoFacturaUncheckedCreateWithoutClienteInput>
  }

  export type PagoFacturaUpdateWithWhereUniqueWithoutClienteInput = {
    where: PagoFacturaWhereUniqueInput
    data: XOR<PagoFacturaUpdateWithoutClienteInput, PagoFacturaUncheckedUpdateWithoutClienteInput>
  }

  export type PagoFacturaUpdateManyWithWhereWithoutClienteInput = {
    where: PagoFacturaScalarWhereInput
    data: XOR<PagoFacturaUpdateManyMutationInput, PagoFacturaUncheckedUpdateManyWithoutClienteInput>
  }

  export type ClienteInternetCreateWithoutSaldoClienteInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutSaldoClienteInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutSaldoClienteInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutSaldoClienteInput, ClienteInternetUncheckedCreateWithoutSaldoClienteInput>
  }

  export type ClienteInternetUpsertWithoutSaldoClienteInput = {
    update: XOR<ClienteInternetUpdateWithoutSaldoClienteInput, ClienteInternetUncheckedUpdateWithoutSaldoClienteInput>
    create: XOR<ClienteInternetCreateWithoutSaldoClienteInput, ClienteInternetUncheckedCreateWithoutSaldoClienteInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutSaldoClienteInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutSaldoClienteInput, ClienteInternetUncheckedUpdateWithoutSaldoClienteInput>
  }

  export type ClienteInternetUpdateWithoutSaldoClienteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutSaldoClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetCreateWithoutUbicacionInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutUbicacionInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutUbicacionInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutUbicacionInput, ClienteInternetUncheckedCreateWithoutUbicacionInput>
  }

  export type EmpresaCreateWithoutUbicacionInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutUbicacionInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutUbicacionInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutUbicacionInput, EmpresaUncheckedCreateWithoutUbicacionInput>
  }

  export type ClienteInternetUpsertWithoutUbicacionInput = {
    update: XOR<ClienteInternetUpdateWithoutUbicacionInput, ClienteInternetUncheckedUpdateWithoutUbicacionInput>
    create: XOR<ClienteInternetCreateWithoutUbicacionInput, ClienteInternetUncheckedCreateWithoutUbicacionInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutUbicacionInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutUbicacionInput, ClienteInternetUncheckedUpdateWithoutUbicacionInput>
  }

  export type ClienteInternetUpdateWithoutUbicacionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutUbicacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type EmpresaUpsertWithoutUbicacionInput = {
    update: XOR<EmpresaUpdateWithoutUbicacionInput, EmpresaUncheckedUpdateWithoutUbicacionInput>
    create: XOR<EmpresaCreateWithoutUbicacionInput, EmpresaUncheckedCreateWithoutUbicacionInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutUbicacionInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutUbicacionInput, EmpresaUncheckedUpdateWithoutUbicacionInput>
  }

  export type EmpresaUpdateWithoutUbicacionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutUbicacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type MunicipioCreateWithoutDepartamentoInput = {
    nombre: string
    clientes?: ClienteInternetCreateNestedManyWithoutMunicipioInput
  }

  export type MunicipioUncheckedCreateWithoutDepartamentoInput = {
    id?: number
    nombre: string
    clientes?: ClienteInternetUncheckedCreateNestedManyWithoutMunicipioInput
  }

  export type MunicipioCreateOrConnectWithoutDepartamentoInput = {
    where: MunicipioWhereUniqueInput
    create: XOR<MunicipioCreateWithoutDepartamentoInput, MunicipioUncheckedCreateWithoutDepartamentoInput>
  }

  export type MunicipioCreateManyDepartamentoInputEnvelope = {
    data: MunicipioCreateManyDepartamentoInput | MunicipioCreateManyDepartamentoInput[]
    skipDuplicates?: boolean
  }

  export type ClienteInternetCreateWithoutDepartamentoInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutDepartamentoInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutDepartamentoInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutDepartamentoInput, ClienteInternetUncheckedCreateWithoutDepartamentoInput>
  }

  export type ClienteInternetCreateManyDepartamentoInputEnvelope = {
    data: ClienteInternetCreateManyDepartamentoInput | ClienteInternetCreateManyDepartamentoInput[]
    skipDuplicates?: boolean
  }

  export type MunicipioUpsertWithWhereUniqueWithoutDepartamentoInput = {
    where: MunicipioWhereUniqueInput
    update: XOR<MunicipioUpdateWithoutDepartamentoInput, MunicipioUncheckedUpdateWithoutDepartamentoInput>
    create: XOR<MunicipioCreateWithoutDepartamentoInput, MunicipioUncheckedCreateWithoutDepartamentoInput>
  }

  export type MunicipioUpdateWithWhereUniqueWithoutDepartamentoInput = {
    where: MunicipioWhereUniqueInput
    data: XOR<MunicipioUpdateWithoutDepartamentoInput, MunicipioUncheckedUpdateWithoutDepartamentoInput>
  }

  export type MunicipioUpdateManyWithWhereWithoutDepartamentoInput = {
    where: MunicipioScalarWhereInput
    data: XOR<MunicipioUpdateManyMutationInput, MunicipioUncheckedUpdateManyWithoutDepartamentoInput>
  }

  export type MunicipioScalarWhereInput = {
    AND?: MunicipioScalarWhereInput | MunicipioScalarWhereInput[]
    OR?: MunicipioScalarWhereInput[]
    NOT?: MunicipioScalarWhereInput | MunicipioScalarWhereInput[]
    id?: IntFilter<"Municipio"> | number
    nombre?: StringFilter<"Municipio"> | string
    departamentoId?: IntFilter<"Municipio"> | number
  }

  export type ClienteInternetUpsertWithWhereUniqueWithoutDepartamentoInput = {
    where: ClienteInternetWhereUniqueInput
    update: XOR<ClienteInternetUpdateWithoutDepartamentoInput, ClienteInternetUncheckedUpdateWithoutDepartamentoInput>
    create: XOR<ClienteInternetCreateWithoutDepartamentoInput, ClienteInternetUncheckedCreateWithoutDepartamentoInput>
  }

  export type ClienteInternetUpdateWithWhereUniqueWithoutDepartamentoInput = {
    where: ClienteInternetWhereUniqueInput
    data: XOR<ClienteInternetUpdateWithoutDepartamentoInput, ClienteInternetUncheckedUpdateWithoutDepartamentoInput>
  }

  export type ClienteInternetUpdateManyWithWhereWithoutDepartamentoInput = {
    where: ClienteInternetScalarWhereInput
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyWithoutDepartamentoInput>
  }

  export type DepartamentoCreateWithoutMunicipiosInput = {
    nombre: string
    clientes?: ClienteInternetCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoUncheckedCreateWithoutMunicipiosInput = {
    id?: number
    nombre: string
    clientes?: ClienteInternetUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type DepartamentoCreateOrConnectWithoutMunicipiosInput = {
    where: DepartamentoWhereUniqueInput
    create: XOR<DepartamentoCreateWithoutMunicipiosInput, DepartamentoUncheckedCreateWithoutMunicipiosInput>
  }

  export type ClienteInternetCreateWithoutMunicipioInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutMunicipioInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutMunicipioInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutMunicipioInput, ClienteInternetUncheckedCreateWithoutMunicipioInput>
  }

  export type ClienteInternetCreateManyMunicipioInputEnvelope = {
    data: ClienteInternetCreateManyMunicipioInput | ClienteInternetCreateManyMunicipioInput[]
    skipDuplicates?: boolean
  }

  export type DepartamentoUpsertWithoutMunicipiosInput = {
    update: XOR<DepartamentoUpdateWithoutMunicipiosInput, DepartamentoUncheckedUpdateWithoutMunicipiosInput>
    create: XOR<DepartamentoCreateWithoutMunicipiosInput, DepartamentoUncheckedCreateWithoutMunicipiosInput>
    where?: DepartamentoWhereInput
  }

  export type DepartamentoUpdateToOneWithWhereWithoutMunicipiosInput = {
    where?: DepartamentoWhereInput
    data: XOR<DepartamentoUpdateWithoutMunicipiosInput, DepartamentoUncheckedUpdateWithoutMunicipiosInput>
  }

  export type DepartamentoUpdateWithoutMunicipiosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteInternetUpdateManyWithoutDepartamentoNestedInput
  }

  export type DepartamentoUncheckedUpdateWithoutMunicipiosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteInternetUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type ClienteInternetUpsertWithWhereUniqueWithoutMunicipioInput = {
    where: ClienteInternetWhereUniqueInput
    update: XOR<ClienteInternetUpdateWithoutMunicipioInput, ClienteInternetUncheckedUpdateWithoutMunicipioInput>
    create: XOR<ClienteInternetCreateWithoutMunicipioInput, ClienteInternetUncheckedCreateWithoutMunicipioInput>
  }

  export type ClienteInternetUpdateWithWhereUniqueWithoutMunicipioInput = {
    where: ClienteInternetWhereUniqueInput
    data: XOR<ClienteInternetUpdateWithoutMunicipioInput, ClienteInternetUncheckedUpdateWithoutMunicipioInput>
  }

  export type ClienteInternetUpdateManyWithWhereWithoutMunicipioInput = {
    where: ClienteInternetScalarWhereInput
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyWithoutMunicipioInput>
  }

  export type UsuarioCreateWithoutRutaInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutRutaInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutRutaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRutaInput, UsuarioUncheckedCreateWithoutRutaInput>
  }

  export type ClienteInternetCreateWithoutRutaInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutRutaInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutRutaInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutRutaInput, ClienteInternetUncheckedCreateWithoutRutaInput>
  }

  export type EmpresaCreateWithoutRutasInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutRutasInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutRutasInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutRutasInput, EmpresaUncheckedCreateWithoutRutasInput>
  }

  export type UsuarioUpsertWithoutRutaInput = {
    update: XOR<UsuarioUpdateWithoutRutaInput, UsuarioUncheckedUpdateWithoutRutaInput>
    create: XOR<UsuarioCreateWithoutRutaInput, UsuarioUncheckedCreateWithoutRutaInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRutaInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRutaInput, UsuarioUncheckedUpdateWithoutRutaInput>
  }

  export type UsuarioUpdateWithoutRutaInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRutaInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ClienteInternetUpsertWithWhereUniqueWithoutRutaInput = {
    where: ClienteInternetWhereUniqueInput
    update: XOR<ClienteInternetUpdateWithoutRutaInput, ClienteInternetUncheckedUpdateWithoutRutaInput>
    create: XOR<ClienteInternetCreateWithoutRutaInput, ClienteInternetUncheckedCreateWithoutRutaInput>
  }

  export type ClienteInternetUpdateWithWhereUniqueWithoutRutaInput = {
    where: ClienteInternetWhereUniqueInput
    data: XOR<ClienteInternetUpdateWithoutRutaInput, ClienteInternetUncheckedUpdateWithoutRutaInput>
  }

  export type ClienteInternetUpdateManyWithWhereWithoutRutaInput = {
    where: ClienteInternetScalarWhereInput
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyWithoutRutaInput>
  }

  export type EmpresaUpsertWithoutRutasInput = {
    update: XOR<EmpresaUpdateWithoutRutasInput, EmpresaUncheckedUpdateWithoutRutasInput>
    create: XOR<EmpresaCreateWithoutRutasInput, EmpresaUncheckedCreateWithoutRutasInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutRutasInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutRutasInput, EmpresaUncheckedUpdateWithoutRutasInput>
  }

  export type EmpresaUpdateWithoutRutasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutRutasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type ClienteInternetCreateWithoutTicketSoporteInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    asesor?: UsuarioCreateNestedOneWithoutClientesAsesoradosInput
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutTicketSoporteInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutTicketSoporteInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutTicketSoporteInput, ClienteInternetUncheckedCreateWithoutTicketSoporteInput>
  }

  export type EmpresaCreateWithoutTicketSoporteInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioCreateNestedManyWithoutEmpresaInput
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutTicketSoporteInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empleados?: UsuarioUncheckedCreateNestedManyWithoutEmpresaInput
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutTicketSoporteInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutTicketSoporteInput, EmpresaUncheckedCreateWithoutTicketSoporteInput>
  }

  export type UsuarioCreateWithoutTicketsAsignadosInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTicketsAsignadosInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTicketsAsignadosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTicketsAsignadosInput, UsuarioUncheckedCreateWithoutTicketsAsignadosInput>
  }

  export type UsuarioCreateWithoutTicketsCreadosInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTicketsCreadosInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutUsuarioInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTicketsCreadosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTicketsCreadosInput, UsuarioUncheckedCreateWithoutTicketsCreadosInput>
  }

  export type SeguimientoTicketCreateWithoutTicketInput = {
    descripcion: string
    fechaRegistro?: Date | string
    usuario: UsuarioCreateNestedOneWithoutSeguimientoTicketInput
  }

  export type SeguimientoTicketUncheckedCreateWithoutTicketInput = {
    id?: number
    usuarioId: number
    descripcion: string
    fechaRegistro?: Date | string
  }

  export type SeguimientoTicketCreateOrConnectWithoutTicketInput = {
    where: SeguimientoTicketWhereUniqueInput
    create: XOR<SeguimientoTicketCreateWithoutTicketInput, SeguimientoTicketUncheckedCreateWithoutTicketInput>
  }

  export type SeguimientoTicketCreateManyTicketInputEnvelope = {
    data: SeguimientoTicketCreateManyTicketInput | SeguimientoTicketCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type ClienteInternetUpsertWithoutTicketSoporteInput = {
    update: XOR<ClienteInternetUpdateWithoutTicketSoporteInput, ClienteInternetUncheckedUpdateWithoutTicketSoporteInput>
    create: XOR<ClienteInternetCreateWithoutTicketSoporteInput, ClienteInternetUncheckedCreateWithoutTicketSoporteInput>
    where?: ClienteInternetWhereInput
  }

  export type ClienteInternetUpdateToOneWithWhereWithoutTicketSoporteInput = {
    where?: ClienteInternetWhereInput
    data: XOR<ClienteInternetUpdateWithoutTicketSoporteInput, ClienteInternetUncheckedUpdateWithoutTicketSoporteInput>
  }

  export type ClienteInternetUpdateWithoutTicketSoporteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutTicketSoporteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type EmpresaUpsertWithoutTicketSoporteInput = {
    update: XOR<EmpresaUpdateWithoutTicketSoporteInput, EmpresaUncheckedUpdateWithoutTicketSoporteInput>
    create: XOR<EmpresaCreateWithoutTicketSoporteInput, EmpresaUncheckedCreateWithoutTicketSoporteInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutTicketSoporteInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutTicketSoporteInput, EmpresaUncheckedUpdateWithoutTicketSoporteInput>
  }

  export type EmpresaUpdateWithoutTicketSoporteInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutTicketSoporteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empleados?: UsuarioUncheckedUpdateManyWithoutEmpresaNestedInput
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type UsuarioUpsertWithoutTicketsAsignadosInput = {
    update: XOR<UsuarioUpdateWithoutTicketsAsignadosInput, UsuarioUncheckedUpdateWithoutTicketsAsignadosInput>
    create: XOR<UsuarioCreateWithoutTicketsAsignadosInput, UsuarioUncheckedCreateWithoutTicketsAsignadosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTicketsAsignadosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTicketsAsignadosInput, UsuarioUncheckedUpdateWithoutTicketsAsignadosInput>
  }

  export type UsuarioUpdateWithoutTicketsAsignadosInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTicketsAsignadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUpsertWithoutTicketsCreadosInput = {
    update: XOR<UsuarioUpdateWithoutTicketsCreadosInput, UsuarioUncheckedUpdateWithoutTicketsCreadosInput>
    create: XOR<UsuarioCreateWithoutTicketsCreadosInput, UsuarioUncheckedCreateWithoutTicketsCreadosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTicketsCreadosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTicketsCreadosInput, UsuarioUncheckedUpdateWithoutTicketsCreadosInput>
  }

  export type UsuarioUpdateWithoutTicketsCreadosInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTicketsCreadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type SeguimientoTicketUpsertWithWhereUniqueWithoutTicketInput = {
    where: SeguimientoTicketWhereUniqueInput
    update: XOR<SeguimientoTicketUpdateWithoutTicketInput, SeguimientoTicketUncheckedUpdateWithoutTicketInput>
    create: XOR<SeguimientoTicketCreateWithoutTicketInput, SeguimientoTicketUncheckedCreateWithoutTicketInput>
  }

  export type SeguimientoTicketUpdateWithWhereUniqueWithoutTicketInput = {
    where: SeguimientoTicketWhereUniqueInput
    data: XOR<SeguimientoTicketUpdateWithoutTicketInput, SeguimientoTicketUncheckedUpdateWithoutTicketInput>
  }

  export type SeguimientoTicketUpdateManyWithWhereWithoutTicketInput = {
    where: SeguimientoTicketScalarWhereInput
    data: XOR<SeguimientoTicketUpdateManyMutationInput, SeguimientoTicketUncheckedUpdateManyWithoutTicketInput>
  }

  export type SeguimientoTicketScalarWhereInput = {
    AND?: SeguimientoTicketScalarWhereInput | SeguimientoTicketScalarWhereInput[]
    OR?: SeguimientoTicketScalarWhereInput[]
    NOT?: SeguimientoTicketScalarWhereInput | SeguimientoTicketScalarWhereInput[]
    id?: IntFilter<"SeguimientoTicket"> | number
    ticketId?: IntFilter<"SeguimientoTicket"> | number
    usuarioId?: IntFilter<"SeguimientoTicket"> | number
    descripcion?: StringFilter<"SeguimientoTicket"> | string
    fechaRegistro?: DateTimeFilter<"SeguimientoTicket"> | Date | string
  }

  export type TicketSoporteCreateWithoutSeguimientoTicketInput = {
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    cliente: ClienteInternetCreateNestedOneWithoutTicketSoporteInput
    empresa: EmpresaCreateNestedOneWithoutTicketSoporteInput
    tecnico?: UsuarioCreateNestedOneWithoutTicketsAsignadosInput
    creadoPor?: UsuarioCreateNestedOneWithoutTicketsCreadosInput
  }

  export type TicketSoporteUncheckedCreateWithoutSeguimientoTicketInput = {
    id?: number
    clienteId: number
    empresaId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
  }

  export type TicketSoporteCreateOrConnectWithoutSeguimientoTicketInput = {
    where: TicketSoporteWhereUniqueInput
    create: XOR<TicketSoporteCreateWithoutSeguimientoTicketInput, TicketSoporteUncheckedCreateWithoutSeguimientoTicketInput>
  }

  export type UsuarioCreateWithoutSeguimientoTicketInput = {
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    empresa: EmpresaCreateNestedOneWithoutEmpleadosInput
    Ruta?: RutaCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteCreateNestedManyWithoutCreadoPorInput
    clientesAsesorados?: ClienteInternetCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutSeguimientoTicketInput = {
    id?: number
    empresaId: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    Ruta?: RutaUncheckedCreateNestedManyWithoutCobradorInput
    ticketsAsignados?: TicketSoporteUncheckedCreateNestedManyWithoutTecnicoInput
    ticketsCreados?: TicketSoporteUncheckedCreateNestedManyWithoutCreadoPorInput
    clientesAsesorados?: ClienteInternetUncheckedCreateNestedManyWithoutAsesorInput
    RegistroCaja?: RegistroCajaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutSeguimientoTicketInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSeguimientoTicketInput, UsuarioUncheckedCreateWithoutSeguimientoTicketInput>
  }

  export type TicketSoporteUpsertWithoutSeguimientoTicketInput = {
    update: XOR<TicketSoporteUpdateWithoutSeguimientoTicketInput, TicketSoporteUncheckedUpdateWithoutSeguimientoTicketInput>
    create: XOR<TicketSoporteCreateWithoutSeguimientoTicketInput, TicketSoporteUncheckedCreateWithoutSeguimientoTicketInput>
    where?: TicketSoporteWhereInput
  }

  export type TicketSoporteUpdateToOneWithWhereWithoutSeguimientoTicketInput = {
    where?: TicketSoporteWhereInput
    data: XOR<TicketSoporteUpdateWithoutSeguimientoTicketInput, TicketSoporteUncheckedUpdateWithoutSeguimientoTicketInput>
  }

  export type TicketSoporteUpdateWithoutSeguimientoTicketInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutTicketSoporteNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutTicketSoporteNestedInput
    tecnico?: UsuarioUpdateOneWithoutTicketsAsignadosNestedInput
    creadoPor?: UsuarioUpdateOneWithoutTicketsCreadosNestedInput
  }

  export type TicketSoporteUncheckedUpdateWithoutSeguimientoTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUpsertWithoutSeguimientoTicketInput = {
    update: XOR<UsuarioUpdateWithoutSeguimientoTicketInput, UsuarioUncheckedUpdateWithoutSeguimientoTicketInput>
    create: XOR<UsuarioCreateWithoutSeguimientoTicketInput, UsuarioUncheckedCreateWithoutSeguimientoTicketInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSeguimientoTicketInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSeguimientoTicketInput, UsuarioUncheckedUpdateWithoutSeguimientoTicketInput>
  }

  export type UsuarioUpdateWithoutSeguimientoTicketInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutEmpleadosNestedInput
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSeguimientoTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type EmpresaCreateWithoutEmpleadosInput = {
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    rutas?: RutaCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateWithoutEmpleadosInput = {
    id?: number
    nombre: string
    direccion?: string | null
    telefono?: string | null
    pbx?: string | null
    correo?: string | null
    sitioWeb?: string | null
    nit?: string | null
    logo1?: string | null
    logo2?: string | null
    logo3?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    rutas?: RutaUncheckedCreateNestedManyWithoutEmpresaInput
    clientesInternet?: ClienteInternetUncheckedCreateNestedManyWithoutEmpresaInput
    facturas?: FacturaInternetUncheckedCreateNestedManyWithoutEmpresaInput
    TicketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutEmpresaInput
    saldoEmpresa?: SaldoEmpresaUncheckedCreateNestedOneWithoutEmpresaInput
    saldoCaja?: SaldoCajaUncheckedCreateNestedOneWithoutEmpresaInput
    ServicioInternet?: ServicioInternetUncheckedCreateNestedManyWithoutEmpresaInput
    Ubicacion?: UbicacionUncheckedCreateNestedManyWithoutEmpresaInput
    Proveedor?: ProveedorUncheckedCreateNestedManyWithoutEmpresaInput
    Servicio?: ServicioUncheckedCreateNestedManyWithoutEmpresaInput
    Factura?: FacturaUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaCreateOrConnectWithoutEmpleadosInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutEmpleadosInput, EmpresaUncheckedCreateWithoutEmpleadosInput>
  }

  export type RutaCreateWithoutCobradorInput = {
    nombreRuta: string
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    Clientes?: ClienteInternetCreateNestedManyWithoutRutaInput
    Empresa: EmpresaCreateNestedOneWithoutRutasInput
  }

  export type RutaUncheckedCreateWithoutCobradorInput = {
    id?: number
    nombreRuta: string
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    EmpresaId: number
    Clientes?: ClienteInternetUncheckedCreateNestedManyWithoutRutaInput
  }

  export type RutaCreateOrConnectWithoutCobradorInput = {
    where: RutaWhereUniqueInput
    create: XOR<RutaCreateWithoutCobradorInput, RutaUncheckedCreateWithoutCobradorInput>
  }

  export type RutaCreateManyCobradorInputEnvelope = {
    data: RutaCreateManyCobradorInput | RutaCreateManyCobradorInput[]
    skipDuplicates?: boolean
  }

  export type TicketSoporteCreateWithoutTecnicoInput = {
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    cliente: ClienteInternetCreateNestedOneWithoutTicketSoporteInput
    empresa: EmpresaCreateNestedOneWithoutTicketSoporteInput
    creadoPor?: UsuarioCreateNestedOneWithoutTicketsCreadosInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteUncheckedCreateWithoutTecnicoInput = {
    id?: number
    clienteId: number
    empresaId: number
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteCreateOrConnectWithoutTecnicoInput = {
    where: TicketSoporteWhereUniqueInput
    create: XOR<TicketSoporteCreateWithoutTecnicoInput, TicketSoporteUncheckedCreateWithoutTecnicoInput>
  }

  export type TicketSoporteCreateManyTecnicoInputEnvelope = {
    data: TicketSoporteCreateManyTecnicoInput | TicketSoporteCreateManyTecnicoInput[]
    skipDuplicates?: boolean
  }

  export type TicketSoporteCreateWithoutCreadoPorInput = {
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    cliente: ClienteInternetCreateNestedOneWithoutTicketSoporteInput
    empresa: EmpresaCreateNestedOneWithoutTicketSoporteInput
    tecnico?: UsuarioCreateNestedOneWithoutTicketsAsignadosInput
    SeguimientoTicket?: SeguimientoTicketCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteUncheckedCreateWithoutCreadoPorInput = {
    id?: number
    clienteId: number
    empresaId: number
    tecnicoId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketSoporteCreateOrConnectWithoutCreadoPorInput = {
    where: TicketSoporteWhereUniqueInput
    create: XOR<TicketSoporteCreateWithoutCreadoPorInput, TicketSoporteUncheckedCreateWithoutCreadoPorInput>
  }

  export type TicketSoporteCreateManyCreadoPorInputEnvelope = {
    data: TicketSoporteCreateManyCreadoPorInput | TicketSoporteCreateManyCreadoPorInput[]
    skipDuplicates?: boolean
  }

  export type SeguimientoTicketCreateWithoutUsuarioInput = {
    descripcion: string
    fechaRegistro?: Date | string
    ticket: TicketSoporteCreateNestedOneWithoutSeguimientoTicketInput
  }

  export type SeguimientoTicketUncheckedCreateWithoutUsuarioInput = {
    id?: number
    ticketId: number
    descripcion: string
    fechaRegistro?: Date | string
  }

  export type SeguimientoTicketCreateOrConnectWithoutUsuarioInput = {
    where: SeguimientoTicketWhereUniqueInput
    create: XOR<SeguimientoTicketCreateWithoutUsuarioInput, SeguimientoTicketUncheckedCreateWithoutUsuarioInput>
  }

  export type SeguimientoTicketCreateManyUsuarioInputEnvelope = {
    data: SeguimientoTicketCreateManyUsuarioInput | SeguimientoTicketCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ClienteInternetCreateWithoutAsesorInput = {
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    servicio: ServicioInternetCreateNestedOneWithoutClientesInput
    municipio?: MunicipioCreateNestedOneWithoutClientesInput
    departamento?: DepartamentoCreateNestedOneWithoutClientesInput
    empresa: EmpresaCreateNestedOneWithoutClientesInternetInput
    ruta?: RutaCreateNestedManyWithoutClientesInput
    IP?: IPCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteCreateNestedOneWithoutClienteInput
    fotos?: FotosCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetCreateNestedManyWithoutClienteInput
    factura?: FacturaCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetUncheckedCreateWithoutAsesorInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    ruta?: RutaUncheckedCreateNestedManyWithoutClientesInput
    IP?: IPUncheckedCreateNestedOneWithoutClienteInput
    ubicacion?: UbicacionUncheckedCreateNestedOneWithoutClienteInput
    ticketSoporte?: TicketSoporteUncheckedCreateNestedManyWithoutClienteInput
    saldoCliente?: saldoClienteUncheckedCreateNestedOneWithoutClienteInput
    fotos?: FotosUncheckedCreateNestedManyWithoutClienteInput
    clienteServicio?: ClienteServicioUncheckedCreateNestedManyWithoutClienteInput
    facturaInternet?: FacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedCreateNestedManyWithoutClienteInput
    factura?: FacturaUncheckedCreateNestedManyWithoutClienteInput
    pagoFactura?: PagoFacturaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteInternetCreateOrConnectWithoutAsesorInput = {
    where: ClienteInternetWhereUniqueInput
    create: XOR<ClienteInternetCreateWithoutAsesorInput, ClienteInternetUncheckedCreateWithoutAsesorInput>
  }

  export type ClienteInternetCreateManyAsesorInputEnvelope = {
    data: ClienteInternetCreateManyAsesorInput | ClienteInternetCreateManyAsesorInput[]
    skipDuplicates?: boolean
  }

  export type RegistroCajaCreateWithoutUsuarioInput = {
    saldoInicial: number
    saldoFinal: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
    caja?: SaldoCajaCreateNestedOneWithoutRegistrosCajaInput
  }

  export type RegistroCajaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    saldoInicial: number
    saldoFinal: number
    cajaId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RegistroCajaCreateOrConnectWithoutUsuarioInput = {
    where: RegistroCajaWhereUniqueInput
    create: XOR<RegistroCajaCreateWithoutUsuarioInput, RegistroCajaUncheckedCreateWithoutUsuarioInput>
  }

  export type RegistroCajaCreateManyUsuarioInputEnvelope = {
    data: RegistroCajaCreateManyUsuarioInput | RegistroCajaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type EmpresaUpsertWithoutEmpleadosInput = {
    update: XOR<EmpresaUpdateWithoutEmpleadosInput, EmpresaUncheckedUpdateWithoutEmpleadosInput>
    create: XOR<EmpresaCreateWithoutEmpleadosInput, EmpresaUncheckedCreateWithoutEmpleadosInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutEmpleadosInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutEmpleadosInput, EmpresaUncheckedUpdateWithoutEmpleadosInput>
  }

  export type EmpresaUpdateWithoutEmpleadosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    rutas?: RutaUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateWithoutEmpleadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    pbx?: NullableStringFieldUpdateOperationsInput | string | null
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    sitioWeb?: NullableStringFieldUpdateOperationsInput | string | null
    nit?: NullableStringFieldUpdateOperationsInput | string | null
    logo1?: NullableStringFieldUpdateOperationsInput | string | null
    logo2?: NullableStringFieldUpdateOperationsInput | string | null
    logo3?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    rutas?: RutaUncheckedUpdateManyWithoutEmpresaNestedInput
    clientesInternet?: ClienteInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    facturas?: FacturaInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    TicketSoporte?: TicketSoporteUncheckedUpdateManyWithoutEmpresaNestedInput
    saldoEmpresa?: SaldoEmpresaUncheckedUpdateOneWithoutEmpresaNestedInput
    saldoCaja?: SaldoCajaUncheckedUpdateOneWithoutEmpresaNestedInput
    ServicioInternet?: ServicioInternetUncheckedUpdateManyWithoutEmpresaNestedInput
    Ubicacion?: UbicacionUncheckedUpdateManyWithoutEmpresaNestedInput
    Proveedor?: ProveedorUncheckedUpdateManyWithoutEmpresaNestedInput
    Servicio?: ServicioUncheckedUpdateManyWithoutEmpresaNestedInput
    Factura?: FacturaUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type RutaUpsertWithWhereUniqueWithoutCobradorInput = {
    where: RutaWhereUniqueInput
    update: XOR<RutaUpdateWithoutCobradorInput, RutaUncheckedUpdateWithoutCobradorInput>
    create: XOR<RutaCreateWithoutCobradorInput, RutaUncheckedCreateWithoutCobradorInput>
  }

  export type RutaUpdateWithWhereUniqueWithoutCobradorInput = {
    where: RutaWhereUniqueInput
    data: XOR<RutaUpdateWithoutCobradorInput, RutaUncheckedUpdateWithoutCobradorInput>
  }

  export type RutaUpdateManyWithWhereWithoutCobradorInput = {
    where: RutaScalarWhereInput
    data: XOR<RutaUpdateManyMutationInput, RutaUncheckedUpdateManyWithoutCobradorInput>
  }

  export type TicketSoporteUpsertWithWhereUniqueWithoutTecnicoInput = {
    where: TicketSoporteWhereUniqueInput
    update: XOR<TicketSoporteUpdateWithoutTecnicoInput, TicketSoporteUncheckedUpdateWithoutTecnicoInput>
    create: XOR<TicketSoporteCreateWithoutTecnicoInput, TicketSoporteUncheckedCreateWithoutTecnicoInput>
  }

  export type TicketSoporteUpdateWithWhereUniqueWithoutTecnicoInput = {
    where: TicketSoporteWhereUniqueInput
    data: XOR<TicketSoporteUpdateWithoutTecnicoInput, TicketSoporteUncheckedUpdateWithoutTecnicoInput>
  }

  export type TicketSoporteUpdateManyWithWhereWithoutTecnicoInput = {
    where: TicketSoporteScalarWhereInput
    data: XOR<TicketSoporteUpdateManyMutationInput, TicketSoporteUncheckedUpdateManyWithoutTecnicoInput>
  }

  export type TicketSoporteUpsertWithWhereUniqueWithoutCreadoPorInput = {
    where: TicketSoporteWhereUniqueInput
    update: XOR<TicketSoporteUpdateWithoutCreadoPorInput, TicketSoporteUncheckedUpdateWithoutCreadoPorInput>
    create: XOR<TicketSoporteCreateWithoutCreadoPorInput, TicketSoporteUncheckedCreateWithoutCreadoPorInput>
  }

  export type TicketSoporteUpdateWithWhereUniqueWithoutCreadoPorInput = {
    where: TicketSoporteWhereUniqueInput
    data: XOR<TicketSoporteUpdateWithoutCreadoPorInput, TicketSoporteUncheckedUpdateWithoutCreadoPorInput>
  }

  export type TicketSoporteUpdateManyWithWhereWithoutCreadoPorInput = {
    where: TicketSoporteScalarWhereInput
    data: XOR<TicketSoporteUpdateManyMutationInput, TicketSoporteUncheckedUpdateManyWithoutCreadoPorInput>
  }

  export type SeguimientoTicketUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: SeguimientoTicketWhereUniqueInput
    update: XOR<SeguimientoTicketUpdateWithoutUsuarioInput, SeguimientoTicketUncheckedUpdateWithoutUsuarioInput>
    create: XOR<SeguimientoTicketCreateWithoutUsuarioInput, SeguimientoTicketUncheckedCreateWithoutUsuarioInput>
  }

  export type SeguimientoTicketUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: SeguimientoTicketWhereUniqueInput
    data: XOR<SeguimientoTicketUpdateWithoutUsuarioInput, SeguimientoTicketUncheckedUpdateWithoutUsuarioInput>
  }

  export type SeguimientoTicketUpdateManyWithWhereWithoutUsuarioInput = {
    where: SeguimientoTicketScalarWhereInput
    data: XOR<SeguimientoTicketUpdateManyMutationInput, SeguimientoTicketUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ClienteInternetUpsertWithWhereUniqueWithoutAsesorInput = {
    where: ClienteInternetWhereUniqueInput
    update: XOR<ClienteInternetUpdateWithoutAsesorInput, ClienteInternetUncheckedUpdateWithoutAsesorInput>
    create: XOR<ClienteInternetCreateWithoutAsesorInput, ClienteInternetUncheckedCreateWithoutAsesorInput>
  }

  export type ClienteInternetUpdateWithWhereUniqueWithoutAsesorInput = {
    where: ClienteInternetWhereUniqueInput
    data: XOR<ClienteInternetUpdateWithoutAsesorInput, ClienteInternetUncheckedUpdateWithoutAsesorInput>
  }

  export type ClienteInternetUpdateManyWithWhereWithoutAsesorInput = {
    where: ClienteInternetScalarWhereInput
    data: XOR<ClienteInternetUpdateManyMutationInput, ClienteInternetUncheckedUpdateManyWithoutAsesorInput>
  }

  export type RegistroCajaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RegistroCajaWhereUniqueInput
    update: XOR<RegistroCajaUpdateWithoutUsuarioInput, RegistroCajaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RegistroCajaCreateWithoutUsuarioInput, RegistroCajaUncheckedCreateWithoutUsuarioInput>
  }

  export type RegistroCajaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RegistroCajaWhereUniqueInput
    data: XOR<RegistroCajaUpdateWithoutUsuarioInput, RegistroCajaUncheckedUpdateWithoutUsuarioInput>
  }

  export type RegistroCajaUpdateManyWithWhereWithoutUsuarioInput = {
    where: RegistroCajaScalarWhereInput
    data: XOR<RegistroCajaUpdateManyMutationInput, RegistroCajaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type UsuarioCreateManyEmpresaInput = {
    id?: number
    sucursalId?: number | null
    nombre: string
    correo: string
    telefono?: string | null
    rol: $Enums.RolUsuario
    activo?: boolean
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RutaCreateManyEmpresaInput = {
    id?: number
    nombreRuta: string
    cobradorId: number
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
  }

  export type ClienteInternetCreateManyEmpresaInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaInternetCreateManyEmpresaInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    metodoPago: $Enums.MetodoPagoFacturaInternet
    clienteId: number
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type TicketSoporteCreateManyEmpresaInput = {
    id?: number
    clienteId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
  }

  export type ServicioInternetCreateManyEmpresaInput = {
    id?: number
    nombre: string
    velocidad?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type UbicacionCreateManyEmpresaInput = {
    id?: number
    creadoEn?: Date | string
    latitud?: number | null
    longitud?: number | null
    clienteId: number
  }

  export type ProveedorCreateManyEmpresaInput = {
    id?: number
    nombre: string
    correo?: string | null
    telefono?: string | null
    direccion?: string | null
  }

  export type ServicioCreateManyEmpresaInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    tipoServicioId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaCreateManyEmpresaInput = {
    id?: number
    clienteId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type UsuarioUpdateWithoutEmpresaInput = {
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    Ruta?: RutaUncheckedUpdateManyWithoutCobradorNestedInput
    ticketsAsignados?: TicketSoporteUncheckedUpdateManyWithoutTecnicoNestedInput
    ticketsCreados?: TicketSoporteUncheckedUpdateManyWithoutCreadoPorNestedInput
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutUsuarioNestedInput
    clientesAsesorados?: ClienteInternetUncheckedUpdateManyWithoutAsesorNestedInput
    RegistroCaja?: RegistroCajaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    sucursalId?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    rol?: EnumRolUsuarioFieldUpdateOperationsInput | $Enums.RolUsuario
    activo?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RutaUpdateWithoutEmpresaInput = {
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    cobrador?: UsuarioUpdateOneRequiredWithoutRutaNestedInput
    Clientes?: ClienteInternetUpdateManyWithoutRutaNestedInput
  }

  export type RutaUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobradorId?: IntFieldUpdateOperationsInput | number
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    Clientes?: ClienteInternetUncheckedUpdateManyWithoutRutaNestedInput
  }

  export type RutaUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobradorId?: IntFieldUpdateOperationsInput | number
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
  }

  export type ClienteInternetUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaInternetUpdateWithoutEmpresaInput = {
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaInternetNestedInput
    pagos?: PagoFacturaInternetUpdateManyWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFieldUpdateOperationsInput | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    pagos?: PagoFacturaInternetUncheckedUpdateManyWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    clienteId?: IntFieldUpdateOperationsInput | number
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketSoporteUpdateWithoutEmpresaInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutTicketSoporteNestedInput
    tecnico?: UsuarioUpdateOneWithoutTicketsAsignadosNestedInput
    creadoPor?: UsuarioUpdateOneWithoutTicketsCreadosNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServicioInternetUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteInternetUpdateManyWithoutServicioNestedInput
  }

  export type ServicioInternetUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteInternetUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioInternetUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    velocidad?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UbicacionUpdateWithoutEmpresaInput = {
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutUbicacionNestedInput
  }

  export type UbicacionUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type UbicacionUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    latitud?: NullableFloatFieldUpdateOperationsInput | number | null
    longitud?: NullableFloatFieldUpdateOperationsInput | number | null
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type ProveedorUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProveedorUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProveedorUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServicioUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoServicio?: TipoServicioUpdateOneRequiredWithoutServiciosNestedInput
    clientes?: ClienteServicioUpdateManyWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteServicioUncheckedUpdateManyWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    tipoServicioId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaUpdateWithoutEmpresaInput = {
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutFacturaNestedInput
    servicios?: FacturaServicioUpdateManyWithoutFacturaNestedInput
    pagos?: PagoFacturaUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: FacturaServicioUncheckedUpdateManyWithoutFacturaNestedInput
    pagos?: PagoFacturaUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicioCreateManyTipoServicioInput = {
    id?: number
    nombre: string
    descripcion?: string | null
    precio: number
    estado?: $Enums.EstadoServicio
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ServicioUpdateWithoutTipoServicioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutServicioNestedInput
    clientes?: ClienteServicioUpdateManyWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateWithoutTipoServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    clientes?: ClienteServicioUncheckedUpdateManyWithoutServicioNestedInput
    FacturaServicio?: FacturaServicioUncheckedUpdateManyWithoutServicioNestedInput
  }

  export type ServicioUncheckedUpdateManyWithoutTipoServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    precio?: FloatFieldUpdateOperationsInput | number
    estado?: EnumEstadoServicioFieldUpdateOperationsInput | $Enums.EstadoServicio
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioCreateManyServicioInput = {
    id?: number
    clienteId: number
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaServicioCreateManyServicioInput = {
    id?: number
    facturaId: number
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteServicioUpdateWithoutServicioInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutClienteServicioNestedInput
  }

  export type ClienteServicioUncheckedUpdateWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioUncheckedUpdateManyWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioUpdateWithoutServicioInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    factura?: FacturaUpdateOneRequiredWithoutServiciosNestedInput
  }

  export type FacturaServicioUncheckedUpdateWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioUncheckedUpdateManyWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetCreateManyServicioInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteInternetUpdateWithoutServicioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateManyWithoutServicioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaCreateManyCajaInput = {
    id?: number
    saldoInicial: number
    saldoFinal: number
    usuarioId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RegistroCajaUpdateWithoutCajaInput = {
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneWithoutRegistroCajaNestedInput
  }

  export type RegistroCajaUncheckedUpdateWithoutCajaInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaUncheckedUpdateManyWithoutCajaInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioCreateManyFacturaInput = {
    id?: number
    servicioId: number
    cantidad?: number
    precioUnitario: number
    total: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type PagoFacturaCreateManyFacturaInput = {
    id?: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type FacturaServicioUpdateWithoutFacturaInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: ServicioUpdateOneRequiredWithoutFacturaServicioNestedInput
  }

  export type FacturaServicioUncheckedUpdateWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaServicioUncheckedUpdateManyWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaUpdateWithoutFacturaInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutPagoFacturaNestedInput
  }

  export type PagoFacturaUncheckedUpdateWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaUncheckedUpdateManyWithoutFacturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetCreateManyFacturaInternetInput = {
    id?: number
    clienteId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type PagoFacturaInternetUpdateWithoutFacturaInternetInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteInternetUpdateOneRequiredWithoutPagoFacturaInternetNestedInput
  }

  export type PagoFacturaInternetUncheckedUpdateWithoutFacturaInternetInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetUncheckedUpdateManyWithoutFacturaInternetInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketSoporteCreateManyClienteInput = {
    id?: number
    empresaId: number
    tecnicoId?: number | null
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
  }

  export type FotosCreateManyClienteInput = {
    id?: number
    nombreFoto: string
    url?: string | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteServicioCreateManyClienteInput = {
    id?: number
    servicioId: number
    fechaInicio?: Date | string
    fechaFin?: Date | string | null
    estado?: $Enums.EstadoClienteServicio
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type FacturaInternetCreateManyClienteInput = {
    id?: number
    fechaPagoEsperada?: Date | string | null
    fechaPagada?: Date | string | null
    montoPago?: number | null
    saldoPendiente?: number | null
    empresaId: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: $Enums.EstadoFacturaInternet
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type PagoFacturaInternetCreateManyClienteInput = {
    id?: number
    facturaInternetId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPagoFacturaInternet
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type FacturaCreateManyClienteInput = {
    id?: number
    empresaId: number
    tipoFactura: $Enums.TipoFactura
    montoTotal: number
    saldoPendiente?: number
    fechaEmision?: Date | string
    fechaVencimiento?: Date | string | null
    estado?: $Enums.EstadoFactura
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type PagoFacturaCreateManyClienteInput = {
    id?: number
    facturaId: number
    montoPagado: number
    metodoPago: $Enums.MetodoPago
    fechaPago?: Date | string
    creadoEn?: Date | string
  }

  export type RutaUpdateWithoutClientesInput = {
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    cobrador?: UsuarioUpdateOneRequiredWithoutRutaNestedInput
    Empresa?: EmpresaUpdateOneRequiredWithoutRutasNestedInput
  }

  export type RutaUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobradorId?: IntFieldUpdateOperationsInput | number
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    EmpresaId?: IntFieldUpdateOperationsInput | number
  }

  export type RutaUncheckedUpdateManyWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobradorId?: IntFieldUpdateOperationsInput | number
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    EmpresaId?: IntFieldUpdateOperationsInput | number
  }

  export type TicketSoporteUpdateWithoutClienteInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    empresa?: EmpresaUpdateOneRequiredWithoutTicketSoporteNestedInput
    tecnico?: UsuarioUpdateOneWithoutTicketsAsignadosNestedInput
    creadoPor?: UsuarioUpdateOneWithoutTicketsCreadosNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FotosUpdateWithoutClienteInput = {
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FotosUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FotosUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreFoto?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioUpdateWithoutClienteInput = {
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: ServicioUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteServicioUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteServicioUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    servicioId?: IntFieldUpdateOperationsInput | number
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoClienteServicioFieldUpdateOperationsInput | $Enums.EstadoClienteServicio
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaInternetUpdateWithoutClienteInput = {
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturasNestedInput
    pagos?: PagoFacturaInternetUpdateManyWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    pagos?: PagoFacturaInternetUncheckedUpdateManyWithoutFacturaInternetNestedInput
  }

  export type FacturaInternetUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    fechaPagoEsperada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaPagada?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    montoPago?: NullableFloatFieldUpdateOperationsInput | number | null
    saldoPendiente?: NullableFloatFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    estadoFacturaInternet?: EnumEstadoFacturaInternetFieldUpdateOperationsInput | $Enums.EstadoFacturaInternet
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetUpdateWithoutClienteInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    facturaInternet?: FacturaInternetUpdateOneRequiredWithoutPagosNestedInput
  }

  export type PagoFacturaInternetUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaInternetId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaInternetUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaInternetId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFacturaInternetFieldUpdateOperationsInput | $Enums.MetodoPagoFacturaInternet
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacturaUpdateWithoutClienteInput = {
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    empresa?: EmpresaUpdateOneRequiredWithoutFacturaNestedInput
    servicios?: FacturaServicioUpdateManyWithoutFacturaNestedInput
    pagos?: PagoFacturaUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicios?: FacturaServicioUncheckedUpdateManyWithoutFacturaNestedInput
    pagos?: PagoFacturaUncheckedUpdateManyWithoutFacturaNestedInput
  }

  export type FacturaUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tipoFactura?: EnumTipoFacturaFieldUpdateOperationsInput | $Enums.TipoFactura
    montoTotal?: FloatFieldUpdateOperationsInput | number
    saldoPendiente?: FloatFieldUpdateOperationsInput | number
    fechaEmision?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaVencimiento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: EnumEstadoFacturaFieldUpdateOperationsInput | $Enums.EstadoFactura
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaUpdateWithoutClienteInput = {
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    factura?: FacturaUpdateOneRequiredWithoutPagosNestedInput
  }

  export type PagoFacturaUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PagoFacturaUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    facturaId?: IntFieldUpdateOperationsInput | number
    montoPagado?: FloatFieldUpdateOperationsInput | number
    metodoPago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    fechaPago?: DateTimeFieldUpdateOperationsInput | Date | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MunicipioCreateManyDepartamentoInput = {
    id?: number
    nombre: string
  }

  export type ClienteInternetCreateManyDepartamentoInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    municipioId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type MunicipioUpdateWithoutDepartamentoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteInternetUpdateManyWithoutMunicipioNestedInput
  }

  export type MunicipioUncheckedUpdateWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteInternetUncheckedUpdateManyWithoutMunicipioNestedInput
  }

  export type MunicipioUncheckedUpdateManyWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteInternetUpdateWithoutDepartamentoInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateManyWithoutDepartamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetCreateManyMunicipioInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    asesorId?: number | null
    servicioId: number
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type ClienteInternetUpdateWithoutMunicipioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutMunicipioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateManyWithoutMunicipioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetUpdateWithoutRutaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    asesor?: UsuarioUpdateOneWithoutClientesAsesoradosNestedInput
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutRutaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateManyWithoutRutaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    asesorId?: NullableIntFieldUpdateOperationsInput | number | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguimientoTicketCreateManyTicketInput = {
    id?: number
    usuarioId: number
    descripcion: string
    fechaRegistro?: Date | string
  }

  export type SeguimientoTicketUpdateWithoutTicketInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutSeguimientoTicketNestedInput
  }

  export type SeguimientoTicketUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguimientoTicketUncheckedUpdateManyWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RutaCreateManyCobradorInput = {
    id?: number
    nombreRuta: string
    cobrados: number
    montoCobrado: number
    estadoRuta: $Enums.EstadoRuta
    EmpresaId: number
  }

  export type TicketSoporteCreateManyTecnicoInput = {
    id?: number
    clienteId: number
    empresaId: number
    creadoPorId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
  }

  export type TicketSoporteCreateManyCreadoPorInput = {
    id?: number
    clienteId: number
    empresaId: number
    tecnicoId?: number | null
    estado?: $Enums.EstadoTicketSoporte
    prioridad?: $Enums.PrioridadTicketSoporte
    descripcion: string
    comentarios?: string | null
    fechaCreacion?: Date | string
    fechaCierre?: Date | string | null
  }

  export type SeguimientoTicketCreateManyUsuarioInput = {
    id?: number
    ticketId: number
    descripcion: string
    fechaRegistro?: Date | string
  }

  export type ClienteInternetCreateManyAsesorInput = {
    id?: number
    nombre: string
    telefono?: string | null
    direccion?: string | null
    dpi?: string | null
    observaciones?: string | null
    contactoReferenciaNombre?: string | null
    contactoReferenciaTelefono?: string | null
    estadoCliente: $Enums.EstadoCliente
    contrasenaWifi: string
    ssidRouter?: string | null
    fechaInstalacion?: Date | string | null
    servicioId: number
    municipioId?: number | null
    departamentoId?: number | null
    empresaId: number
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RegistroCajaCreateManyUsuarioInput = {
    id?: number
    saldoInicial: number
    saldoFinal: number
    cajaId?: number | null
    creadoEn?: Date | string
    actualizadoEn?: Date | string
  }

  export type RutaUpdateWithoutCobradorInput = {
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    Clientes?: ClienteInternetUpdateManyWithoutRutaNestedInput
    Empresa?: EmpresaUpdateOneRequiredWithoutRutasNestedInput
  }

  export type RutaUncheckedUpdateWithoutCobradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    EmpresaId?: IntFieldUpdateOperationsInput | number
    Clientes?: ClienteInternetUncheckedUpdateManyWithoutRutaNestedInput
  }

  export type RutaUncheckedUpdateManyWithoutCobradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombreRuta?: StringFieldUpdateOperationsInput | string
    cobrados?: IntFieldUpdateOperationsInput | number
    montoCobrado?: IntFieldUpdateOperationsInput | number
    estadoRuta?: EnumEstadoRutaFieldUpdateOperationsInput | $Enums.EstadoRuta
    EmpresaId?: IntFieldUpdateOperationsInput | number
  }

  export type TicketSoporteUpdateWithoutTecnicoInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutTicketSoporteNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutTicketSoporteNestedInput
    creadoPor?: UsuarioUpdateOneWithoutTicketsCreadosNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateWithoutTecnicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateManyWithoutTecnicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoPorId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketSoporteUpdateWithoutCreadoPorInput = {
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cliente?: ClienteInternetUpdateOneRequiredWithoutTicketSoporteNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutTicketSoporteNestedInput
    tecnico?: UsuarioUpdateOneWithoutTicketsAsignadosNestedInput
    SeguimientoTicket?: SeguimientoTicketUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateWithoutCreadoPorInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    SeguimientoTicket?: SeguimientoTicketUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketSoporteUncheckedUpdateManyWithoutCreadoPorInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    empresaId?: IntFieldUpdateOperationsInput | number
    tecnicoId?: NullableIntFieldUpdateOperationsInput | number | null
    estado?: EnumEstadoTicketSoporteFieldUpdateOperationsInput | $Enums.EstadoTicketSoporte
    prioridad?: EnumPrioridadTicketSoporteFieldUpdateOperationsInput | $Enums.PrioridadTicketSoporte
    descripcion?: StringFieldUpdateOperationsInput | string
    comentarios?: NullableStringFieldUpdateOperationsInput | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaCierre?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeguimientoTicketUpdateWithoutUsuarioInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: TicketSoporteUpdateOneRequiredWithoutSeguimientoTicketNestedInput
  }

  export type SeguimientoTicketUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguimientoTicketUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticketId?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaRegistro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInternetUpdateWithoutAsesorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: ServicioInternetUpdateOneRequiredWithoutClientesNestedInput
    municipio?: MunicipioUpdateOneWithoutClientesNestedInput
    departamento?: DepartamentoUpdateOneWithoutClientesNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutClientesInternetNestedInput
    ruta?: RutaUpdateManyWithoutClientesNestedInput
    IP?: IPUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUpdateOneWithoutClienteNestedInput
    fotos?: FotosUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUpdateManyWithoutClienteNestedInput
    factura?: FacturaUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateWithoutAsesorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ruta?: RutaUncheckedUpdateManyWithoutClientesNestedInput
    IP?: IPUncheckedUpdateOneWithoutClienteNestedInput
    ubicacion?: UbicacionUncheckedUpdateOneWithoutClienteNestedInput
    ticketSoporte?: TicketSoporteUncheckedUpdateManyWithoutClienteNestedInput
    saldoCliente?: saldoClienteUncheckedUpdateOneWithoutClienteNestedInput
    fotos?: FotosUncheckedUpdateManyWithoutClienteNestedInput
    clienteServicio?: ClienteServicioUncheckedUpdateManyWithoutClienteNestedInput
    facturaInternet?: FacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    PagoFacturaInternet?: PagoFacturaInternetUncheckedUpdateManyWithoutClienteNestedInput
    factura?: FacturaUncheckedUpdateManyWithoutClienteNestedInput
    pagoFactura?: PagoFacturaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteInternetUncheckedUpdateManyWithoutAsesorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    dpi?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaNombre?: NullableStringFieldUpdateOperationsInput | string | null
    contactoReferenciaTelefono?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCliente?: EnumEstadoClienteFieldUpdateOperationsInput | $Enums.EstadoCliente
    contrasenaWifi?: StringFieldUpdateOperationsInput | string
    ssidRouter?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInstalacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    servicioId?: IntFieldUpdateOperationsInput | number
    municipioId?: NullableIntFieldUpdateOperationsInput | number | null
    departamentoId?: NullableIntFieldUpdateOperationsInput | number | null
    empresaId?: IntFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaUpdateWithoutUsuarioInput = {
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    caja?: SaldoCajaUpdateOneWithoutRegistrosCajaNestedInput
  }

  export type RegistroCajaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    cajaId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroCajaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    saldoInicial?: FloatFieldUpdateOperationsInput | number
    saldoFinal?: FloatFieldUpdateOperationsInput | number
    cajaId?: NullableIntFieldUpdateOperationsInput | number | null
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    actualizadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EmpresaCountOutputTypeDefaultArgs instead
     */
    export type EmpresaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmpresaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoServicioCountOutputTypeDefaultArgs instead
     */
    export type TipoServicioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoServicioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicioCountOutputTypeDefaultArgs instead
     */
    export type ServicioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicioInternetCountOutputTypeDefaultArgs instead
     */
    export type ServicioInternetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicioInternetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaldoCajaCountOutputTypeDefaultArgs instead
     */
    export type SaldoCajaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaldoCajaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacturaCountOutputTypeDefaultArgs instead
     */
    export type FacturaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacturaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacturaInternetCountOutputTypeDefaultArgs instead
     */
    export type FacturaInternetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacturaInternetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteInternetCountOutputTypeDefaultArgs instead
     */
    export type ClienteInternetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteInternetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartamentoCountOutputTypeDefaultArgs instead
     */
    export type DepartamentoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartamentoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MunicipioCountOutputTypeDefaultArgs instead
     */
    export type MunicipioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MunicipioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RutaCountOutputTypeDefaultArgs instead
     */
    export type RutaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RutaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketSoporteCountOutputTypeDefaultArgs instead
     */
    export type TicketSoporteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketSoporteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmpresaDefaultArgs instead
     */
    export type EmpresaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmpresaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TipoServicioDefaultArgs instead
     */
    export type TipoServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TipoServicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicioDefaultArgs instead
     */
    export type ServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProveedorDefaultArgs instead
     */
    export type ProveedorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProveedorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicioInternetDefaultArgs instead
     */
    export type ServicioInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicioInternetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaldoEmpresaDefaultArgs instead
     */
    export type SaldoEmpresaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaldoEmpresaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaldoCajaDefaultArgs instead
     */
    export type SaldoCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaldoCajaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegistroCajaDefaultArgs instead
     */
    export type RegistroCajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegistroCajaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteServicioDefaultArgs instead
     */
    export type ClienteServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteServicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacturaDefaultArgs instead
     */
    export type FacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacturaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PagoFacturaDefaultArgs instead
     */
    export type PagoFacturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PagoFacturaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacturaInternetDefaultArgs instead
     */
    export type FacturaInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacturaInternetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PagoFacturaInternetDefaultArgs instead
     */
    export type PagoFacturaInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PagoFacturaInternetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacturaServicioDefaultArgs instead
     */
    export type FacturaServicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacturaServicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IPDefaultArgs instead
     */
    export type IPArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IPDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FotosDefaultArgs instead
     */
    export type FotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FotosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteInternetDefaultArgs instead
     */
    export type ClienteInternetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteInternetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use saldoClienteDefaultArgs instead
     */
    export type saldoClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = saldoClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UbicacionDefaultArgs instead
     */
    export type UbicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UbicacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartamentoDefaultArgs instead
     */
    export type DepartamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartamentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MunicipioDefaultArgs instead
     */
    export type MunicipioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MunicipioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RutaDefaultArgs instead
     */
    export type RutaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RutaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketSoporteDefaultArgs instead
     */
    export type TicketSoporteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketSoporteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeguimientoTicketDefaultArgs instead
     */
    export type SeguimientoTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeguimientoTicketDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}